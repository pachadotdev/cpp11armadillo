[{"path":[]},{"path":"/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within communications GitHub email, also applies individual expressing public spaces (e.g. social media).","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior reported forwarded legal authorities necessary.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Questions contributions project require respect Code Conduct:","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within project.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/ code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to cpp11eigen","title":"Contributing to cpp11eigen","text":"outlines propose change cpp11eigen. detailed info contributing , please see development contributing guide.","code":""},{"path":"/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to cpp11eigen","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to cpp11eigen","text":"want make bigger change, ’s good idea first file issue make sure maintainer agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to cpp11eigen","text":"Fork repository clone onto computer. haven’t done , use usethis::create_from_github(\"pachadotdev/cpp11eigen\", fork = TRUE). Install development dependences devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). Even better, use make check command line run checks clean environment. R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. extra sure run make clean && make install && make test discard don’t outdated binaries. Create Git branch pull request (PR). Use usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. Add description changes top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to cpp11eigen","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. edit C++ code, please run make format apply clang format style CI fail. Use roxygen2, Markdown syntax, documentation. Use testthat unit tests. Contributions test cases included easier understand accept.","code":""},{"path":"/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to cpp11eigen","text":"Please note cpp11eigen project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"/LICENSE.html","id":"1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"/LICENSE.html","id":"2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"/LICENSE.html","id":"3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"/LICENSE.html","id":"4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"/LICENSE.html","id":"5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"/LICENSE.html","id":"6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"/LICENSE.html","id":"7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"/LICENSE.html","id":"8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"/LICENSE.html","id":"9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with cpp11armadillo","title":"Getting help with cpp11armadillo","text":"Thanks using cpp11armadillo! filing issue, places explore pieces put together make process smooth possible.","code":""},{"path":"/SUPPORT.html","id":"make-a-reprex","dir":"","previous_headings":"","what":"Make a reprex","title":"Getting help with cpp11armadillo","text":"Start making minimal reproducible example using reprex package. reprex make R-question-asking endeavors easier (pretty insane ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site.","code":""},{"path":"/SUPPORT.html","id":"where-to-ask","dir":"","previous_headings":"","what":"Where to ask?","title":"Getting help with cpp11armadillo","text":"Armed reprex, next step figure ask. ’s question: start community.rstudio.com, /StackOverflow. people answer questions. ’s bug: ’re right place, file issue. ’re sure: let community help figure ! problem bug feature request, can easily return report . opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed.","code":""},{"path":"/SUPPORT.html","id":"what-happens-next","dir":"","previous_headings":"","what":"What happens next?","title":"Getting help with cpp11armadillo","text":"can’t reproduce bug, can’t fix !","code":""},{"path":[]},{"path":"/articles/data-types.html","id":"matrix-class","dir":"Articles","previous_headings":"Matrix, Vector, Cube and Field Classes","what":"Matrix class","title":"Armadillo data types","text":"Mat<type>, mat cx_mat classes dense matrices, elements stored column-major ordering (e.g., column column). root matrix class Mat<type>, type one : float double std::complex<float> std::complex<double> short int long unsigned short unsigned int unsigned long convenience following typedefs defined: mat = Mat<double> dmat = Mat<double> fmat = Mat<float> cx_mat = Mat<cx_double> (cx_double shortcut std::complex<double>) cx_dmat = Mat<cx_double> cx_fmat = Mat<cx_float> (cx_float shortcut std::complex<float>) umat = Mat<uword> (uword shortcut unsigned int) imat = Mat<sword> (sword shortcut signed int) mat type used convenience, possible use matrix types (e.g, fmat, cx_mat) instead. Matrix types integer elements (umat imat) hold special values NaN Inf. Functions use LAPACK (generally matrix decompositions) valid following matrix types: mat, dmat, fmat, cx_mat, cx_dmat, cx_fmat.","code":""},{"path":"/articles/data-types.html","id":"constructors","dir":"Articles","previous_headings":"Matrix, Vector, Cube and Field Classes > Matrix class","what":"Constructors","title":"Armadillo data types","text":"mat() mat(n_rows, n_cols) mat(n_rows, n_cols, fill_form) (elements initialised according fill_form) mat(size(X)) mat(size(X), fill_form) (elements initialised according fill_form) mat(mat) mat(vec) mat(rowvec) mat(initializer_list) mat(string) mat(std::vector) (treated column vector) mat(sp_mat) (converting sparse matrix dense matrix) cx_mat(mat,mat) (constructing complex matrix two real matrices) elements can explicitly initialised construction specifying fill_form, one : fill::zeros set elements 0 (default cpp11armadillo) fill::ones set elements 1 fill::eye set elements main diagonal 1 -diagonal elements 0 fill::randu set elements random values uniform distribution [0,1] interval fill::randn set elements random values normal distribution zero mean unit variance fill::value(scalar) set elements specified scalar fill::none initialise elements (matrix may garbage values) mat(string) constructor, format elements separated spaces, rows denoted semicolons; example, 2x2 identity matrix can created using \"1 0; 0 1\". Note string based initialisation slower directly setting elements using element initialisation. instance mat automatically allocates releases internal memory. internally allocated memory used instance mat automatically released soon instance goes scope. example, instance mat declared inside function, automatically destroyed end function. forcefully release memory point, use .reset(). Note normal use required.","code":""},{"path":"/articles/data-types.html","id":"advanced-constructors","dir":"Articles","previous_headings":"Matrix, Vector, Cube and Field Classes > Matrix class","what":"Advanced constructors","title":"Armadillo data types","text":"Create matrix using data writable auxiliary (external) memory, ptr_aux_mem pointer memory. default matrix allocates memory copies data auxiliary memory (safety). However, copy_aux_mem set false, matrix instead directly use auxiliary memory (e.g., copying); faster, can dangerous unless know . strict set false, matrix use auxiliary memory size change aliasing event. strict set true, matrix bound auxiliary memory lifetime; number elements matrix changed. Create matrix copying data read-auxiliary memory, ptr_aux_mem pointer memory Create fixed size matrix, size specified via template arguments. Memory matrix reserved compile time. generally faster dynamic memory allocation, size matrix changed afterwards (directly indirectly). convenience, several pre-defined typedefs matrix type (types : umat, imat, fmat, mat, cx_fmat, cx_mat). typedefs specify square matrix size, ranging 2x2 9x9. typedefs defined appending two digit form size matrix type. Examples: mat33 equivalent mat::fixed<3,3>, cx_mat44 equivalent cx_mat::fixed<4,4>. Create fixed size matrix, elements explicitly initialised according fill_form. Create fixed size matrix, size specified via template arguments; data copied auxiliary memory, ptr_aux_mem pointer memory.","code":""},{"path":"/articles/data-types.html","id":"examples","dir":"Articles","previous_headings":"Matrix, Vector, Cube and Field Classes > Matrix class","what":"Examples","title":"Armadillo data types","text":"","code":"set.seed(123) a <- matrix(runif(25), nrow = 5, ncol = 5) [[cpp11::register]] doubles_matrix<> matrix_fun1_(const doubles_matrix<>& a) {   mat A = as_Mat(a); // convert from R to C++    double x = A(0, 0);  // access an element on row 1, column 1   A = A + x; // scalar addition          mat B = A + A; // matrix addition   mat C = A * B; // matrix multiplication   mat D = A % B; // element-wise matrix multiplication    mat res = B + C + D;    return as_doubles_matrix(res);  // convert from C++ to R }        [[cpp11::register]] list matrix_fun2_(const doubles_matrix<>& a) {   mat A = as_Mat(a);   mat B = A + A;    cx_mat X(A,B); // construct a complex matrix out of two real matrices    B.zeros();                       // set all elements to zero   B.set_size(A.n_rows, A.n_cols);  // resize the matrix   B.ones(5, 6);                    // same as mat B(5, 6, fill::ones)            mat::fixed<5,6> F; // fixed size matrix          double aux_mem[24]; // auxiliary memory   mat H(&aux_mem[0], 4, 6, false);  // use auxiliary memory    X = X + F.submat(0, 0, 4, 4) + H(1, 2)    Mat<double> res_real = real(X);   Mat<double> res_imag = imag(X);    writable::list res;   res.push_back({\"real\"_nm = as_doubles_matrix(res_real)});   res.push_back({\"imag\"_nm = as_doubles_matrix(res_imag)});    return res; }"},{"path":"/articles/data-types.html","id":"column-vector-class","dir":"Articles","previous_headings":"Matrix, Vector, Cube and Field Classes","what":"Column vector class","title":"Armadillo data types","text":"Col<type>, vec cx_vec classes column vectors (dense matrices one column). Col<type> class derived Mat<type> class inherits member functions. convenience following typedefs defined: vec = colvec = Col<double> dvec = dcolvec = Col<double> fvec = fcolvec = Col<float> cx_vec = cx_colvec = Col<[cx_double](#cx_double)> cx_dvec = cx_dcolvec = Col<[cx_double](#cx_double)> cx_fvec = cx_fcolvec = Col<[cx_float](#cx_double)> uvec = ucolvec = Col<[uword](#uword)> ivec = icolvec = Col<[sword](#uword)> vec colvec types meaning used interchangeably. types vec colvec used convenience. possible use column vector types instead (e.g., fvec fcolvec). Functions take mat input can generally also take Col input. Main exceptions functions require square matrices.","code":""},{"path":"/articles/data-types.html","id":"constructors-1","dir":"Articles","previous_headings":"Matrix, Vector, Cube and Field Classes > Column vector class","what":"Constructors:","title":"Armadillo data types","text":"vec() vec(_n_elem_) vec(_n_elem, fill_form) (elements initialised according fill_form) vec(size(X)) vec(size(X), fill_form) (elements initialised according fill_form) vec(vec) vec(mat) (std::logic_error exception thrown given matrix one column) vec(initializer_list) vec(string) (elements separated spaces) vec(std::vector) cx_vec(vec,vec) (constructing complex vector two real vectors)","code":""},{"path":"/articles/data-types.html","id":"advanced-constructors-1","dir":"Articles","previous_headings":"Matrix, Vector, Cube and Field Classes > Column vector class","what":"Advanced constructors","title":"Armadillo data types","text":"Create column vector using data writable auxiliary (external) memory, ptr_aux_mem pointer memory. default vector allocates memory copies data auxiliary memory (safety). However, copy_aux_mem set false, vector instead directly use auxiliary memory (e.g., copying). faster, can dangerous unless know . strict set false, vector use auxiliary memory size change aliasing event. strict set true, vector bound auxiliary memory lifetime; number elements vector changed. Create column vector copying data read-auxiliary memory, ptr_aux_mem pointer memory Create fixed size column vector, size specified via template argument. Memory vector reserved compile time. generally faster dynamic memory allocation, size vector changed afterwards (directly indirectly). convenience, several pre-defined typedefs vector type (types : uvec, ivec, fvec, vec, cx_fvec, cx_vec well corresponding colvec versions). pre-defined typedefs specify vector sizes ranging 2 9. typedefs defined appending single digit form size vector type. Examples: vec3 equivalent vec::fixed<3>, cx_vec4 equivalent cx_vec::fixed<4>. Create fixed size column vector, elements explicitly initialised according fill_form. Create fixed size column vector, size specified via template argument; data copied auxiliary memory, ptr_aux_mem pointer memory.","code":""},{"path":"/articles/data-types.html","id":"examples-1","dir":"Articles","previous_headings":"Matrix, Vector, Cube and Field Classes > Column vector class","what":"Examples","title":"Armadillo data types","text":"","code":"set.seed(123) x <- runif(10) y <- rep(1, 10) [[cpp11::register]] doubles column_fun1_(const doubles& x, const doubles& y) {   vec X = as_Col(x); // convert from R to C++   vec Y = as_Col(y);    mat A(10, 10, fill::randu);   vec Z = A.col(5); // extract a column vector    Z = Z + Y + X;    return as_doubles(Z); // convert from C++ to R }"},{"path":"/articles/data-types.html","id":"row-vector-class","dir":"Articles","previous_headings":"Matrix, Vector, Cube and Field Classes","what":"Row vector class","title":"Armadillo data types","text":"Row<type>, rowvec cx_rowvec classes row vectors (dense matrices one row). template Row<type> class derived Mat<type> class inherits member functions. convenience following typedefs defined: rowvec = Row<double> drowvec = Row<double> frowvec = Row<float> cx_rowvec = Row<cx_double> cx_drowvec = Row<cx_double> cx_frowvec = Row<cx_float> urowvec = Row<uword> irowvec = Row<sword> rowvec type used convenience. possible use row vector types instead (e.g., frowvec). Functions take mat input can generally also take Row input. Main exceptions functions require square matrices.","code":""},{"path":"/articles/data-types.html","id":"constructors-2","dir":"Articles","previous_headings":"Matrix, Vector, Cube and Field Classes > Row vector class","what":"Constructors","title":"Armadillo data types","text":"rowvec() rowvec(n_elem) rowvec(n_elem, fill_form) (elements initialised according fill_form) rowvec(size(X)) rowvec(size(X), fill_form) (elements initialised according fill_form) rowvec(rowvec) rowvec(mat) (std::logic_error exception thrown given matrix one row) rowvec(initializer_list) rowvec(string) (elements separated spaces) rowvec(std::vector) cx_rowvec(rowvec,rowvec) (constructing complex row vector two real row vectors)","code":""},{"path":"/articles/data-types.html","id":"advanced-constructors-2","dir":"Articles","previous_headings":"Matrix, Vector, Cube and Field Classes > Row vector class","what":"Advanced constructors","title":"Armadillo data types","text":"Create row vector using data writable auxiliary (external) memory, ptr_aux_mem pointer memory. default vector allocates memory copies data auxiliary memory (safety). However, copy_aux_mem set false, vector instead directly use auxiliary memory (e.g., copying); faster, can dangerous unless know . strict set false, vector use auxiliary memory size change aliasing event. strict set true, vector bound auxiliary memory lifetime; number elements vector changed. Create row vector copying data read-auxiliary memory, ptr_aux_mem pointer memory. Create fixed size row vector, size specified via template argument. Memory vector reserved compile time. generally faster dynamic memory allocation, size vector changed afterwards (directly indirectly). convenience, several pre-defined typedefs vector type (types : urowvec, irowvec, frowvec, rowvec, cx_frowvec, cx_rowvec). pre-defined typedefs specify vector sizes ranging 2 9. typedefs defined appending single digit form size vector type. Examples: rowvec3 equivalent rowvec::fixed<3>, cx_rowvec4 equivalent cx_rowvec::fixed<4>. Create fixed size row vector, elements explicitly initialised according fill_form. Create fixed size row vector, size specified via template argument; data copied auxiliary memory, ptr_aux_mem pointer memory.","code":""},{"path":"/articles/data-types.html","id":"examples-2","dir":"Articles","previous_headings":"Matrix, Vector, Cube and Field Classes > Row vector class","what":"Examples","title":"Armadillo data types","text":"⚠️Important⚠️: ‘cpp11armadillo’ opinionated package follows notation Econometrics Bruce E. Hansen. intentionally exports/imports matrices column vectors. can use row vectors functions, communication R C++ accept row vectors unless transpose convert matrices.","code":"set.seed(123) x <- runif(10) y <- rep(1, 10) [[cpp11::register]] doubles row_fun1_(const doubles& x, const doubles& y) {   vec X = as_Col(x);  // convert from R to C++   vec Y = as_Col(y);    mat A(10, 10, fill::randu);      rowvec Z = A.row(5);  // extract a row vector   Z = Z + Y.t() + X.t(); // transpose Y and X to be able to sum    vec res = Z.t();      return as_doubles(res);  // convert from C++ to R }"},{"path":"/articles/data-types.html","id":"cube-class","dir":"Articles","previous_headings":"Matrix, Vector, Cube and Field Classes","what":"Cube class","title":"Armadillo data types","text":"Cube<type>, cube cx_cube classes cubes, also known quasi 3rd order tensors “3D matrices”. data stored set slices (matrices) stored contiguously within memory. Within slice, elements stored column-major ordering (e.g., column column) root cube class Cube<type>, type one : float, double, std::complex<float>, std::complex<double>, short, int, long unsigned versions short, int, long. convenience following typedefs defined: cube = Cube<double> dcube = Cube<double> fcube = Cube<float> cx_cube = Cube<cx_double> cx_dcube = Cube<cx_double> cx_fcube = Cube<cx_float> ucube = Cube<uword> icube = Cube<sword> cube type used convenience; possible use types instead (e.g., fcube)","code":""},{"path":"/articles/data-types.html","id":"constructors-3","dir":"Articles","previous_headings":"Matrix, Vector, Cube and Field Classes > Cube class","what":"Constructors","title":"Armadillo data types","text":"cube() cube(n_rows, n_cols, n_slices_) cube(n_rows, n_cols, n_slices, fill_form) (elements initialised according fill_form) cube(size(X)) cube(size(X), fill_form) (elements initialised according fill_form) cube(cube) cx_cube(cube, cube) (constructing complex cube two real cubes) elements can explicitly initialised construction specifying fill_form, one : fill::zeros: set elements 0 (default cpp11armadillo) fill::ones: set elements 1 fill::randu: set elements random values uniform distribution [0,1] interval fill::randn: set elements random values normal distribution zero mean unit variance fill::value(scalar): set elements specified scalar fill::none: initialise elements (cube may garbage values) instance cube automatically allocates releases internal memory. internally allocated memory used instance cube automatically released soon instance goes scope. example, instance cube declared inside function, automatically destroyed end function. forcefully release memory point, use .reset() note normal use required.","code":""},{"path":"/articles/data-types.html","id":"advanced-constructors-3","dir":"Articles","previous_headings":"Matrix, Vector, Cube and Field Classes > Cube class","what":"Advanced constructors","title":"Armadillo data types","text":"Create fixed size cube, size specified via template arguments. Memory cube reserved compile time. generally faster dynamic memory allocation, size cube can’t changed afterwards (directly indirectly). Create cube using data writable auxiliary (external) memory, ptr_aux_mem pointer memory. default cube allocates memory copies data auxiliary memory (safety). However, copy_aux_mem set false, cube instead directly use auxiliary memory (e.g., copying). faster, can dangerous unless know . strict set false, cube use auxiliary memory size change aliasing event strict set true, cube bound auxiliary memory lifetime; number elements cube can’t changed Create cube copying data read-auxiliary memory, ptr_aux_mem pointer memory.","code":""},{"path":"/articles/data-types.html","id":"examples-3","dir":"Articles","previous_headings":"Matrix, Vector, Cube and Field Classes > Cube class","what":"Examples","title":"Armadillo data types","text":"","code":"set.seed(123) a <- matrix(runif(4), nrow = 2, ncol = 2) b <- matrix(rnorm(4), nrow = 2, ncol = 2) [[cpp11::register]] doubles_matrix<> cube_fun1_(const doubles_matrix<>& a,                                                 const doubles_matrix<>& b) {   mat A = as_Mat(a);  // convert from R to C++   mat B = as_Mat(b);    cube X(A.n_rows, A.n_cols, 2);  // create a cube with 2 slices   X.slice(0) = A;                 // copy A into first slice   X.slice(1) = B;                 // copy B into second slice    cube Y = X + X;  // cube addition   cube Z = X % X;  // element-wise cube multiplication    mat res = Y.slice(0) + Z.slice(1);    return as_doubles_matrix(res);  // convert from C++ to R }"},{"path":"/articles/data-types.html","id":"notes","dir":"Articles","previous_headings":"Matrix, Vector, Cube and Field Classes > Cube class","what":"Notes","title":"Armadillo data types","text":"cube slice can interpreted matrix, hence functions take Mat input can generally also take cube slices input size individual slices can’t changed. example, following work:","code":"cube c(5,6,7); c.slice(0) = randu<mat>(10,20); // wrong size"},{"path":"/articles/data-types.html","id":"field-class","dir":"Articles","previous_headings":"Matrix, Vector, Cube and Field Classes","what":"Field class","title":"Armadillo data types","text":"field<object_type> class storing arbitrary objects matrix-like cube-like layouts. similar matrix cube, instead element scalar, element can vector, matrix, cube. similar list R. element can arbitrary size (e.g., field matrices, matrix can unique size).","code":""},{"path":"/articles/data-types.html","id":"constructors-4","dir":"Articles","previous_headings":"Matrix, Vector, Cube and Field Classes > Field class","what":"Constructors","title":"Armadillo data types","text":"object_type another class (e.g., vec, mat, std::string, etc) field<object_type>() field<object_type>(n_elem) field<object_type>(n_rows, n_cols) field<object_type>(n_rows, n_cols, n_slices) field<object_type>(size(X)) field<object_type>(field<object_type>) Examples:","code":"set.seed(123) a <- matrix(runif(4), nrow = 2, ncol = 2) b <- matrix(rnorm(4), nrow = 2, ncol = 2) [[cpp11::register]] doubles_matrix<> field_fun1_(const doubles_matrix<>& a,                                                  const doubles_matrix<>& b) {   mat A = as_Mat(a);  // convert from R to C++   mat B = as_Mat(b);    field<mat> F(A.n_rows, A.n_cols, 3);  // create a field with 2 matrices   F(0) = A;                             // copy A into first location   F(1) = B;                             // copy B into second location   F(2) = F(0) + F(1);                   // matrix addition    mat res = F(0) + F(1) + F(2).t();    return as_doubles_matrix(res);  // convert from C++ to R }"},{"path":"/articles/data-types.html","id":"note","dir":"Articles","previous_headings":"Matrix, Vector, Cube and Field Classes > Field class","what":"Note","title":"Armadillo data types","text":"store set matrices size, Cube class efficient.","code":""},{"path":[]},{"path":"/articles/data-types.html","id":"attributes","dir":"Articles","previous_headings":"Member Functions & Variables","what":"Attributes","title":"Armadillo data types","text":".n_rows number rows; present Mat, Col, Row, Cube, field SpMat .n_cols number columns; present Mat, Col, Row, Cube, field SpMat .n_elem total number elements; present Mat, Col, Row, Cube, field SpMat .n_slices number slices; present Cube field .n_nonzero number non-zero elements; present SpMat variables type uword variables read-; change size, use set_size, copy_size, zeros_member, ones_member, reset. Col Row classes, n_elem also indicates vector length","code":""},{"path":"/articles/data-types.html","id":"examples-4","dir":"Articles","previous_headings":"Member Functions & Variables > Attributes","what":"Examples:","title":"Armadillo data types","text":"","code":"a <- matrix(runif(4), nrow = 2, ncol = 2) [[cpp11::register]] integers attr_fun1_(const doubles_matrix<>& a) {   mat A = as_Mat(a);  // convert from R to C++    // uword or int can be used   int n_rows = A.n_rows;  // number of rows   int n_cols = A.n_cols;  // number of columns   int n_elem = A.n_elem;  // number of elements    writable::integers res({n_rows, n_cols, n_elem});   res.attr(\"names\") = strings({\"n_rows\", \"n_cols\", \"n_elem\"});    return res; }"},{"path":"/articles/data-types.html","id":"elementobject-access","dir":"Articles","previous_headings":"Member Functions & Variables","what":"Element/object access","title":"Armadillo data types","text":"Provide access individual elements objects stored container object (e.g., Mat, Col, Row, Cube, field) () vec rowvec, access element stored index . Mat, Cube field, access element/object stored index assumption flat layout, column-major ordering data (e.g., column column). exception thrown requested element bounds. .() [] (), without bounds check; recommended. (r,c) Mat 2D field classes, access element/object stored row r column c. exception thrown requested element bounds. .(r,c) (r,c), without bounds check; recommended. (r,c,s) Cube 3D field classes, access element/object stored row r, column c, slice s. exception thrown requested element bounds. .(r,c,s) (r,c,s), without bounds check; recommended.","code":""},{"path":"/articles/data-types.html","id":"caveats","dir":"Articles","previous_headings":"Member Functions & Variables > Element/object access","what":"Caveats","title":"Armadillo data types","text":".() [], .(r,c), .(r,c,s): Indexing C++ starts 0 Accessing elements without bounds checks slightly faster, recommended code thoroughly debugged first Accessing elements via [r,c] [r,c,s] work correctly C++; instead use (r,c) (r,c,s) indices elements specified via uword type, typedef unsigned integer type. using loops access elements, best use uword instead int. example: (uword =0; <X.n_elem; ++) { X() = ... }","code":""},{"path":"/articles/data-types.html","id":"examples-5","dir":"Articles","previous_headings":"Member Functions & Variables > Element/object access","what":"Examples","title":"Armadillo data types","text":"","code":"a <- matrix(runif(4), nrow = 2, ncol = 2) [[cpp11::register]] doubles_matrix<> access_fun1_(const doubles_matrix<>& a) {   mat A = as_Mat(a);  // convert from R to C++   A(1,1) = 123.0;     // set element at row 2, column 2    vec B(2, fill::randu);    double x = A(0,1);  // copy element at row 1, column 2 to a double   double y = B(1);    // copy element at coordinate 2 to a double    uword i, j; // int also works   uword N = A.n_rows;   uword M = A.n_cols;    for(i = 0; i < N; ++i) {     for(j = 0; j < M; ++j) {       A(i,j) = A(i,j) + x + y;     }   }    return as_doubles_matrix(A);  // convert from C++ to R }"},{"path":"/articles/data-types.html","id":"element-initialisation","dir":"Articles","previous_headings":"Member Functions & Variables","what":"Element initialisation","title":"Armadillo data types","text":"Set elements Mat, Col, Row via braced initialiser lists","code":""},{"path":"/articles/data-types.html","id":"examples-6","dir":"Articles","previous_headings":"Member Functions & Variables > Element initialisation","what":"Examples","title":"Armadillo data types","text":"","code":"a <- matrix(runif(4), nrow = 2, ncol = 2) [[cpp11::register]] doubles_matrix<> initialization_fun1_(const doubles_matrix<>& a) {   mat A = as_Mat(a);  // convert from R to C++   mat B = {{1, 2}, {3, 4}}; // create new matrix   vec C = {1, 2}; // create new column vector    // sum C to the diagonal of A   A(0,0) = A(0,0) + C(0);   A(1,1) = A(1,1) + C(1);    mat D = A + B;      return as_doubles_matrix(D);  // convert from C++ to R }"},{"path":"/articles/data-types.html","id":"zeros","dir":"Articles","previous_headings":"Member Functions & Variables","what":"Zeros","title":"Armadillo data types","text":"Set elements object zero, optionally first changing size specified dimensions .zeros() (member function Mat, Col, Row, SpMat, Cube) .zeros(n_elem) (member function Col Row) .zeros(n_rows, n_cols) (member function Mat SpMat) .zeros(n_rows, n_cols, n_slices) (member function Cube) .zeros(size(X)) (member function Mat, Col, Row, Cube, SpMat)","code":""},{"path":"/articles/data-types.html","id":"examples-7","dir":"Articles","previous_headings":"Member Functions & Variables > Zeros","what":"Examples","title":"Armadillo data types","text":"","code":"a <- matrix(runif(4), nrow = 2, ncol = 2) [[cpp11::register]] doubles_matrix<> zeros_fun1_(const doubles_matrix<>& a) {   mat A = as_Mat(a);  // convert from R to C++   A.zeros();          // set all elements to zero    mat B;   B.zeros(size(A)); // set size to be the same as A and set all elements to zero    mat C(A.n_rows, A.n_cols, fill::zeros);    mat D = A + B + C;    return as_doubles_matrix(D);  // convert from C++ to R }"},{"path":"/articles/data-types.html","id":"ones","dir":"Articles","previous_headings":"Member Functions & Variables","what":"Ones","title":"Armadillo data types","text":"Set elements object one, optionally first changing size specified dimensions ones() (member function Mat, Col, Row, Cube) ones(n_elem) (member function Col Row) ones(n_rows, n_cols) (member function Mat) ones(n_rows, n_cols, n_slices) (member function Cube) ones(size(X)) (member function Mat, Col, Row, Cube)","code":""},{"path":"/articles/data-types.html","id":"examples-8","dir":"Articles","previous_headings":"Member Functions & Variables > Ones","what":"Examples","title":"Armadillo data types","text":"","code":"a <- matrix(runif(4), nrow = 2, ncol = 2) [[cpp11::register]] doubles_matrix<> ones_fun1_(const doubles_matrix<>& a) {   mat A = as_Mat(a);  // convert from R to C++   A.ones();          // set all elements to zero    mat B;   B.ones(size(A)); // set size to be the same as A and set all elements to zero    mat C(A.n_rows, A.n_cols, fill::ones);    mat D = A + B + C;    return as_doubles_matrix(D);  // convert from C++ to R }"},{"path":"/articles/data-types.html","id":"eye","dir":"Articles","previous_headings":"Member Functions & Variables","what":"Eye","title":"Armadillo data types","text":"eye() Member functions Mat SpMat eye(n_rows, n_cols) Set elements along main diagonal one -diagonal elements zero, optionally first changing size specified dimensions eye(size(X)) identity matrix generated n_rows = n_cols","code":""},{"path":"/articles/data-types.html","id":"examples-9","dir":"Articles","previous_headings":"Member Functions & Variables > Eye","what":"Examples","title":"Armadillo data types","text":"","code":"a <- matrix(runif(4), nrow = 2, ncol = 2) [[cpp11::register]] doubles_matrix<> eye_fun1_(const doubles_matrix<>& a) {   mat A = as_Mat(a);  // convert from R to C++   A.eye();            // create an identity matrix    mat B;   B.eye(size(A)); // another identity matrix    uword N = A.n_rows;   uword M = A.n_cols;   mat C(N, M, fill::randu);   C.eye(N, M); // yet another identity matrix    mat D = A + B + C;    return as_doubles_matrix(D);  // convert from C++ to R }"},{"path":"/articles/data-types.html","id":"random-uniform","dir":"Articles","previous_headings":"Member Functions & Variables","what":"Random uniform","title":"Armadillo data types","text":"Set elements random values uniform distribution [0,1] interval, optionally first changing size specified dimensions. complex elements, real imaginary parts treated separately. randu() (member function Mat, Col, Row, Cube) randu(n_elem) (member function Col Row) randu(n_rows, n_cols) (member function Mat) randu(n_rows, n_cols, n_slices) (member function Cube) randu(size(X)) (member function Mat, Col, Row, Cube)","code":"a <- matrix(runif(4), nrow = 2, ncol = 2) [[cpp11::register]] doubles_matrix<> randu_fun1_(const doubles_matrix<>& a) {   mat A = as_Mat(a);  // convert from R to C++    mat B;   B.randu(size(A)); // random uniform matrix with the same size as A    mat C(A.n_rows, A.n_cols, fill::randu);    mat D = A + B + C;    return as_doubles_matrix(D);  // convert from C++ to R }  [[cpp11::register]] doubles_matrix<> randu_fun2_(const int& n) {   GetRNGstate();  // Ensure R's RNG state is synchronized   mat y(n, n);   ::arma_rng::randu<double>::fill(y.memptr(), y.n_elem);   PutRNGstate();    return as_doubles_matrix(y); }"},{"path":"/articles/data-types.html","id":"normal-distribution","dir":"Articles","previous_headings":"Member Functions & Variables","what":"Normal distribution","title":"Armadillo data types","text":"Set elements random values normal distribution zero mean unit variance, optionally first changing size specified dimensions. complex elements, real imaginary parts treated separately. randn() (member function Mat, Col, Row, Cube) randn(n_elem) (member function Col Row) randn(n_rows, n_cols) (member function Mat) randn(n_rows, n_cols, n_slices) (member function Cube) randn(size(X)) (member function Mat, Col, Row, Cube)","code":""},{"path":"/articles/data-types.html","id":"examples-10","dir":"Articles","previous_headings":"Member Functions & Variables > Normal distribution","what":"Examples","title":"Armadillo data types","text":"","code":"a <- matrix(runif(4), nrow = 2, ncol = 2) [[cpp11::register]] doubles_matrix<> randn_fun1_(const doubles_matrix<>& a) {   mat A = as_Mat(a);  // convert from R to C++    mat B;   B.randn(size(A)); // random normal matrix with the same size as A    mat C(A.n_rows, A.n_cols, fill::randn);    mat D = A + B + C;    return as_doubles_matrix(D);  // convert from C++ to R }  [[cpp11::register]] doubles_matrix<> randn_fun2_(const int& n) {   GetRNGstate();  // Ensure R's RNG state is synchronized   mat y(n, n);   ::arma_rng::randn<double>::fill(y.memptr(), y.n_elem);   PutRNGstate();      return as_doubles_matrix(y); }"},{"path":"/articles/data-types.html","id":"fill","dir":"Articles","previous_headings":"Member Functions & Variables","what":"Fill","title":"Armadillo data types","text":"Sets elements specified value fill( value ) Member function Mat, Col, Row, Cube, field type value must match type elements used container object (e.g., Mat type double)","code":""},{"path":"/articles/data-types.html","id":"examples-11","dir":"Articles","previous_headings":"Member Functions & Variables > Fill","what":"Examples","title":"Armadillo data types","text":"","code":"a <- matrix(runif(4), nrow = 2, ncol = 2) [[cpp11::register]] doubles_matrix<> fill_fun1_(const doubles_matrix<>& a) {   mat A = as_Mat(a);  // convert from R to C++    uword N = A.n_rows;   uword M = A.n_cols;    mat B(size(A), fill::value(200.0));  // create a matrix filled with 200.0   mat C(N, M, fill::value(100.0));     // matrix filled with 100.0   mat D(N, M, fill::zeros);            // matrix filled with zeros   mat E(N, M, fill::ones);             // matrix filled with ones    mat F = A + B + C + D + E;    return as_doubles_matrix(F);  // convert from C++ to R }"},{"path":"/articles/data-types.html","id":"imbue","dir":"Articles","previous_headings":"Member Functions & Variables","what":"Imbue","title":"Armadillo data types","text":"Imbue (fill) values provided functor lambda function imbue(functor) Member functions Mat, Col, Row Cube imbue(lambda_function) Imbue (fill) values provided functor lambda function matrices, filling done column--column (e.g., column 0 filled, column 1, etc.) cubes, filling done slice--slice, slice treated matrix","code":""},{"path":"/articles/data-types.html","id":"examples-12","dir":"Articles","previous_headings":"Member Functions & Variables > Imbue","what":"Examples","title":"Armadillo data types","text":"","code":"a <- matrix(runif(4), nrow = 2, ncol = 2) [[cpp11::register]] doubles_matrix<> imbue_fun1_(const doubles_matrix<>& a) {   mat A = as_Mat(a);  // convert from R to C++    std::mt19937 engine;  // Mersenne twister random number engine   std::uniform_real_distribution<double> distr(0.0, 1.0);    mat B(size(A), fill::none);                // create an empty matrix   B.imbue([&]() { return distr(engine); });  // fill with random values    mat C = A + B;    return as_doubles_matrix(C);  // convert from C++ to R }  [[cpp11::register]] doubles_matrix<> imbue_fun2_(const doubles_matrix<>& a) {   GetRNGstate();  // Ensure R's RNG state is synchronized    mat A = as_Mat(a);  // Convert from R to C++    mat B(size(A), fill::none);  // Create an empty matrix   B.imbue([]() { return unif_rand(); });  // Fill with random values    mat C = A + B;    PutRNGstate();    return as_doubles_matrix(C);  // Convert from C++ to R }"},{"path":"/articles/data-types.html","id":"clean","dir":"Articles","previous_headings":"Member Functions & Variables","what":"Clean","title":"Armadillo data types","text":"clean(threshold) Member function Mat, Col, Row, Cube SpMat objects non-complex elements: element absolute value less equal threshold replaced zero. objects complex elements: element, component (real imaginary) absolute value less equal threshold replaced zero. Can used sparsify matrix, sense zeroing values small magnitudes.","code":""},{"path":"/articles/data-types.html","id":"caveat","dir":"Articles","previous_headings":"Member Functions & Variables > Clean","what":"Caveat","title":"Armadillo data types","text":"explicitly convert dense storage sparse storage, use SpMat.","code":""},{"path":"/articles/data-types.html","id":"examples-13","dir":"Articles","previous_headings":"Member Functions & Variables > Clean","what":"Examples","title":"Armadillo data types","text":"","code":"[[cpp11::register]] doubles_matrix<> clean_fun1_(const int& n) {   mat A(n, n, fill::randu); // create a random matrix    A(0, 0) = datum::eps; // set the diagonal with small values (+/- epsilon)   A(1, 1) = -datum::eps;    A.clean(datum::eps); // set elements with small values to zero    return as_doubles_matrix(A); // Convert from C++ to R }"},{"path":"/articles/data-types.html","id":"fill-1","dir":"Articles","previous_headings":"Member Functions & Variables","what":"Fill","title":"Armadillo data types","text":"replace( old_value, new_value ) Member function Mat, Col, Row, Cube SpMat elements equal old_value, set new_value. type old_value new_value must match type elements used container object (e.g., Mat type double).","code":""},{"path":"/articles/data-types.html","id":"caveats-1","dir":"Articles","previous_headings":"Member Functions & Variables > Fill","what":"Caveats","title":"Armadillo data types","text":"Floating point numbers (float double) approximations due limited precision. sparse matrices (SpMat), replacement done old_value = 0.","code":""},{"path":"/articles/data-types.html","id":"examples-14","dir":"Articles","previous_headings":"Member Functions & Variables > Fill","what":"Examples","title":"Armadillo data types","text":"","code":"[[cpp11::register]] doubles_matrix<> replace_fun1_(const int& n) {   mat A(n, n, fill::randu); // create a random matrix    A.diag().fill(datum::nan); // set the diagonal with NaN values   A.replace(datum::nan, 0);  // replace each NaN with 0    return as_doubles_matrix(A); // Convert from C++ to R }"},{"path":"/articles/data-types.html","id":"clamp","dir":"Articles","previous_headings":"Member Functions & Variables","what":"Clamp","title":"Armadillo data types","text":"Clamp element [min_val, max_val] interval; value lower min_val set min_val, value higher max_val set max_val. clamp(min_value, max_value) Member function Mat, Col, Row, Cube SpMat. complex elements, real imaginary components clamped separately. sparse matrices, clamping applied non-zero elements.","code":""},{"path":"/articles/data-types.html","id":"examples-15","dir":"Articles","previous_headings":"Member Functions & Variables > Clamp","what":"Examples","title":"Armadillo data types","text":"","code":"[[cpp11::register]] doubles_matrix<> clamp_fun1_(const int& n) {   mat A(n, n, fill::randu); // create a random matrix   A.diag().fill(0.1);       // set the diagonal with 0.1 values    A.clamp(0.2, 0.8); // clamp values to the [0.2, 0.8] interval    return as_doubles_matrix(A); // Convert from C++ to R }"},{"path":"/articles/data-types.html","id":"transform","dir":"Articles","previous_headings":"Member Functions & Variables","what":"Transform","title":"Armadillo data types","text":"transform(functor) Member functions Mat, Col, Row, Cube SpMat. transform(lambda_function) Transform element using functor lambda function. dense matrices, transformation done column--column elements. sparse matrices, transformation done column--column non-zero elements. cubes, transformation done slice--slice, slice treated matrix.","code":""},{"path":"/articles/data-types.html","id":"examples-16","dir":"Articles","previous_headings":"Member Functions & Variables > Transform","what":"Examples","title":"Armadillo data types","text":"","code":"[[cpp11::register]] doubles_matrix<> transform_fun1_(const int& n) {   mat A(n, n, fill::ones);  // create a matrix filled with ones   A.transform([](double val) { return (val + 122.0); });   return as_doubles_matrix(A); // Convert from C++ to R }"},{"path":"/articles/data-types.html","id":"for-each","dir":"Articles","previous_headings":"Member Functions & Variables","what":"For each","title":"Armadillo data types","text":"dense matrices fields, processing done column--column elements. sparse matrices, processing done column--column non-zero elements. cubes, processing done slice--slice, slice treated matrix. for_each(** functor **) Member functions Mat, Col, Row, Cube, SpMat field for_each(** lambda_function **) element, pass reference functor lambda function","code":""},{"path":"/articles/data-types.html","id":"examples-17","dir":"Articles","previous_headings":"Member Functions & Variables > For each","what":"Examples","title":"Armadillo data types","text":"","code":"[[cpp11::register]] doubles_matrix<> for_each_fun1_(const int& n) {   // add 122 to each element in a dense matrix, the '&' is important   mat D(n, n, fill::ones);   D.for_each([](mat::elem_type& val) { val += 122.0; });    // add 122 to each non-zero element in a sparse matrix   sp_mat S;   S.sprandu(n, n, 1.0);   S.for_each([](sp_mat::elem_type& val) { val += 123.0; });    // set the size of all matrices in a field   field<mat> F(2, 2);   F.for_each([n](mat& X) { X.zeros(n, n); });  // capture n for the lambda    mat res = D + S + F(0) + F(1);    return as_doubles_matrix(res);  // Convert from C++ to R }"},{"path":"/articles/data-types.html","id":"set-size","dir":"Articles","previous_headings":"Member Functions & Variables","what":"Set size","title":"Armadillo data types","text":"Change size object, without explicitly preserving data without initialising elements (e.g., elements may contain garbage values, including NaN) set_size(n_elem) (member function Col, Row, field) set_size(n_rows, n_cols) (member function Mat, SpMat, field) set_size(n_rows, n_cols, n_slices) (member function Cube field) set_size(size(X)) (member function Mat, Col, Row, Cube, SpMat, field) initialise elements zero changing size, use .zeros() instead. explicitly preserve data changing size, use .reshape() .resize() instead.","code":""},{"path":"/articles/data-types.html","id":"examples-18","dir":"Articles","previous_headings":"Member Functions & Variables > Set size","what":"Examples","title":"Armadillo data types","text":"","code":"[[cpp11::register]] doubles set_size_fun1_(const int& n) {   mat A;   A.set_size(n, n);  // or:  mat A(n, n, fill::none);    mat B;   B.set_size(size(A));  // or:  mat B(size(A), fill::none);    vec C;   C.set_size(n);  // or:  vec v(n, fill::none);    A.fill(1.0);  // set all elements to 1.0   B.fill(2.0);  // set all elements to 2.0   C.fill(3.0);  // set all elements to 3.0    vec res = A.col(0) + B.col(1) + C;    return as_doubles(res);  // Convert from C++ to R }"},{"path":"/articles/data-types.html","id":"reshape","dir":"Articles","previous_headings":"Member Functions & Variables","what":"Reshape","title":"Armadillo data types","text":"Recreate object according given size specifications, elements taken previous version object column-wise manner; elements generated object placed column-wise (e.g., first column filled filling second column) reshape(n_rows, n_cols) (member function Mat SpMat) reshape(n_rows, n_cols, n_slices) (member function Cube) reshape(size(X)) (member function Mat, Cube, SpMat) layout elements recreated object different layout previous version object total number elements previous version object less specified size, extra elements recreated object set zero total number elements previous version object greater specified size, subset elements taken","code":""},{"path":"/articles/data-types.html","id":"caveats-2","dir":"Articles","previous_headings":"Member Functions & Variables > Reshape","what":"Caveats","title":"Armadillo data types","text":".reshape() considerably slower .set_size(). change size without preserving data, use .set_size(). grow/shrink object preserving elements layout elements, use .resize() flatten matrix vector, use vectorise() .as_col()/.as_row().","code":""},{"path":"/articles/data-types.html","id":"examples-19","dir":"Articles","previous_headings":"Member Functions & Variables > Reshape","what":"Examples","title":"Armadillo data types","text":"","code":"[[cpp11::register]] doubles_matrix<> reshape_fun1_(const int& n) {   mat A(n + 1, n - 1, fill::randu);   A.reshape(n - 1, n + 1);   return as_doubles_matrix(A);  // Convert from C++ to R }"},{"path":"/articles/data-types.html","id":"resize","dir":"Articles","previous_headings":"Member Functions & Variables","what":"Resize","title":"Armadillo data types","text":"Recreate object according given size specifications, preserving elements well layout elements resize(n_elem) (member function Col, Row) resize(n_rows, n_cols) (member function Mat SpMat) resize(n_rows, n_cols, n_slices) (member function Cube) resize(size(X)) (member function Mat, Col, Row, Cube, SpMat) Can used growing shrinking object (e.g., adding/removing rows, /columns, /slices)","code":""},{"path":"/articles/data-types.html","id":"caveats-3","dir":"Articles","previous_headings":"Member Functions & Variables > Resize","what":"Caveats","title":"Armadillo data types","text":".resize() considerably slower .set_size(). change size without preserving data, .set_size() instead","code":""},{"path":"/articles/data-types.html","id":"examples-20","dir":"Articles","previous_headings":"Member Functions & Variables > Resize","what":"Examples","title":"Armadillo data types","text":"","code":"[[cpp11::register]] doubles_matrix<> resize_fun1_(const int& n) {   mat A(n + 1, n - 1, fill::randu);   A.resize(n - 1, n + 1);   return as_doubles_matrix(A);  // Convert from C++ to R }"},{"path":"/articles/data-types.html","id":"copy-size","dir":"Articles","previous_headings":"Member Functions & Variables","what":"Copy size","title":"Armadillo data types","text":"copy_size() Set size object Object must root type object modified (e.g., size matrix can’t set providing cube)","code":""},{"path":"/articles/data-types.html","id":"examples-21","dir":"Articles","previous_headings":"Member Functions & Variables > Copy size","what":"Examples","title":"Armadillo data types","text":"","code":"[[cpp11::register]] integers copy_size_fun1_(const int& n) {   mat A(n, n, fill::randu);    mat B;   B.copy_size(A);    int N = B.n_rows;   int M = B.n_cols;      writable::integers res({N, M});   res.attr(\"names\") = strings({\"n_rows\", \"n_cols\"});    return as_integers(res);  // Convert from C++ to R }"},{"path":"/articles/data-types.html","id":"reset","dir":"Articles","previous_headings":"Member Functions & Variables","what":"Reset","title":"Armadillo data types","text":"reset() Reset size zero (object elements)","code":""},{"path":"/articles/data-types.html","id":"examples-22","dir":"Articles","previous_headings":"Member Functions & Variables > Reset","what":"Examples","title":"Armadillo data types","text":"","code":"[[cpp11::register]] integers reset_fun1_(const int& n) {   mat A(n, n, fill::randu);   A.reset();    int N = A.n_rows;   int M = A.n_cols;      writable::integers res({N, M});   res.attr(\"names\") = strings({\"n_rows\", \"n_cols\"});    return as_integers(res);  // Convert from C++ to R }"},{"path":"/articles/usage.html","id":"ordinary-least-squares","dir":"Articles","previous_headings":"","what":"Ordinary Least Squares","title":"Basic 'cpp11armadillo' usage","text":"Ordinary Least Squares (OLS) estimator β̂=(XtX)−1(XtY)\\hat{\\beta} = (X^tX)^{-1}(X^tY) design matrix XX outcome vector YY(Hansen 2022). following code shows compute OLS estimator using Armadillo sending data R C++ viceversa using cpp11 cpp11armadillo (Sanderson Curtin 2016): previous code includes cpp11 cpp11armadillo libraries (cpp11armadillo calls Armadillo) allow interfacing C++ R. also loads corresponding namespaces order simplify notation (.e., using Mat instead arma::Mat), function as_Mat() as_doubles_mat() provided cpp11armadillo pass matrix object R C++ Armadillo can read pass back R. use const & specific C++ language allow pass data R C++ without copying data, therefore saving time memory. cpp11armadillo provides flexibility case resulting vector OLS coefficients, can returned matrix vector. following code shows create three functions compute OLS estimator return result matrix vector avoiding repeated code: previous code, ols_mat_() function receives inputs R calls ols_() computation C++ side, ols_dbl_() returns vector instead matrix.","code":"#include <cpp11.hpp> #include <cpp11armadillo.hpp>  using namespace arma; using namespace cpp11;  [[cpp11::register]] doubles_matrix<> ols_mat_(const doubles_matrix<>& x) {   Mat<double> Y = as_Mat(x); // convert from R to C++   Mat<double> Yinv = inv(Y); // Y^(-1)   return as_doubles_matrix(Yinv); // convert from C++ to R } Mat<double> ols_(const doubles_matrix<>& y, const doubles_matrix<>& x) {   Mat<double> Y = as_Mat(y);  // Col<double> Y = as_Col(y); also works   Mat<double> X = as_Mat(x);    Mat<double> XtX = X.t() * X;             // X'X   Mat<double> XtX_inv = inv(XtX);          // (X'X)^(-1)   Mat<double> beta = XtX_inv * X.t() * Y;  // (X'X)^(-1)(X'Y)    return beta; }  [[cpp11::register]] doubles_matrix<> ols_mat_(const doubles_matrix<>& y,                                               const doubles_matrix<>& x) {   Mat<double> beta = ols_(y, x);   return as_doubles_matrix(beta); }  [[cpp11::register]] doubles ols_dbl_(const doubles_matrix<>& y,                                      const doubles_matrix<>& x) {   Mat<double> beta = ols_(y, x);   return as_doubles(beta); }"},{"path":"/articles/usage.html","id":"additional-examples","dir":"Articles","previous_headings":"","what":"Additional Examples","title":"Basic 'cpp11armadillo' usage","text":"package repository includes directory cpp11armadillotest, contains R package uses Armadillo, provides additional examples eigenvalues, Cholesky QR decomposition, linear models.","code":""},{"path":"/articles/usage.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Basic 'cpp11armadillo' usage","text":"Hansen, Bruce. 2022. Econometrics. Princeton University Press. Sanderson, Conrad, Ryan Curtin. 2016. “Armadillo: Template-Based C++ Library Linear Algebra.” Journal Open Source Software 1 (2): 26. https://doi.org/10.21105/joss.00026.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mauricio Vargas Sepulveda. Author, maintainer. Jonathan Schneider Malamud. Contributor. Conrad Sanderson. Author.           Armadillo library (C++)","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Vargas Sepulveda M, Sanderson C (2024). cpp11armadillo: 'Armadillo' Interface. R package version 0.4.1, https://github.com/pachadotdev/cpp11armadillo, https://pacha.dev/cpp11armadillo/.","code":"@Manual{,   title = {cpp11armadillo: An 'Armadillo' Interface},   author = {Mauricio {Vargas Sepulveda} and Conrad Sanderson},   year = {2024},   note = {R package version 0.4.1,     https://github.com/pachadotdev/cpp11armadillo},   url = {https://pacha.dev/cpp11armadillo/}, }"},{"path":[]},{"path":"/index.html","id":"about","dir":"","previous_headings":"","what":"About","title":"An Armadillo Interface","text":"goal cpp11armadillo provide novel approach use Armadillo C++ library using header-cpp11 R package simplify things end-user. ⚠️Important⚠️: cpp11armadillo created ease writing functions packages offer --fly compilation code snippets. idea pass matrices/vectors R C++, write pure C++/Armadillo code computation, export result back R proper data structures. RcppArmadillo popular R package used 1200 CRAN packages 2024-12-13. RcppArmadillo uses GPL-3 license. cpp11armadillo different internals, even goal , aims : Enforcing copy--write semantics. Improving safety using R API C++ code. Using UTF-8 strings everywhere. Applying newer C++11 features. straightforward, simpler implementation. Faster compilation time lower memory requirements. Growing vectors efficiently. design differences result marginally higher speed cpp11armadillo, real difference end user cpp11armadillo: smaller memory footprint. Uses Apache license (.e., Apache license permissive allows commercial use attribution, unlike GPL-3, requires open-source redistribution.) Can vendored used restricted environments (.e., servers internet access restricts installation packages). expanded current preprint. software useful , please consider donating Buy Coffee. donations used continue improving cpp11armadillo.","code":""},{"path":"/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting Started","title":"An Armadillo Interface","text":"Install released version cpp11armadillo CRAN: , alternatively, install development version cpp11armadillo GitHub:","code":"install.packages(\"cpp11armadillo\") remotes::install_github(\"pachadotdev/cpp11armadillo\")"},{"path":"/index.html","id":"who-uses-cpp11armadillo","dir":"","previous_headings":"","what":"Who uses cpp11armadillo?","title":"An Armadillo Interface","text":"cpp11armadillo used following packages: lotri, created Dr. Matt Fidler. economiccomplexity, created .","code":""},{"path":"/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"An Armadillo Interface","text":"provided package template RStudio also works VS Code. idea package simple possible, least amount setup get started. RStudio/VSCode, go empty directory choice run: follow instructions README. template contains simple Ordinary Least Squares (OLS) example can run test package. cpp11armadillotest directory contains package use test cpp11armadillo. includes tests OLS, eigenvalues, matrix decompositions (Cholesky QR), Capital Asset Pricing Model (CAPM), data consistency R C++. vignette expands OLS estimator, hansen package expands use cpp11armadillo Econometric models.","code":"cpp11armadillo::pkg_template(\".\", \"packagename\")"},{"path":"/index.html","id":"linear-algebra-libraries","dir":"","previous_headings":"","what":"Linear Algebra Libraries","title":"An Armadillo Interface","text":"Armadillo supports OpenBLAS, Intel MKL, Accelerate framework (Mac). Install OpenBLAS Debian-based systems : Restart R run following command verify: R display something like:","code":"sudo apt-get install libopenblas-dev sessionInfo() Matrix products: default BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so; LAPACK version 3.10.0"},{"path":"/reference/armadillo_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Armadillo version — armadillo_version","title":"Get Armadillo version — armadillo_version","text":"Provides Armadillo C++ library version name number included package.","code":""},{"path":"/reference/armadillo_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Armadillo version — armadillo_version","text":"","code":"armadillo_version()"},{"path":"/reference/armadillo_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Armadillo version — armadillo_version","text":"string Armadillo version name number","code":""},{"path":"/reference/armadillo_version.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Armadillo version — armadillo_version","text":"","code":"armadillo_version() #> [1] \"Stochastic Parrot 14.2.2\""},{"path":"/reference/check_cpp11.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that cpp11 can be used — check_cpp11","title":"Check that cpp11 can be used — check_cpp11","text":"Check cpp11 can used","code":""},{"path":"/reference/check_cpp11.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that cpp11 can be used — check_cpp11","text":"","code":"check_cpp11()"},{"path":"/reference/check_cpp11.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that cpp11 can be used — check_cpp11","text":"integer value","code":""},{"path":"/reference/cpp11armadillo-package.html","id":null,"dir":"Reference","previous_headings":"","what":"cpp11armadillo: An 'Armadillo' Interface — cpp11armadillo-package","title":"cpp11armadillo: An 'Armadillo' Interface — cpp11armadillo-package","text":"Provides function declarations inline function definitions facilitate communication R 'Armadillo' 'C++' library linear algebra scientific computing. implementation detailed Vargas Sepulveda Schneider Malamud (2024) doi:10.48550/arXiv.2408.11074 .","code":""},{"path":[]},{"path":"/reference/cpp11armadillo-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"cpp11armadillo: An 'Armadillo' Interface — cpp11armadillo-package","text":"Maintainer: Mauricio Vargas Sepulveda m.sepulveda@mail.utoronto.ca (ORCID) Authors: Conrad Sanderson (Armadillo library (C++)) contributors: Jonathan Schneider Malamud [contributor]","code":""},{"path":"/reference/cpp_vendor.html","id":null,"dir":"Reference","previous_headings":"","what":"Vendor the cpp11 and cpp11armadillo dependency — cpp_vendor","title":"Vendor the cpp11 and cpp11armadillo dependency — cpp_vendor","text":"Vendoring act making copy 3rd party packages project using. often used go language community.","code":""},{"path":"/reference/cpp_vendor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vendor the cpp11 and cpp11armadillo dependency — cpp_vendor","text":"","code":"cpp_vendor(dir = NULL, subdir = \"/inst/include\")"},{"path":"/reference/cpp_vendor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vendor the cpp11 and cpp11armadillo dependency — cpp_vendor","text":"dir directory vendor code . subdir subdirectory vendor code .","code":""},{"path":"/reference/cpp_vendor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vendor the cpp11 and cpp11armadillo dependency — cpp_vendor","text":"file path vendored code (invisibly).","code":""},{"path":"/reference/cpp_vendor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Vendor the cpp11 and cpp11armadillo dependency — cpp_vendor","text":"function vendors cpp11 cpp11armadillo package copying cpp11 cpp11armadillo headers `inst/include` folder adding 'cpp11 version: XYZ' 'cpp11armadillo version: XYZ' top files, XYZ version cpp11 cpp11armadillo currently installed machine. Vendoring places responsibility updating code . Bugfixes new features cpp11 cpp11armadillo available code run `cpp_vendor()` .","code":""},{"path":"/reference/cpp_vendor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vendor the cpp11 and cpp11armadillo dependency — cpp_vendor","text":"","code":"# create a new directory dir <- tempdir() dir.create(dir) #> Warning: '/tmp/Rtmpo26j7U' already exists  # vendor the cpp11 headers into the directory cpp_vendor(dir) #> Makevars and/or Makevars.win should have a line such as 'PKG_CPPFLAGS = -I../inst/include' #> DESCRIPTION should not have lines such as 'LinkingTo: cpp11'"},{"path":"/reference/pkg_template.html","id":null,"dir":"Reference","previous_headings":"","what":"Start a new project with the cpp11armadillo package template — pkg_template","title":"Start a new project with the cpp11armadillo package template — pkg_template","text":"Start new project cpp11armadillo package template","code":""},{"path":"/reference/pkg_template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Start a new project with the cpp11armadillo package template — pkg_template","text":"","code":"pkg_template(path = NULL, pkgname = NULL)"},{"path":"/reference/pkg_template.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Start a new project with the cpp11armadillo package template — pkg_template","text":"path Path new project pkgname Name new package","code":""},{"path":"/reference/pkg_template.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Start a new project with the cpp11armadillo package template — pkg_template","text":"file path copied template (invisibly).","code":""},{"path":"/reference/pkg_template.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Start a new project with the cpp11armadillo package template — pkg_template","text":"","code":"# create a new directory dir <- tempdir() dir.create(dir) #> Warning: '/tmp/Rtmpo26j7U' already exists  # copy the package template into the directory pkg_template(dir, \"mynewpkg\")"},{"path":"/news/index.html","id":"cpp11armadillo-041","dir":"Changelog","previous_headings":"","what":"cpp11armadillo 0.4.1","title":"cpp11armadillo 0.4.1","text":"Modified configure file fix Fedora errors. Includes parts official Armadillo documentation vignettes adapted working R. Thanks lot @barracuda156 @bastistician reporting issue.","code":""},{"path":"/news/index.html","id":"cpp11armadillo-040","dir":"Changelog","previous_headings":"","what":"cpp11armadillo 0.4.0","title":"cpp11armadillo 0.4.0","text":"CRAN release: 2024-12-13 Uses Armadillo 14.2.2 C++15 compatibility. Adds configure file check compatibility C++ compiler Armadillo.","code":""},{"path":"/news/index.html","id":"cpp11armadillo-035","dir":"Changelog","previous_headings":"","what":"cpp11armadillo 0.3.5","title":"cpp11armadillo 0.3.5","text":"example package now includes configure file set number cores compiling package. package template includes instructions alter default number cores (50% available cores).","code":""},{"path":"/news/index.html","id":"cpp11armadillo-034","dir":"Changelog","previous_headings":"","what":"cpp11armadillo 0.3.4","title":"cpp11armadillo 0.3.4","text":"Uses std::copy std::memcpy convert R C++.","code":""},{"path":"/news/index.html","id":"cpp11armadillo-033","dir":"Changelog","previous_headings":"","what":"cpp11armadillo 0.3.3","title":"cpp11armadillo 0.3.3","text":"CRAN release: 2024-09-02 Rewritten vignettes.","code":""},{"path":"/news/index.html","id":"cpp11armadillo-032","dir":"Changelog","previous_headings":"","what":"cpp11armadillo 0.3.2","title":"cpp11armadillo 0.3.2","text":"Includes armadillo.hpp headers. Improved package template.","code":""},{"path":"/news/index.html","id":"cpp11armadillo-031","dir":"Changelog","previous_headings":"","what":"cpp11armadillo 0.3.1","title":"cpp11armadillo 0.3.1","text":"CRAN release: 2024-08-25 Adds Jonathan contributor. Includes working paper arXiv. Avoids duplicating mtcars_mat tests.","code":""},{"path":"/news/index.html","id":"cpp11armadillo-030","dir":"Changelog","previous_headings":"","what":"cpp11armadillo 0.3.0","title":"cpp11armadillo 0.3.0","text":"Uses Armadillo version “Stochastic Parrot 14.0.2”.","code":""},{"path":"/news/index.html","id":"cpp11armadillo-029","dir":"Changelog","previous_headings":"","what":"cpp11armadillo 0.2.9","title":"cpp11armadillo 0.2.9","text":"Uses Armadillo version Cortisol Retox 12.6.7. Removes leontief dependency test functions. Adds minimal documentation use OpenBLAS R Armadillo. New examples, clearer informative. New Makevars template commented debbuging flags allows set number cores. Adds armadillo_version() get version Armadillo R.","code":""},{"path":"/news/index.html","id":"cpp11armadillo-028","dir":"Changelog","previous_headings":"","what":"cpp11armadillo 0.2.8","title":"cpp11armadillo 0.2.8","text":"CRAN release: 2024-07-04 Provides templates convert sparse matrices. Removes using namespace std; headers (see https://www.reddit.com/r/cpp_questions/comments/160eivk/is_using_namespace_std_really_considered_bad/)","code":""},{"path":"/news/index.html","id":"cpp11armadillo-027","dir":"Changelog","previous_headings":"","what":"cpp11armadillo 0.2.7","title":"cpp11armadillo 0.2.7","text":"Provides wrappers arma::uvec used subset vectors. Minimal optimizations R /C++ templates.","code":""},{"path":"/news/index.html","id":"cpp11armadillo-026","dir":"Changelog","previous_headings":"","what":"cpp11armadillo 0.2.6","title":"cpp11armadillo 0.2.6","text":"Fewer implicit conversions. Using balanced parallelization OpenMP.","code":""},{"path":"/news/index.html","id":"cpp11armadillo-025","dir":"Changelog","previous_headings":"","what":"cpp11armadillo 0.2.5","title":"cpp11armadillo 0.2.5","text":"CRAN release: 2024-05-14 Uses messages generate warnings R API (#379d8d6). Skips OpenMP Mac hardware (#13e805b). Provides template convert vectors column matrices (#6138a35), First version CRAN.","code":""},{"path":"/news/index.html","id":"cpp11armadillo-020","dir":"Changelog","previous_headings":"","what":"cpp11armadillo 0.2.0","title":"cpp11armadillo 0.2.0","text":"Uses OpenMP. Sticks Clang format.","code":""},{"path":"/news/index.html","id":"cpp11armadillo-012","dir":"Changelog","previous_headings":"","what":"cpp11armadillo 0.1.2","title":"cpp11armadillo 0.1.2","text":"Improves vendoring (.e., cpp11)","code":""},{"path":"/news/index.html","id":"cpp11armadillo-011","dir":"Changelog","previous_headings":"","what":"cpp11armadillo 0.1.1","title":"cpp11armadillo 0.1.1","text":"Includes formal tests cpp11armadillotest directory. Provides conversion complex vector/matrix list double vectors/matrices.","code":""},{"path":"/news/index.html","id":"cpp11armadillo-01","dir":"Changelog","previous_headings":"","what":"cpp11armadillo 0.1","title":"cpp11armadillo 0.1","text":"First public version. Elemental vector/matrix conversion /R C++.","code":""}]
