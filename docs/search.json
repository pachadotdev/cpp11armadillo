[{"path":[]},{"path":"https://pacha.dev/cpp11armadillo/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://pacha.dev/cpp11armadillo/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://pacha.dev/cpp11armadillo/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://pacha.dev/cpp11armadillo/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within communications GitHub email, also applies individual expressing public spaces (e.g. social media).","code":""},{"path":"https://pacha.dev/cpp11armadillo/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior reported forwarded legal authorities necessary.","code":""},{"path":"https://pacha.dev/cpp11armadillo/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Questions contributions project require respect Code Conduct:","code":""},{"path":"https://pacha.dev/cpp11armadillo/CODE_OF_CONDUCT.html","id":"1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://pacha.dev/cpp11armadillo/CODE_OF_CONDUCT.html","id":"2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://pacha.dev/cpp11armadillo/CODE_OF_CONDUCT.html","id":"3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://pacha.dev/cpp11armadillo/CODE_OF_CONDUCT.html","id":"4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within project.","code":""},{"path":"https://pacha.dev/cpp11armadillo/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/ code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://pacha.dev/cpp11armadillo/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to cpp11eigen","title":"Contributing to cpp11eigen","text":"outlines propose change cpp11eigen. detailed info contributing , please see development contributing guide.","code":""},{"path":"https://pacha.dev/cpp11armadillo/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to cpp11eigen","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://pacha.dev/cpp11armadillo/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to cpp11eigen","text":"want make bigger change, ’s good idea first file issue make sure maintainer agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://pacha.dev/cpp11armadillo/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to cpp11eigen","text":"Fork repository clone onto computer. haven’t done , use usethis::create_from_github(\"pachadotdev/cpp11eigen\", fork = TRUE). Install development dependences devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). Even better, use make check command line run checks clean environment. R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. extra sure run make clean && make install && make test discard don’t outdated binaries. Create Git branch pull request (PR). Use usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. Add description changes top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://pacha.dev/cpp11armadillo/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to cpp11eigen","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. edit C++ code, please run make format apply clang format style CI fail. Use roxygen2, Markdown syntax, documentation. Use testthat unit tests. Contributions test cases included easier understand accept.","code":""},{"path":"https://pacha.dev/cpp11armadillo/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to cpp11eigen","text":"Please note cpp11eigen project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://pacha.dev/cpp11armadillo/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://pacha.dev/cpp11armadillo/LICENSE.html","id":"1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://pacha.dev/cpp11armadillo/LICENSE.html","id":"2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://pacha.dev/cpp11armadillo/LICENSE.html","id":"3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://pacha.dev/cpp11armadillo/LICENSE.html","id":"4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://pacha.dev/cpp11armadillo/LICENSE.html","id":"5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://pacha.dev/cpp11armadillo/LICENSE.html","id":"6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://pacha.dev/cpp11armadillo/LICENSE.html","id":"7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://pacha.dev/cpp11armadillo/LICENSE.html","id":"8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://pacha.dev/cpp11armadillo/LICENSE.html","id":"9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://pacha.dev/cpp11armadillo/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://pacha.dev/cpp11armadillo/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with cpp11armadillo","title":"Getting help with cpp11armadillo","text":"Thanks using cpp11armadillo! filing issue, places explore pieces put together make process smooth possible.","code":""},{"path":"https://pacha.dev/cpp11armadillo/SUPPORT.html","id":"make-a-reprex","dir":"","previous_headings":"","what":"Make a reprex","title":"Getting help with cpp11armadillo","text":"Start making minimal reproducible example using reprex package. reprex make R-question-asking endeavors easier (pretty insane ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site.","code":""},{"path":"https://pacha.dev/cpp11armadillo/SUPPORT.html","id":"where-to-ask","dir":"","previous_headings":"","what":"Where to ask?","title":"Getting help with cpp11armadillo","text":"Armed reprex, next step figure ask. ’s question: start community.rstudio.com, /StackOverflow. people answer questions. ’s bug: ’re right place, file issue. ’re sure: let community help figure ! problem bug feature request, can easily return report . opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed.","code":""},{"path":"https://pacha.dev/cpp11armadillo/SUPPORT.html","id":"what-happens-next","dir":"","previous_headings":"","what":"What happens next?","title":"Getting help with cpp11armadillo","text":"can’t reproduce bug, can’t fix !","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/basic-usage.html","id":"ordinary-least-squares","dir":"Articles","previous_headings":"","what":"Ordinary Least Squares","title":"Basic 'cpp11armadillo' usage","text":"Ordinary Least Squares (OLS) estimator β̂=(XtX)−1(XtY)\\hat{\\beta} = (X^tX)^{-1}(X^tY) design matrix XX outcome vector YY(Hansen 2022). following code shows compute OLS estimator using Armadillo sending data R C++ viceversa using cpp11 cpp11armadillo (Sanderson Curtin 2016): previous code includes cpp11 cpp11armadillo libraries (cpp11armadillo calls Armadillo) allow interfacing C++ R. also loads corresponding namespaces order simplify notation (.e., using Mat instead arma::Mat), function as_Mat() as_doubles_mat() provided cpp11armadillo pass matrix object R C++ Armadillo can read pass back R. use const & specific C++ language allow pass data R C++ without copying data, therefore saving time memory. cpp11armadillo provides flexibility case resulting vector OLS coefficients, can returned matrix vector. following code shows create three functions compute OLS estimator return result matrix vector avoiding repeated code: previous code, ols_mat_() function receives inputs R calls ols_() computation C++ side, ols_dbl_() returns vector instead matrix.","code":"#include <cpp11.hpp> #include <cpp11armadillo.hpp>  using namespace arma; using namespace cpp11;  [[cpp11::register]] doubles_matrix<> ols_mat_(const doubles_matrix<>& x) {   Mat<double> Y = as_Mat(x); // convert from R to C++   Mat<double> Yinv = inv(Y); // Y^(-1)   return as_doubles_matrix(Yinv); // convert from C++ to R } Mat<double> ols_(const doubles_matrix<>& y, const doubles_matrix<>& x) {   Mat<double> Y = as_Mat(y);  // Col<double> Y = as_Col(y); also works   Mat<double> X = as_Mat(x);    Mat<double> XtX = X.t() * X;             // X'X   Mat<double> XtX_inv = inv(XtX);          // (X'X)^(-1)   Mat<double> beta = XtX_inv * X.t() * Y;  // (X'X)^(-1)(X'Y)    return beta; }  [[cpp11::register]] doubles_matrix<> ols_mat_(const doubles_matrix<>& y,                                               const doubles_matrix<>& x) {   Mat<double> beta = ols_(y, x);   return as_doubles_matrix(beta); }  [[cpp11::register]] doubles ols_dbl_(const doubles_matrix<>& y,                                      const doubles_matrix<>& x) {   Mat<double> beta = ols_(y, x);   return as_doubles(beta); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/basic-usage.html","id":"additional-examples","dir":"Articles","previous_headings":"","what":"Additional Examples","title":"Basic 'cpp11armadillo' usage","text":"package repository includes directory cpp11armadillotest, contains R package uses Armadillo, provides additional examples eigenvalues, Cholesky QR decomposition, linear models.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/basic-usage.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Basic 'cpp11armadillo' usage","text":"Hansen, Bruce. 2022. Econometrics. Princeton University Press. Sanderson, Conrad, Ryan Curtin. 2016. “Armadillo: Template-Based C++ Library Linear Algebra.” Journal Open Source Software 1 (2): 26. https://doi.org/10.21105/joss.00026.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"abs","dir":"Articles","previous_headings":"","what":"Absolute value","title":"Functions of vectors, matrices, and cubes","text":"abs() function computes absolute value element vector, matrix, cube. Usage: non-complex case, X Y must type, mat cube. complex case, Y must real counterpart type X. X type cx_mat, type Y must mat.","code":"Y = abs(X); // for non-complex X real_object_type Y = abs(X); // for complex X"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples","dir":"Articles","previous_headings":"Absolute value","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] doubles_matrix<> abs1_(const int& n) {   mat A(n, n, fill::randu);   mat B = abs(A);    cx_mat X(n, n, fill::randu);   mat Y = abs(X);    mat res = B + Y;    return as_doubles_matrix(res); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"accu","dir":"Articles","previous_headings":"","what":"Accumulate (sum) all elements","title":"Functions of vectors, matrices, and cubes","text":"accu() function computes sum elements vector, matrix, cube.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-1","dir":"Articles","previous_headings":"Accumulate (sum) all elements","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] double accu1_(const int& n) {   mat A(n, n, fill::randu);   mat B(n, n, fill::randu);    double x = accu(A);    // accu(A % B) is a \"multiply-and-accumulate\" operation   // as operator % performs element-wise multiplication   double y = accu(A % B);    return (x + y); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"affmul","dir":"Articles","previous_headings":"","what":"Affine matrix multiplication","title":"Functions of vectors, matrices, and cubes","text":"affmul() function computes matrix multiplication B extended form B. typically affine transformation matrix. B can vector matrix, treated additional row ones. number columns must equal number rows extended form B (e.g., .n_cols = B.n_rows + 1). Ahas dimensions 3x3 B 2x1, equivalent matrix multiplication : dimensions 2x3 B 2x1, equivalent matrix multiplication :","code":"⎡ C0 ⎤   ⎡ A00 A01 A02 ⎤   ⎡ B0 ⎤ ⎢ C1 ⎥ = ⎢ A10 A11 A12 ⎥ x ⎢ B1 ⎥ ⎣ C2 ⎦   ⎣ A20 A21 A22 ⎦   ⎣ 1  ⎦ ⎡ C0 ⎤   ⎡ A00 A01 A02 ⎤   ⎡ B0 ⎤ ⎢ C1 ⎥ = ⎢ A10 A11 A12 ⎥ x ⎢ B1 ⎥                            ⎣ 1  ⎦"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-2","dir":"Articles","previous_headings":"Affine matrix multiplication","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] doubles affmul1_(const int& n) {   mat A(n, n + 1, fill::randu);   vec B(n, fill::randu);    vec C = affmul(A, B);    return as_doubles(C); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"all","dir":"Articles","previous_headings":"","what":"Check whether all elements are non-zero, or satisfy a relational condition","title":"Functions of vectors, matrices, and cubes","text":"() function checks whether elements vector, matrix cube non-zero, satisfy relational condition. returns true/false booleans vectors 0/1 vectors matrices indicate condition met row column. Usage:","code":"all(vector); all(matrix); all(matrix, dimension); // dimension = 0 -> returns a row vector urowvec/umat                         // dimension = 1 -> returns a column vector ucolvec/umat"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-3","dir":"Articles","previous_headings":"Check whether all elements are non-zero, or satisfy a relational condition","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] logicals all1_(const int& n) {   vec V(n, fill::randu);   mat X(n, n, fill::randu);    // true if vector V has all non-zero elements   bool status1 = all(V);    // true if vector V has all elements greater than 0.5   bool status2 = all(V > 0.5);    // true if matrix X has all elements greater than 0.6;   // note the use of vectorise()   bool status3 = all(vectorise(X) > 0.6);    // row vector indicating which columns of X have all elements greater than 0.7   umat A = all(X > 0.7);    writable::logicals res(4);   res[0] = status1;   res[1] = status2;   res[2] = status3;   res[3] = all(vectorise(A) == 1);  // true if all elements of A are 1    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"any","dir":"Articles","previous_headings":"","what":"Check whether any element is non-zero, or satisfies a relational condition","title":"Functions of vectors, matrices, and cubes","text":"() function checks whether element vector, matrix cube non-zero, satisfies relational condition. returns true/false booleans vectors 0/1 vectors matrices indicate condition met row column. Usage:","code":"any(vector); any(matrix); any(matrix, dimension); // dimension = 0 -> returns a row vector urowvec/umat                         // dimension = 1 -> returns a column vector ucolvec/umat"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-4","dir":"Articles","previous_headings":"Check whether any element is non-zero, or satisfies a relational condition","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] logicals any1_(const int& n) {   vec V(n, fill::randu);   mat X(n, n, fill::randu);    // true if vector V has any non-zero elements   bool status1 = any(V);    // true if vector V has any elements greater than 0.5   bool status2 = any(V > 0.5);    // true if matrix X has any elements greater than 0.6;   // note the use of vectorise()   bool status3 = any(vectorise(X) > 0.6);    // row vector indicating which columns of X have any elements greater than 0.7   umat A = any(X > 0.7);    writable::logicals res(4);   res[0] = status1;   res[1] = status2;   res[2] = status3;   res[3] = any(vectorise(A) == 1);  // true if any element of A is 1    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"approx_equal","dir":"Articles","previous_headings":"","what":"Approximate equality","title":"Functions of vectors, matrices, and cubes","text":"approx_equal() function checks whether two vectors, matrices cubes approximately equal. returns true corresponding elements differences less equal given tolerance. Usage: method parameter specifies method used compare elements: method = \"absdiff\": absolute difference (e.g., |- B| <= tol) method = \"reldiff\": relative difference (e.g., |- B| / max(||, |B|) <= tol) method = \"\": absolute relative difference (e.g., |- B| <= tol || |- B| / max(||, |B|) <= tol)","code":"approx_equal(A, B, method, tol) approx_equal(A, B, method, abs_tol, rel_tol)"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-5","dir":"Articles","previous_headings":"Approximate equality","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] bool approx_equal1_(const int& n) {   mat A(n, n, fill::randu);   mat B = A + 0.001;    bool same1 = approx_equal(A, B, \"absdiff\", 0.002);    mat C = 1000 * randu<mat>(n, n);   mat D = C + 1;    bool same2 = approx_equal(C, D, \"reldiff\", 0.1);    bool same3 = approx_equal(C, D, \"both\", 2, 0.1);    bool all_same = same1 && same2 && same3;    return all_same; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"arg","dir":"Articles","previous_headings":"","what":"Phase angle of each element","title":"Functions of vectors, matrices, and cubes","text":"arg() function computes phase angle element vector, matrix cube. non-complex elements, input treated complex element zero imaginary component. complex elements, input must output real counterpart type. Usage:","code":"real_object_type Y = arg(X);"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-6","dir":"Articles","previous_headings":"Phase angle of each element","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] doubles_matrix<> arg1_(const int& n) {   cx_mat X(n, n, fill::randu);   mat Y = arg(X);    return as_doubles_matrix(Y); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"as_scalar","dir":"Articles","previous_headings":"","what":"Convert 1x1 matrix to pure scalar","title":"Functions of vectors, matrices, and cubes","text":"as_scalar() function converts 1x1 matrix scalar (e.g., double/int). useful want extract single element matrix operation (e.g., converting result dot/inner product scalar).","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-7","dir":"Articles","previous_headings":"Convert 1x1 matrix to pure scalar","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] double as_scalar1_(const int& n) {   rowvec r(n, fill::randu);   colvec q(n, fill::randu);    mat X(n, n, fill::randu);    // examples of expressions which have optimised implementations   double a = as_scalar(r*q);   double b = as_scalar(r*X*q);   double c = as_scalar(r*diagmat(X)*q);   double d = as_scalar(r*inv(diagmat(X))*q);    return (a + b + c + d); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"clamp","dir":"Articles","previous_headings":"","what":"Obtain clamped elements according to given limits","title":"Functions of vectors, matrices, and cubes","text":"clamp() function clamps element vector, matrix cube given range. value less lower limit set lower limit, value greater upper limit set upper limit. objects complex elements, real imaginary components clamped separately. input sparse matrix, non-zero elements clamped.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"example","dir":"Articles","previous_headings":"Obtain clamped elements according to given limits","what":"Example","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] doubles_matrix<> clamp1_(const int& n) {   mat A(n, n, fill::randu);   mat B = clamp(A, 0.2, 0.8);   mat C = clamp(A, A.min(), 0.8);   mat D = clamp(A, 0.2, A.max());    mat res = B + C + D;    return as_doubles_matrix(res); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"cond","dir":"Articles","previous_headings":"","what":"Condition number of matrix","title":"Functions of vectors, matrices, and cubes","text":"cond() function computes condition number matrix. condition number ratio largest singular value smallest singular value. measure well matrix can inverted, matrix value close 1 well-conditioned, matrix large value ill-conditioned. computation based singular value decomposition.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-8","dir":"Articles","previous_headings":"Condition number of matrix","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] double cond1_(const int& n) {   mat A(n, n);   A.eye(); // the identity matrix has a condition number of 1    double cond_num = cond(A);    return cond_num; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"caveat","dir":"Articles","previous_headings":"Condition number of matrix","what":"Caveat","title":"Functions of vectors, matrices, and cubes","text":"Calculating approximate reciprocal condition number via rcond() considerably efficient.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"conj","dir":"Articles","previous_headings":"","what":"Obtain complex conjugate of each element","title":"Functions of vectors, matrices, and cubes","text":"conj() function computes complex conjugate element complex matrix cube.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-9","dir":"Articles","previous_headings":"Obtain complex conjugate of each element","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] list conj1_(const int& n) {   cx_mat X(n, n, fill::randu);   cx_mat Y = conj(X);   return as_complex_matrix(Y); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"conv_to","dir":"Articles","previous_headings":"","what":"Convert/cast between matrix types","title":"Functions of vectors, matrices, and cubes","text":"conv_to() function converts matrix cube different type. can convert mat imat, cube icube, mat colvec casting preserves data (e.g., matrix interpreted vector valid casting). can also used convert matrix/vector std::vector object. Usage:","code":"conv_to<type>::from(X)"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-10","dir":"Articles","previous_headings":"Convert/cast between matrix types","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] doubles conv_to1_(const int& n) {   mat A(n, n, fill::randu);   fmat B = conv_to<fmat>::from(A);    std::vector<double> x(B.n_elem);    int i, N = static_cast<int>(B.n_elem);   for (i = 0; i < N; ++i) { x[i] = B(i); }    colvec y = conv_to<colvec>::from(x);   std::vector<double> z = conv_to<std::vector<double>>::from(y);    return as_doubles(z); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"caveat-1","dir":"Articles","previous_headings":"Convert/cast between matrix types","what":"Caveat","title":"Functions of vectors, matrices, and cubes","text":"convert expression results 1x1 matrix pure scalar value, use as_scalar().","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"cross","dir":"Articles","previous_headings":"","what":"Cross product","title":"Functions of vectors, matrices, and cubes","text":"cross() function computes cross product two vectors assumption vectors three-dimensional.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-11","dir":"Articles","previous_headings":"Cross product","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] doubles cross1_(const int& n) {   vec A(n, fill::randu);   vec B(n, fill::randu);    vec C = cross(A, B);    return as_doubles(C); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"cumsum","dir":"Articles","previous_headings":"","what":"Cumulative sum","title":"Functions of vectors, matrices, and cubes","text":"cumsum() function computes cumulative sum elements vector matrix. vector, returns vector orientation. matrix, returns matrix cumulative sum along specified dimension (default along columns dimension = 0). Usage:","code":"cumsum(vector); cumsum(matrix, dimension); // dimension = 0 -> cumulative sum along columns                            // dimension = 1 -> cumulative sum along rows"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-12","dir":"Articles","previous_headings":"Cumulative sum","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] doubles cumsum1_(const int& n) {   mat A(n, n, fill::randu);   mat B = cumsum(A);   mat C = cumsum(A, 1);    vec x(n, fill::randu);   vec y = cumsum(x);    writable::doubles res(3);   res[0] = accu(B);   res[1] = accu(C);   res[2] = accu(y);      return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"cumprod","dir":"Articles","previous_headings":"","what":"Cumulative product","title":"Functions of vectors, matrices, and cubes","text":"cumprod() function computes cumulative product elements vector matrix. vector, returns vector orientation. matrix, returns matrix cumulative product along specified dimension (default along columns dimension = 0). Usage:","code":"cumprod(vector); cumprod(matrix, dimension); // dimension = 0 -> cumulative prod along columns                             // dimension = 1 -> cumulative prod along rows"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-13","dir":"Articles","previous_headings":"Cumulative product","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] doubles cumprod1_(const int& n) {   mat A(n, n, fill::randu);   mat B = cumprod(A);   mat C = cumprod(A, 1);    vec x(n, fill::randu);   vec y = cumprod(x);    writable::doubles res(3);   res[0] = accu(B);   res[1] = accu(C);   res[2] = accu(y);      return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"det","dir":"Articles","previous_headings":"","what":"Determinant","title":"Functions of vectors, matrices, and cubes","text":"det() function computes determinant square matrix. based LU decomposition. input square matrix, function throws std::runtime_error exception. Usage: calculation fails: val = det() throws std::runtime_error exception det(val,) returns bool set false (exception thrown)","code":"val = det(X); // store a scalar det(val, A); // store the determinant in val and return true if successful"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-14","dir":"Articles","previous_headings":"Determinant","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] doubles det1_(const int& n) {   mat A(n, n, fill::randu);   double val1 = det(A);    double val2;   mat B(n, n, fill::randu);   bool success2 = det(val2, B);    return writable::doubles({val1, val2, static_cast<double>(success2)}); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"diagmat","dir":"Articles","previous_headings":"","what":"Generate diagonal matrix from given matrix or vector","title":"Functions of vectors, matrices, and cubes","text":"diagmat() function generates diagonal matrix given vector matrix. input vector, output square matrix vector diagonal. input matrix, output square matrix diagonal elements input matrix. element outside diagonal set zero. default main diagonal (k = 0). Usage:","code":"diagmat(vector); diagmat(matrix); diagmat(matrix, k); // k = 0 -> main diagonal                     // k > 0 -> above main diagonal                     // k < 0 -> below main diagonal"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-15","dir":"Articles","previous_headings":"Generate diagonal matrix from given matrix or vector","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] doubles_matrix<> diagmat1_(const int& n) {   mat A(n, n, fill::randu);   mat B = diagmat(A);   mat C = diagmat(A, 1);    vec v(n, fill::randu);   mat D = diagmat(v); // NxN diagonal matrix   mat E = diagmat(v, 1); // (N+1)x(N+1) diagonal matrix    mat res = B + C + D;     res += E.submat(0, 0, 1, 1); // the result is an upper triangular matrix    return as_doubles_matrix(res); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"diagvec","dir":"Articles","previous_headings":"","what":"Extract specified diagonal","title":"Functions of vectors, matrices, and cubes","text":"diagvec() function extracts specified diagonal matrix. default main diagonal (k = 0). Usage:","code":"diagvec(matrix); diagvec(matrix, k); // k = 0 -> main diagonal                     // k > 0 -> above main diagonal                     // k < 0 -> below main diagonal"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-16","dir":"Articles","previous_headings":"Extract specified diagonal","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] doubles diagvec1_(const int& n) {   mat A(n, n, fill::randu);   vec B = diagvec(A);   vec C = diagvec(A, 1);    vec res = B.subvec(0, 1) + C;    return as_doubles(res); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"diags","dir":"Articles","previous_headings":"","what":"Generate a dense matrix with diagonals specified by column vectors","title":"Functions of vectors, matrices, and cubes","text":"diags() function generates dense matrix diagonals specified column vectors input matrix vector indicate diagonals. Usage: element input vector specifies diagonal k, : k = 0 main diagonal k > 0 main diagonal k < 0 main diagonal","code":"diags(matrix, vector, number_of_rows, number_of_columns);"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-17","dir":"Articles","previous_headings":"Generate a dense matrix with diagonals specified by column vectors","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] doubles_matrix<> diags1_(const int& n) {   mat V(n, n, fill::randu);   ivec D = {0, -1};   mat X = diags(V, D, n, n); // lower triangular matrix   return as_doubles_matrix(X); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"diff","dir":"Articles","previous_headings":"","what":"Differences between adjacent elements","title":"Functions of vectors, matrices, and cubes","text":"diff() function computes differences adjacent elements vector matrix. vector, output vector length n-k (default k = 1). matrix, output matrix n-k rows dim = 0 (default) m-k columns dim = 1. k greater length vector number rows/columns, output empty vector/matrix. Usage:","code":"diff(vector); diff(vector, k);  diff(matrix); diff(matrix, k); diff(matrix, k, dim); // dim = 0 -> differences along columns                       // dim = 1 -> differences along rows"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-18","dir":"Articles","previous_headings":"Differences between adjacent elements","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] doubles_matrix<> diff1_(const int& n) {   vec a = randu<vec>(n);   vec b = diff(a);    mat res(n, 2, fill::zeros);      res.col(0) = a;    for (int i = 1; i < n; ++i) {     res(i, 1) = b(i - 1);   }    return as_doubles_matrix(res); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"dot","dir":"Articles","previous_headings":"","what":"Dot product","title":"Functions of vectors, matrices, and cubes","text":"dot(), cdot(), norm_dot() functions compute dot product two vectors. cdot() function computes complex conjugate dot product, norm_dot() function computes dot product normalises result product Euclidean norms input vectors.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-19","dir":"Articles","previous_headings":"Dot product","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] doubles dot1_(const int& n) {   vec A(n, fill::randu);   vec B(n, fill::randu);   return writable::doubles({dot(A, B), cdot(A, B), norm_dot(A, B)}); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"caveat-2","dir":"Articles","previous_headings":"Dot product","what":"Caveat","title":"Functions of vectors, matrices, and cubes","text":"norm() robust calculating norm, handles underflows overflows.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"eps","dir":"Articles","previous_headings":"","what":"Obtain distance of each element to next largest floating point representation","title":"Functions of vectors, matrices, and cubes","text":"eps() function computes distance element scalar, vector matrix next largest floating point representation. vector input, output vector orientation length. matrix input, output matrix dimensions.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-20","dir":"Articles","previous_headings":"Obtain distance of each element to next largest floating point representation","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] doubles_matrix<> eps1_(const int& n) {   mat A(n, n, fill::randu);   mat B = eps(A);   return as_doubles_matrix(B); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"expmat","dir":"Articles","previous_headings":"","what":"Matrix exponential","title":"Functions of vectors, matrices, and cubes","text":"expmat() function computes matrix exponential square matrix. matrix exponential computed, function throws std::runtime_error, input square matrix.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-21","dir":"Articles","previous_headings":"Matrix exponential","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] doubles_matrix<> expmat1_(const int& n) {   mat A(n, n, fill::randu);   mat B = expmat(A);   return as_doubles_matrix(B); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"caveats","dir":"Articles","previous_headings":"Matrix exponential","what":"Caveats","title":"Functions of vectors, matrices, and cubes","text":"matrix exponential operation generally applying exp() function element. input matrix symmetric, expmat_sym() faster.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"expmat_sym","dir":"Articles","previous_headings":"","what":"Matrix exponential of symmetric matrix","title":"Functions of vectors, matrices, and cubes","text":"expmat_sym() function computes matrix exponential symmetric Hermitian matrix. matrix exponential computed, function throws std::runtime_error, input square matrix.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-22","dir":"Articles","previous_headings":"Matrix exponential of symmetric matrix","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] doubles_matrix<> expmat_sym1_(const int& n) {   mat A(n, n, fill::randu);   A = A + A.t(); // make A symmetric   mat B = expmat_sym(A);   return as_doubles_matrix(B); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"find","dir":"Articles","previous_headings":"","what":"Find indices of non-zero elements, or elements satisfying a relational condition","title":"Functions of vectors, matrices, and cubes","text":"find() function returns indices non-zero elements vector, satisfy relational condition vector matrix. output vector indices (uvec). Usage: parameter k (k=0 default) returns indices non-zero elements elements meet condition. optional parameter s = \"first\" returns first m non-zero indices indices meet condition, s = \"last\" returns last m non-zero indices indices meet condition.","code":"find(vector); find(vector, k); find(vector, k, s);  find(matrix); find(matrix, k); find(matrix, k, s);"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-23","dir":"Articles","previous_headings":"Find indices of non-zero elements, or elements satisfying a relational condition","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] list find1_(const int& n) {   mat A(n, n, fill::randu);   mat B(n, n, fill::randu);    uvec q1 = find(A > B);   uvec q2 = find(A > 0.5);   uvec q3 = find(A > 0.5, 3, \"last\");    // change elements of A greater than 0.5 to 1   A.elem(find(A > 0.5)).ones();    return writable::list(as_integers(q1), as_integers(q2), as_integers(q3)); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"caveats-1","dir":"Articles","previous_headings":"Find indices of non-zero elements, or elements satisfying a relational condition","what":"Caveats","title":"Functions of vectors, matrices, and cubes","text":"clamp values interval, clamp() efficient. replace specific value, .replace() efficient.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"find_finite","dir":"Articles","previous_headings":"","what":"Find indices of finite elements","title":"Functions of vectors, matrices, and cubes","text":"find_finite() function returns indices finite elements vector matrix. output vector indices (uvec).","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-24","dir":"Articles","previous_headings":"Find indices of finite elements","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] integers find_finite1_(const int& n) {   mat A(n, n, fill::randu);   uvec q = find_finite(A);   return as_integers(q); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"find_nonfinite","dir":"Articles","previous_headings":"","what":"Find indices of non-finite elements","title":"Functions of vectors, matrices, and cubes","text":"find_nonfinite() function returns indices non-finite elements vector matrix. output vector indices (uvec).","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-25","dir":"Articles","previous_headings":"Find indices of non-finite elements","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] integers find_nonfinite1_(const int& n) {   mat A(n, n, fill::randu);   A(0, 0) = datum::inf;   uvec q = find_nonfinite(A);   return as_integers(q); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"caveat-3","dir":"Articles","previous_headings":"Find indices of non-finite elements","what":"Caveat","title":"Functions of vectors, matrices, and cubes","text":"replace instances specific non-finite value (eg. NaN Inf), efficient use .replace().","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"find_nan","dir":"Articles","previous_headings":"","what":"Find indices of NaN elements","title":"Functions of vectors, matrices, and cubes","text":"find_nan() function returns indices NaN elements vector matrix. output vector indices (uvec).","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-26","dir":"Articles","previous_headings":"Find indices of NaN elements","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] integers find_nan1_(const int& n) {   mat A(n, n, fill::randu);   A(0, 0) = datum::nan;   uvec q = find_nan(A);   return as_integers(q); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"caveat-4","dir":"Articles","previous_headings":"Find indices of NaN elements","what":"Caveat","title":"Functions of vectors, matrices, and cubes","text":"replace instances NaN values, efficient use .replace().","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"find_unique","dir":"Articles","previous_headings":"","what":"Find indices of unique elements","title":"Functions of vectors, matrices, and cubes","text":"find_unique() function returns indices unique elements vector matrix. output vector indices (uvec).","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-27","dir":"Articles","previous_headings":"Find indices of unique elements","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] integers find_unique1_(const int& n) {   mat A(n, n, fill::randu);   A(0, 0) = A(1, 1);   uvec q = find_unique(A);   return as_integers(q); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"fliplr","dir":"Articles","previous_headings":"","what":"Flip matrix left to right or upside down","title":"Functions of vectors, matrices, and cubes","text":"fliplr() function generates copy input matrix order columns reversed, flipud() function generates copy input matrix order rows reversed.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-28","dir":"Articles","previous_headings":"Flip matrix left to right or upside down","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] list flip1_(const int& n) {   mat A(n, n, fill::randu);   mat B = fliplr(A);   mat C = flipud(A);    writable::list res(3);   res[0] = as_doubles_matrix(A);   res[1] = as_doubles_matrix(B);   res[2] = as_doubles_matrix(C);    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"imag","dir":"Articles","previous_headings":"","what":"Extract imaginary/real part","title":"Functions of vectors, matrices, and cubes","text":"imag() real() functions extract imaginary real parts element complex matrix, respectively.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-29","dir":"Articles","previous_headings":"Extract imaginary/real part","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] list imag1_(const int& n) {   cx_mat X(n, n, fill::randu);   mat Y = imag(X);   mat Z = real(X);    writable::list res(2);   res[0] = as_doubles_matrix(Y);   res[1] = as_doubles_matrix(Z);    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"caveat-5","dir":"Articles","previous_headings":"Extract imaginary/real part","what":"Caveat","title":"Functions of vectors, matrices, and cubes","text":"convert complex matrix list real matrices, efficient use as_complex_matrix().","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"ind2sub","dir":"Articles","previous_headings":"","what":"Convert linear index to subscripts","title":"Functions of vectors, matrices, and cubes","text":"ind2sub() function converts linear index vector indexes subscripts. output vector indices (uvec) input index scalar, matrix indices (umat) input index vector. Usage:","code":"uvec sub = ind2sub(size(X), index) uvec sub = ind2sub(size(n_rows, n_cols), index) uvec sub = ind2sub(size(n_rows, n_cols, n_slices), index)  umat sub = ind2sub(size(X), vector_of_indices) umat sub = ind2sub(size(n_rows, n_cols), vector_of_indices) umat sub = ind2sub(size(n_rows, n_cols, n_slices), vector_of_indices)"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-30","dir":"Articles","previous_headings":"Convert linear index to subscripts","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] list ind2sub1_(const int& n) {   mat M(n, n, fill::randu);    uvec s = ind2sub(size(M), n);    uvec indices = find(M > 0.5);   umat t       = ind2sub(size(M), indices);    cube Q(2,3,4);    uvec u = ind2sub(size(Q), 8);    writable::list res(3);   res[0] = as_integers(s);   res[1] = as_integers_matrix(t);   res[2] = as_integers(u);    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"index_min","dir":"Articles","previous_headings":"","what":"Indices of extremum values","title":"Functions of vectors, matrices, and cubes","text":"index_min() index_max() functions return indices minimum maximum values vector, matrix cube. input vector, output scalar index (uword). input matrix, output vector indices (uvec) row orientation argument dim = 0 (default) min/max column, column orientation dim = 1 min/max row. input cube, output cube indices (ucube) min/max slice’s columns dim = 0, min/max slice’s rows dim = 1, min/max slice dim = 2. complex objects, absolute value used compare elements. Usage:","code":"// index_max is analogous  index_min(vector)  index_min(matrix) index_min(matrix, dim)  index_min(cube) index_min(cube, dim)"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-31","dir":"Articles","previous_headings":"Indices of extremum values","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] doubles index_min1_(const int& n) {   vec v(n, fill::randu);    uword i = index_max(v);   double max_val_in_v = v(i);     mat M(n, n + 1, fill::randu);    urowvec ii = index_max(M);   ucolvec jj = index_max(M, 1);    // max values in col 0 and row n   return writable::doubles res({M(ii(0), 0), M(n, jj(n))}); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"inplace_trans","dir":"Articles","previous_headings":"","what":"In-place dense transpose","title":"Functions of vectors, matrices, and cubes","text":"inplace_trans() inplace_strans() function return -place transpose dense matrix. functions optional method = \"lowmem\" argument uses low memory (slower) algorithm transpose (default method = \"std\"). real matrices: inplace_trans() returns common transpose input matrix. inplace_strans() apply. complex matrices: inplace_trans() returns Hermitian transpose (conjugate transpose) input matrix. inplace_strans() returns transposed copy without taking conjugate elements input matrix.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-32","dir":"Articles","previous_headings":"In-place dense transpose","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] doubles_matrix<> inplace_trans1_(const int& n) {   mat X(n, n, fill::randu);   inplace_trans(X);   return as_doubles_matrix(X); }  [[cpp11::register]] list inplace_strans1_(const int& n) {   cx_mat X(n, n, fill::randu);   inplace_strans(X);   return as_complex_matrix(X); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"intersect","dir":"Articles","previous_headings":"","what":"Find common elements in two vectors/matrices","title":"Functions of vectors, matrices, and cubes","text":"intersect() function returns common elements two vectors matrices. output ascending sorted vector unique common elements.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-33","dir":"Articles","previous_headings":"Find common elements in two vectors/matrices","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] integers intersect1_(const int& n) {   ivec A = regspace<ivec>(n, 1);      // n, ..., 1   ivec B = regspace<ivec>(2, n + 1);  // 2, ..., n + 1    ivec C = intersect(A, B);  // 2, ..., n    return as_integers(C); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"join_rows","dir":"Articles","previous_headings":"","what":"Concatenation of matrices","title":"Functions of vectors, matrices, and cubes","text":"join_rows() join_cols() functions concatenate matrices horizontally vertically, respectively. input matrices must number rows join_rows() number columns join_cols(). functions accept two four matrices input. Alternatively, join_horiz() join_vert() can used aliases join_rows() join_cols(), respectively.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-34","dir":"Articles","previous_headings":"Concatenation of matrices","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] list join_rows1_(const int& n) {   mat A(n, 1, fill::randu);   mat B(n, 1, fill::randu);   mat C(n, 1, fill::randu);    mat D = join_rows(A, B, C);   mat E = join_cols(A, B, C);    return writable::list({A, B, C, D, E}); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"join_slices","dir":"Articles","previous_headings":"","what":"Concatenation of cubes","title":"Functions of vectors, matrices, and cubes","text":"join_slices() function concatenates cubes along third dimension. two matrices, input matrices must number rows columns. two cubes, input cubes must number rows columns. matrix cube, number rows columns matrix must match number rows columns cube. Usage:","code":"join_slices(matrix, matrix) join_slices(cube, cube); join_slices(matrix, cube); join_slices(cube, matrix);"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-35","dir":"Articles","previous_headings":"Concatenation of cubes","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] list join_cubes1_(const int& n) {   cube C(n, n + 1, 3, fill::randu);   cube D(n, n + 1, 4, fill::randu);    cube E = join_slices(C, D);    size_t m = C.n_slices + D.n_slices;    writable::list res(m);    for (size_t i = 0; i < m; ++i) {     res[i] = as_doubles_matrix(E.slice(i));   }    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"kron","dir":"Articles","previous_headings":"","what":"Kronecker tensor product","title":"Functions of vectors, matrices, and cubes","text":"kron() function computes Kronecker tensor product two matrices.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-36","dir":"Articles","previous_headings":"Kronecker tensor product","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] doubles_matrix<> kron1_(const int& n) {   mat A(n, n + 1, fill::randu);   mat B(n + 1, n, fill::randu);    mat K = kron(A, B);    return as_doubles_matrix(K); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"log_det","dir":"Articles","previous_headings":"","what":"Log determinant","title":"Functions of vectors, matrices, and cubes","text":"log_det() function computes natural logarithm determinant square matrix based LU decomposition. matrix square computation fails, function throws std::runtime_error exception. Usage: Form 1: log_det(X) returns complex logarithm determinant X. input matrix real, imaginary part result zero. Form 2: log_det(val, sign, X) returns bool indicating calculation successful stores logarithm determinant val sign variables det(X) = sign * exp(val). computation fails, values val sign undefined returns false without throwing exception.","code":"complex val = log_det(X); log_det(val, sign, X);"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-37","dir":"Articles","previous_headings":"Log determinant","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] list log_det1_(const int& n) {   mat A(n, n, fill::randu);    cx_double res1 = log_det(A);  // form 1    cpp11::writable::list res2;   res2.push_back(writable::doubles({std::real(res1)}));   res2.push_back(writable::doubles({std::imag(res1)}));    double val;   double sign;   bool ok = log_det(val, sign, A);  // form 2    writable::list res3(3);   res3[0] = doubles({val});   res3[1] = doubles({sign});   res3[2] = logicals({ok});    writable::list res(2);   res[0] = res2;   res[1] = res3;    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"log_det_sympd","dir":"Articles","previous_headings":"","what":"Log determinant of symmetric positive definite matrix","title":"Functions of vectors, matrices, and cubes","text":"log_det_sympd() function computes natural logarithm determinant symmetric positive definite matrix. matrix square computation fails, std::runtime_error exception thrown. Form 1: log_det_sympd(X) returns logarithm determinant X. Form 2: log_det_sympd(val, X) returns bool indicating calculation successful stores logarithm determinant val variable. computation fails, value val undefined returns false without throwing exception.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-38","dir":"Articles","previous_headings":"Log determinant of symmetric positive definite matrix","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] list log_det_sympd1_(const int& n) {   mat A(n, n, fill::randu);   A = A * A.t();  // make A symmetric positive definite    double val = log_det_sympd(A);  // form 1    double val2;   bool ok = log_det_sympd(val2, A);  // form 2    writable::list res(2);   res[0] = doubles({val});    writable::list res2(2);   res2[0] = doubles({val2});   res2[1] = logicals({ok});   res[1] = res2;    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"logmat","dir":"Articles","previous_headings":"","what":"Matrix logarithm","title":"Functions of vectors, matrices, and cubes","text":"logmat() function computes matrix logarithm square matrix. input matrix square computation fails, std::runtime_error exception thrown. Form 1: logmat(X) returns matrix logarithm X. Form 2: logmat(val, X) returns bool indicating calculation successful stores matrix logarithm val variable. computation fails, value val undefined returns false without throwing exception.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-39","dir":"Articles","previous_headings":"Matrix logarithm","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] list logmat1_(const int& n) {   mat A(n, n, fill::randu);   cx_mat B = logmat(A);   return as_complex_matrix(B); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"caveats-2","dir":"Articles","previous_headings":"Matrix logarithm","what":"Caveats","title":"Functions of vectors, matrices, and cubes","text":"matrix logarithm operation generally applying log() function element. input matrix symmetric positive definite, logmat_sympd() faster.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"logmat_sympd","dir":"Articles","previous_headings":"","what":"Matrix logarithm of symmetric matrix","title":"Functions of vectors, matrices, and cubes","text":"logmat_sympd() function computes matrix logarithm symmetric positive definite matrix. input matrix square computation fails, std::runtime_error exception thrown. Form 1: logmat_sympd(X) returns matrix logarithm X. Form 2: logmat_sympd(Y, X) returns bool indicating calculation successful stores matrix logarithm Y variable. computation fails, value Y undefined returns false without throwing exception.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-40","dir":"Articles","previous_headings":"Matrix logarithm of symmetric matrix","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] doubles_matrix<> logmat_sympd1_(const int& n) {   mat A(n, n, fill::randu);   mat B = A * A.t();  // make symmetric matrix   mat C = logmat_sympd(B);   return as_doubles_matrix(C); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"min","dir":"Articles","previous_headings":"","what":"Return extremum values","title":"Functions of vectors, matrices, and cubes","text":"min() max() functions return minimum maximum values vector, matrix cube. vector, output scalar. matrix, output vector minimum maximum value column dim = 0 (default) row dim = 1. cube, output cube minimum maximum value slice’s columns dim = 0, minimum maximum value slice’s rows dim = 1, minimum maximum value slice dim = 2. complex objects, absolute value used compare elements. Usage:","code":"// max() is analogous  min(vector); min(vector1, vector2);  min(matrix); min(matrix, dim); min(matrix1, matrix2);  min(cube); min(cube, dim); min(cube1, cube2);"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-41","dir":"Articles","previous_headings":"Return extremum values","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] list max1_(const int& n) {   mat M(n, n, fill::randu);    rowvec a = max(M);   rowvec b = max(M, 0);   colvec c = max(M, 1);    // element-wise maximum   mat X(n, n, fill::randu);   mat Y(n, n, fill::randu);   mat Z = arma::max(X, Y);  // use arma:: prefix to distinguish from std::max()    writable::list res(4);   res[0] = as_doubles(a.t());   res[1] = as_doubles(b.t());   res[2] = as_doubles(c);   res[3] = as_doubles_matrix(Z);    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"nonzeros","dir":"Articles","previous_headings":"","what":"Return non-zero values","title":"Functions of vectors, matrices, and cubes","text":"nonzeros() function returns non-zero values vector, matrix cube. output column vector non-zero values (vec). input matrix can dense sparse.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-42","dir":"Articles","previous_headings":"Return non-zero values","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] doubles nonzeros1_(const int& n) {   mat A(n, n, fill::randu);   A.elem(find(A < 0.5)).zeros();  // set elements less than 0.5 to zero   vec B = nonzeros(A);   return as_doubles(B); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"caveats-3","dir":"Articles","previous_headings":"Return non-zero values","what":"Caveats","title":"Functions of vectors, matrices, and cubes","text":"Caveats: dense matrices/vectors, obtain number non-zero elements, expression accu(X != 0) efficient. sparse matrices, obtain number non-zero elements, X.n_nonzero efficient.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"norm","dir":"Articles","previous_headings":"","what":"Various norms of vectors and matrices","title":"Functions of vectors, matrices, and cubes","text":"norm() function computes p-norm vector matrix. optional argument p can p = {1,...,n}, p = \"inf\", p = \"-inf\", p = \"fro\" 1,2,…,n-norms, maximum norm, minimum quasi-norm, Frobenius norm, respectively. default 2-norm vectors Frobenius norm matrices.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-43","dir":"Articles","previous_headings":"Various norms of vectors and matrices","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] doubles norm1_(const int& n) {   vec A(n, fill::randu);   mat B(n, n, fill::randu);    double a1 = norm(A, 1);   double a2 = norm(A, 2);   double a3 = norm(A, \"inf\");   double a4 = norm(A, \"-inf\");   double a5 = norm(A, \"fro\");    double b1 = norm(B, 1);   double b2 = norm(B, 2);   double b3 = norm(B, \"inf\");   double b4 = norm(B, \"-inf\");   double b5 = norm(B, \"fro\");    writable::doubles res({a1, a2, a3, a4, a5, b1, b2, b3, b4, b5});   attr(res, \"names\") = strings({\"a1\", \"a2\", \"a3\", \"a4\", \"a5\",     \"b1\", \"b2\", \"b3\", \"b4\", \"b5\"}); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"caveats-4","dir":"Articles","previous_headings":"Various norms of vectors and matrices","what":"Caveats","title":"Functions of vectors, matrices, and cubes","text":"matrix 2-norm (spectral norm) based SVD, computationally intensive. faster alternative norm2est(). obtain vector norm row column matrix, use vecnorm(). obtain zero/Hamming pseudo-norm (number non-zero elements), use expression accu(X != 0).","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"norm2est","dir":"Articles","previous_headings":"","what":"Fast estimate of the matrix 2-norm","title":"Functions of vectors, matrices, and cubes","text":"norm2est() function computes fast estimate 2-norm matrix. function iterates |est1 - est2| / max(est1, est2) < tol number iterations equal max_iter. default values tol = 1e-5 max_iter = 100.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-44","dir":"Articles","previous_headings":"Fast estimate of the matrix 2-norm","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] doubles norm2est1_(const int& n) {   mat A(n, n, fill::randu);   return doubles({norm2est(A)}); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"normalise","dir":"Articles","previous_headings":"","what":"Normalise vectors to unit p-norm","title":"Functions of vectors, matrices, and cubes","text":"normalise() function normalises vectors matrices p-norm. default 2-norm vectors matrices (p = 2). matrices, optional dim argument specifies dimension along normalise matrix, dim = 0 normalising along columns dim = 1 normalising along rows.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-45","dir":"Articles","previous_headings":"Normalise vectors to unit p-norm","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] list normalise1_(const int& n) {   mat A(n, n, fill::randu);    mat B = normalise(A, 1, 0);   mat C = normalise(A, 1, 1);    writable::list res(2);   res[0] = as_doubles_matrix(B);   res[1] = as_doubles_matrix(C);    res.attr(\"names\") = strings({\"B_norm1_cols\", \"C_norm1_rows\"});    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"pow","dir":"Articles","previous_headings":"","what":"Element-wise power","title":"Functions of vectors, matrices, and cubes","text":"pow() function computes element-wise power matrix vector. power argument can scalar, vector, matrix.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-46","dir":"Articles","previous_headings":"Element-wise power","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] list pow1_(const int& n) {   mat A(n, n, fill::randu);   mat B(n, n, fill::randu);    mat C = pow(A, 2);   mat D = pow(A, B);    writable::list res(2);   res[0] = as_doubles_matrix(C);   res[1] = as_doubles_matrix(D);    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"caveats-5","dir":"Articles","previous_headings":"Element-wise power","what":"Caveats","title":"Functions of vectors, matrices, and cubes","text":"raise elements power 2, use square() instead. matrix power operation, takes account matrix structure, use powmat().","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"powmat","dir":"Articles","previous_headings":"","what":"Matrix power","title":"Functions of vectors, matrices, and cubes","text":"powmat() function computes matrix power square matrix. power argument must scalar (e.g., double int). input matrix square, function throws std::runtime_error exception. Usage: calculation fails: Y = powmat(X) throws std::runtime_error exception. powmat(Y, X, 2) returns bool set false (exception thrown).","code":"Y = powmat(X, 2); // store a matrix powmat(Y, X, 2); // store the matrix in Y and return true if successful"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-47","dir":"Articles","previous_headings":"Matrix power","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] list powmat1_(const int& n) {   mat A(n, n, fill::randu);    mat B = powmat(A, 2);  // form 1    mat C;   bool ok = powmat(C, A, 2);  // form 2    writable::list res(2);   res[0] = as_doubles_matrix(B);    writable::list res2(2);   res2[0] = as_doubles_matrix(C);   res2[1] = logicals({ok});    res[1] = res2;    res.attr(\"names\") = strings({\"powmat_form1\", \"powmat_form2\"});   res2.attr(\"names\") = strings({\"result\", \"status\"});    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"prod","dir":"Articles","previous_headings":"","what":"Product of elements","title":"Functions of vectors, matrices, and cubes","text":"prod() function computes product elements vector matrix. optional dim argument specifies dimension along compute matrix product, dim = 0 computing product along columns dim = 1 computing product along rows.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-48","dir":"Articles","previous_headings":"Product of elements","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] list prod1_(const int& n) {   mat A(n, n, fill::randu);    rowvec b = prod(A, 0);   vec c = prod(A, 1);    writable::list res(2);   res[0] = as_doubles(b.t());   res[1] = as_doubles(c);    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"rank","dir":"Articles","previous_headings":"","what":"Rank of matrix","title":"Functions of vectors, matrices, and cubes","text":"rank() function computes rank matrix based singular values. optional tolerance argument specifies tolerance singular values. default tolerance = max_rc * max_sv * epsilon, : max_rc = max(X.n_rows, X.n_cols) max_sv = max(singular values X) epsilon = 1 - min(singular values X > 1) Usage:","code":"val = rank(X, tolerance); // form 1 rank(val, X, tolerance);   // form 2"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-49","dir":"Articles","previous_headings":"Rank of matrix","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] list rank1_(const int& n) {   mat A(n, n, fill::randu);    int r1 = rank(A);    uword r2;   bool ok = rank(r2, A);    writable::list res(2);   res[0] = integers({r1});    writable::list res2(2);   res2[0] = integers({static_cast<int>(r2)});   res2[1] = logicals({ok});    res[1] = res2;    res.attr(\"names\") = strings({\"rank1\", \"rank2\"});   res2.attr(\"names\") = strings({\"result\", \"status\"});    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"rcond","dir":"Articles","previous_headings":"","what":"Reciprocal condition number","title":"Functions of vectors, matrices, and cubes","text":"rcond() function computes 1-norm estimate reciprocal condition number square matrix. Values close one indicate well-conditioned matrix, values close zero indicate poorly conditioned matrix. input matrix square, function throws std::runtime_error exception.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-50","dir":"Articles","previous_headings":"Reciprocal condition number","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] doubles rcond1_(const int& n) {   mat A(n, n, fill::randu);   return doubles({rcond(A)}); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"caveat-6","dir":"Articles","previous_headings":"Reciprocal condition number","what":"Caveat","title":"Functions of vectors, matrices, and cubes","text":"efficiently calculate reciprocal condition matrix inverse time, use inv().","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"repelem","dir":"Articles","previous_headings":"","what":"Replicate elements","title":"Functions of vectors, matrices, and cubes","text":"repelem() function replicates elements matrix. Usage: generated matrix following size: n_rows = num_copies_per_row * .n_rows n_cols   = num_copies_per_col * .n_cols","code":"repelem(A, num_copies_per_row, num_copies_per_col)"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-51","dir":"Articles","previous_headings":"Replicate elements","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] list repelem1_(const int& n) {   mat A(n, n, fill::randu);   mat B = repelem(A, 2, 3);    writable::list res(2);   res[0] = as_doubles_matrix(A);   res[1] = as_doubles_matrix(B);    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"repmat","dir":"Articles","previous_headings":"","what":"Replicate matrix in block-like fashion","title":"Functions of vectors, matrices, and cubes","text":"repmat() function replicates matrix block-like fashion. Usage: generated matrix following size: n_rows = num_reps_row * .n_rows n_cols = num_reps_col * .n_cols","code":"repmat(A, num_reps_row, num_reps_col)"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-52","dir":"Articles","previous_headings":"Replicate matrix in block-like fashion","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] list repmat1_(const int& n) {   mat A(n, n, fill::randu);   mat B = repmat(A, 2, 3);    writable::list res(2);   res[0] = as_doubles_matrix(A);   res[1] = as_doubles_matrix(B);    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"caveat-7","dir":"Articles","previous_headings":"Replicate matrix in block-like fashion","what":"Caveat","title":"Functions of vectors, matrices, and cubes","text":"apply vector operation row column matrix, generally efficient use .each_row() .each_col().","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"reshape","dir":"Articles","previous_headings":"","what":"Change size while keeping elements","title":"Functions of vectors, matrices, and cubes","text":"reshape() function changes size vector, matrix cube keeping elements order. Usage:","code":"reshape(vector, n_rows, n_cols) reshape(matrix, n_rows, n_cols)  reshape(vector, size(matrix)) reshape(matrix, size(matrix))  reshape(cube, n_rows, n_cols, n_slices) reshape(cube, size(cube))"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-53","dir":"Articles","previous_headings":"Change size while keeping elements","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] list reshape1_(const int& n) {   mat A(n, n + 1, fill::randu);      mat B = reshape(A, n + 1, n);      mat C(n + 4, n - 1);   C = reshape(A, size(C));    writable::list res(2);   res[0] = as_doubles_matrix(B);   res[1] = as_doubles_matrix(C);    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"resize","dir":"Articles","previous_headings":"","what":"Change size while keeping elements and preserving layout","title":"Functions of vectors, matrices, and cubes","text":"resize() function changes size vector, matrix cube preserving data. new size larger, new elements set zero. Usage:","code":"resize(vector, n_rows, n_cols) resize(matrix, n_rows, n_cols)  resize(vector, size(matrix)) resize(matrix, size(matrix))  resize(cube, n_rows, n_cols, n_slices) resize(cube, size(cube))"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-54","dir":"Articles","previous_headings":"Change size while keeping elements and preserving layout","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] list resize2_(const int& n) {   mat A(n, n + 1, fill::randu);    mat B = resize(A, n + 1, n);    mat C(n + 4, n - 1);   C = resize(A, size(C));    writable::list res(3);   res[0] = as_doubles_matrix(A);   res[1] = as_doubles_matrix(B);   res[2] = as_doubles_matrix(C);    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"reverse","dir":"Articles","previous_headings":"","what":"Reverse order of elements","title":"Functions of vectors, matrices, and cubes","text":"reverse() function reverses order elements vector matrix. optional dim argument specifies dimension along reverse matrix, dim = 0 reversing along columns dim = 1 reversing along rows (dim = 0 default).","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-55","dir":"Articles","previous_headings":"Reverse order of elements","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] list reverse1_(const int& n) {   mat A(n, n, fill::randu);    mat B = reverse(A, 0);   mat C = reverse(A, 1);    writable::list res(3);   res[0] = as_doubles_matrix(A);   res[1] = as_doubles_matrix(B);   res[2] = as_doubles_matrix(C);    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"roots","dir":"Articles","previous_headings":"","what":"Roots of polynomial","title":"Functions of vectors, matrices, and cubes","text":"roots() function computes roots polynomial real complex coefficients. input vector coefficients, first element corresponding highest degree term. computation fails, function throws std::runtime_error exception. Usage:","code":"Y = roots(X) // store the roots in Y roots(Y, X)  // store the roots in Y and return true if successful"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-56","dir":"Articles","previous_headings":"Roots of polynomial","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] list roots1_(const int& n) {   // y = p_1*x^n + p_2*x^(n-1) + ... + p_(n-1)*x + p_n   // p_1, ..., p_n are random numbers   vec y(n, 1, fill::randu);    // note that mat and cx_mat operate directly   // but vec and cx_vec require conv_to<...>::from()   cx_vec z = roots(conv_to<cx_vec>::from(y));    list res = as_complex_doubles(z);   return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"shift","dir":"Articles","previous_headings":"","what":"Shift elements","title":"Functions of vectors, matrices, and cubes","text":"shift() function generates copy vector V matrix M elements shifted N positions circular manner. N argument can positive negative. matrix, optional dim argument specifies dimension along shift matrix, dim = 0 shifting along columns (default) dim = 1 shifting along rows. Usage:","code":"shift(V, N) shift(M, N) shift(M, N, dim)"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-57","dir":"Articles","previous_headings":"Shift elements","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] list shift1_(const int& n) {   mat A(n, n, fill::randu);   mat B = shift(A, -1);   mat C = shift(A, +1);    writable::list res(3);   res[0] = as_doubles_matrix(A);   res[1] = as_doubles_matrix(B);   res[2] = as_doubles_matrix(C);    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"shuffle","dir":"Articles","previous_headings":"","what":"Randomly shuffle elements","title":"Functions of vectors, matrices, and cubes","text":"shuffle() function generates copy vector V matrix M elements shuffled. matrix, optional dim argument specifies dimension along shuffle matrix, dim = 0 shuffling along columns (default) dim = 1 shuffling along rows. Usage:","code":"shuffle(V) shuffle(M) shuffle(M, dim)"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-58","dir":"Articles","previous_headings":"Randomly shuffle elements","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] list shuffle1_(const int& n) {   mat A(n, n, fill::randu);   mat B = shuffle(A);    writable::list res(2);   res[0] = as_doubles_matrix(A);   res[1] = as_doubles_matrix(B);    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"size","dir":"Articles","previous_headings":"","what":"Obtain dimensions of given object","title":"Functions of vectors, matrices, and cubes","text":"size() function obtains dimensions matrix cube X. can also used explicitly specify dimensions matrix cube. Usage:","code":"size(X) size(n_rows, n_cols) size(n_rows, n_cols, n_slices)"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-59","dir":"Articles","previous_headings":"Obtain dimensions of given object","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] list size1_(const int& n) {   mat A(n, n, fill::randu);    mat B(size(A), fill::zeros);    mat C;   C.randu(size(A));   mat D = ones<mat>(size(A));    mat E(2 * n, 2 * n, fill::ones);   E(1, 2, size(C)) = C;  // access submatrix of E    mat F(size(A) + size(E), fill::randu);    mat G(size(A) * 2, fill::randu);    writable::list res(7);    res[0] = as_doubles_matrix(A);   res[1] = as_doubles_matrix(B);   res[2] = as_doubles_matrix(C);   res[3] = as_doubles_matrix(D);   res[4] = as_doubles_matrix(E);   res[5] = as_doubles_matrix(F);   res[6] = as_doubles_matrix(G);    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"sort","dir":"Articles","previous_headings":"","what":"Sort elements","title":"Functions of vectors, matrices, and cubes","text":"sort() function returns sorted version vector V matrix M. matrix, optional dim argument specifies dimension along sort matrix, dim = 0 sorting along columns (default) dim = 1 sorting along rows. optional sort_direction argument specifies sorting direction, sort_direction = \"ascend\" (default) sorting ascending order sort_direction = \"descend\" sorting descending order. Usage:","code":"sort(V) sort(V, sort_direction)  sort(M) sort(M, sort_direction) sort(M, sort_direction, dim)"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-60","dir":"Articles","previous_headings":"Sort elements","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] list sort1_(const int& n) {   mat A(n, n, fill::randu);   mat B = sort(A);   mat C = sort(A, \"descend\");   mat D = sort(A, \"ascend\", 1);   mat E = sort(A, \"descend\", 1);    writable::list res(5);   res[0] = as_doubles_matrix(A);   res[1] = as_doubles_matrix(B);   res[2] = as_doubles_matrix(C);   res[3] = as_doubles_matrix(D);   res[4] = as_doubles_matrix(E);    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"sort_index","dir":"Articles","previous_headings":"","what":"Vector describing sorted order of elements","title":"Functions of vectors, matrices, and cubes","text":"sort_index() function returns vector describing sorted order elements vector V matrix M. optional sort_direction argument specifies sorting direction, sort_direction = \"ascend\" (default) sorting ascending order sort_direction = \"descend\" sorting descending order. Usage:","code":"sort_index(V) sort_index(V, sort_direction)  sort_index(M) sort_index(M, sort_direction)"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-61","dir":"Articles","previous_headings":"Vector describing sorted order of elements","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] list sort_index1_(const int& n) {   mat A(n, n, fill::randu);   uvec B = sort_index(A);   uvec C = sort_index(A, \"descend\");    writable::list res(3);   res[0] = as_doubles_matrix(A);   res[1] = as_integers(B);   res[2] = as_integers(C);    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"spdiags","dir":"Articles","previous_headings":"","what":"Generate a sparse matrix with diagonals specified by column vectors","title":"Functions of vectors, matrices, and cubes","text":"spdiags() function generates sparse matrix diagonals specified column vectors input matrix vector indicate diagonals. Usage: element input vector specifies diagonal k, : k = 0 main diagonal k > 0 main diagonal k < 0 main diagonal","code":"spdiags(matrix, vector, number_of_rows, number_of_columns);"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-62","dir":"Articles","previous_headings":"Generate a sparse matrix with diagonals specified by column vectors","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] doubles_matrix<> spdiags1_(const int& n) {   mat V(n, n, fill::randu);   ivec D = {0, -1};   sp_mat X = spdiags(V, D, n, n); // lower triangular matrix   return as_doubles_matrix(X); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"sqrtmat","dir":"Articles","previous_headings":"","what":"Square root of matrix","title":"Functions of vectors, matrices, and cubes","text":"sqrtmat() function computes complex square root general square matrix. input matrix square, function throws error. matrix appears singular, approximate square root attempted. Usage:","code":"B = sqrtmat(A) sqrtmat(B, A)"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-63","dir":"Articles","previous_headings":"Square root of matrix","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] list sqrtmat1_(const int& n) {   mat A(n, n, fill::randu);      cx_mat B = sqrtmat(A);    cx_mat C;   bool ok = sqrtmat(C, A);    writable::list res(4);    res[0] = as_doubles_matrix(A);   res[1] = as_complex_matrix(B);   res[2] = as_complex_matrix(C);   res[3] = logicals({ok});    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"sqrtmat_sympd","dir":"Articles","previous_headings":"","what":"Square root of symmetric matrix","title":"Functions of vectors, matrices, and cubes","text":"sqrtmat_sympd() function computes square root symmetric positive definite matrix. input matrix square computation fails, function throws error. Usage:","code":"B = sqrtmat_sympd(A) sqrtmat_sympd(B, A)"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-64","dir":"Articles","previous_headings":"Square root of symmetric matrix","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] doubles_matrix<> sqrtmat_sympd1_(const int& n) {   mat A(n, n, fill::randu);   A = A * A.t();  // make A symmetric positive definite    mat B = sqrtmat_sympd(A);    return as_doubles_matrix(B); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"sum","dir":"Articles","previous_headings":"","what":"Sum of elements","title":"Functions of vectors, matrices, and cubes","text":"sum() function computes sum elements vector, matrix cube. matrix, optional dim argument specifies dimension along compute sum, dim = 0 computing sum along columns dim = 1 computing sum along rows. cube, optional dim argument specifies dimension along compute sum, dim = 0 computing sum along columns, dim = 1 computing sum along rows, dim = 2 computing sum along slices. Usage:","code":"sum(vector)  sum(matrix) sum(matrix, dim)  sum(cube) sum(cube, dim)"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-65","dir":"Articles","previous_headings":"Sum of elements","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] list sum2_(const int& n) {   mat A(n, n, fill::randu);    vec a = sum(A, 1);   vec b = sum(A, 0).t();   double c = accu(A);  // overall sum    writable::list res(3);   res[0] = as_doubles(a);   res[1] = as_doubles(b);   res[2] = doubles({c});    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"sub2ind","dir":"Articles","previous_headings":"","what":"Convert subscripts to linear index","title":"Functions of vectors, matrices, and cubes","text":"sub2ind() function converts subscripts linear index. subscript range, function returns error. Usage:","code":"sub2ind(size(matrix), row, col) sub2ind(size(matrix), matrix_of_subscripts)  sub2ind(size(cube), row, col, slice) sub2ind(size(cube), matrix_of_subscripts)"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-66","dir":"Articles","previous_headings":"Convert subscripts to linear index","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] integers sub2ind1_(const int& n) {   mat M(n, n, fill::randu);    uword i = sub2ind(size(M), n - 1, n - 1);    return integers({static_cast<int>(i)}); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"symmatu-symmatl","dir":"Articles","previous_headings":"","what":"Generate symmetric matrix from given matrix","title":"Functions of vectors, matrices, and cubes","text":"symmatu() function generates symmetric matrix square matrix reflecting upper triangle lower triangle. symmatl() function generates symmetric matrix square matrix reflecting lower triangle upper triangle. complex matrix, reflection uses complex conjugate elements. disable complex conjugate, set do_conj false. non-square, error thrown. Usage:","code":"symmatu(A) symmatu(A, do_conj)  symmatl(A) symmatl(A, do_conj)"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-67","dir":"Articles","previous_headings":"Generate symmetric matrix from given matrix","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] doubles_matrix<> symmatu1_(const int& n) {   mat A(n, n, fill::randu);   mat B = symmatu(A);   return as_doubles_matrix(B); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"trace","dir":"Articles","previous_headings":"","what":"Sum of diagonal elements","title":"Functions of vectors, matrices, and cubes","text":"trace() function computes sum elements main diagonal matrix. input matrix square, error thrown. Usage:","code":"trace(X)"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-68","dir":"Articles","previous_headings":"Sum of diagonal elements","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] doubles trace1_(const int& n) {   mat A(n, n, fill::randu);   return doubles({trace(A)}); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"trans-strans","dir":"Articles","previous_headings":"","what":"Transpose of matrix","title":"Functions of vectors, matrices, and cubes","text":"trans() function transposes matrix. real matrix, trans() provides transposed copy matrix. complex matrix, trans() provides Hermitian (conjugate) transposed copy, signs imaginary components flipped. strans() function provides simple transposed copy, signs imaginary components flipped. Usage:","code":"trans(A) strans(A)"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-69","dir":"Articles","previous_headings":"Transpose of matrix","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] list trans1_(const int& n) {   mat A(n, n, fill::randu);      mat B = trans(A);   mat C = A.t();  // same as trans(A)    writable::list res(2);    res[0] = as_doubles_matrix(A);   res[1] = as_doubles_matrix(C);    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"trapz","dir":"Articles","previous_headings":"","what":"Trapezoidal numerical integration","title":"Functions of vectors, matrices, and cubes","text":"trapz() function computes trapezoidal integral vector Y respect spacing vector X. optional dim argument specifies dimension along compute trapezoidal integral, dim = 0 computing integral along columns dim = 1 computing integral along rows. Usage:","code":"trapz(X, Y) trapz(X, Y, dim)  trapz(Y) trapz(Y, dim)"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-70","dir":"Articles","previous_headings":"Trapezoidal numerical integration","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] doubles_matrix<> trapz1_(n) {   vec X = linspace<vec>(0, datum::pi, n);   vec Y = sin(X);      mat Z = trapz(X,Y);    return as_doubles_matrix(Z); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"trimatu-trimatl","dir":"Articles","previous_headings":"","what":"Copy upper/lower triangular part","title":"Functions of vectors, matrices, and cubes","text":"trimatu() function creates new matrix copying upper triangular part square matrix setting remaining elements zero. trimatl() function creates new matrix copying lower triangular part square matrix setting remaining elements zero. optional k argument specifies diagonal (k = 0 default, sets main diagonal). k > 0, k-th upper-diagonal used (main diagonal, towards top-right corner). k < 0, k-th lower-diagonal used (main diagonal, towards bottom-left corner). Usage:","code":"trimatu(A) trimatu(A, k)  trimatl(A) trimatl(A, k)"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-71","dir":"Articles","previous_headings":"Copy upper/lower triangular part","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] doubles_matrix<> trimatu1_(const int& n) {   mat A(n, n, fill::randu);   mat B = trimatu(A);   return as_doubles_matrix(B); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"trimatu_ind-trimatl_ind","dir":"Articles","previous_headings":"","what":"Obtain indices of upper/lower triangular part","title":"Functions of vectors, matrices, and cubes","text":"trimatu_ind() function returns column vector containing indices elements form upper triangular part matrix . trimatl_ind() function returns column vector containing indices elements form lower triangular part matrix . optional k argument specifies diagonal (k = 0 default, sets main diagonal). k > 0, k-th upper-diagonal used (main diagonal, towards top-right corner). k < 0, k-th lower-diagonal used (main diagonal, towards bottom-left corner). Usage:","code":"trimatu_ind(size(A)) trimatu_ind(size(A), k)  trimatl_ind(size(A)) trimatl_ind(size(A), k)"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-72","dir":"Articles","previous_headings":"Obtain indices of upper/lower triangular part","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] integers trimatu_ind1_(const int& n) {   mat A(n, n, fill::randu);   uvec B = trimatu_ind(size(A));   return as_integers(B); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"unique","dir":"Articles","previous_headings":"","what":"Return unique elements","title":"Functions of vectors, matrices, and cubes","text":"unique() function returns unique elements vector matrix , sorted ascending order. vector, output also vector orientation (row column) . matrix, output always column vector. Usage:","code":"unique(A)"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-73","dir":"Articles","previous_headings":"Return unique elements","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] doubles unique1_(const int& n) {   mat A(n, n, fill::randu);   A(0, 0) = A(1, 1)   vec B = unique(A);   return as_doubles(B); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"vecnorm","dir":"Articles","previous_headings":"","what":"Obtain vector norm of each row or column of a matrix","title":"Functions of vectors, matrices, and cubes","text":"vecnorm() function computes p-norm column vector (dim = 0) row vector (dim = 1) matrix X. optional p argument specifies norm compute, p = 2 (default) computing 2-norm, p = 1 computing 1-norm, p = \"inf\" computing maximum norm, p = \"-inf\" computing minimum quasi-norm. Usage:","code":"vecnorm(X) vecnorm(X, p) vecnorm(X, p, dim)"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-74","dir":"Articles","previous_headings":"Obtain vector norm of each row or column of a matrix","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] list vecnorm1_(const int& n) {   mat A(n, n, fill::randu);    colvec a = vecnorm(A, 2).t();   colvec b = vecnorm(A, \"inf\", 1);    writable::list res(2);   res[0] = as_doubles(a);   res[1] = as_doubles(b);    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"vectorise","dir":"Articles","previous_headings":"","what":"Flatten matrix into vector","title":"Functions of vectors, matrices, and cubes","text":"vectorise() function generates flattened version matrix M cube Q. optional dim argument specifies dimension along flatten matrix, dim = 0 flattening column-wise (default) dim = 1 flattening row-wise. Usage:","code":"vectorise(M) vectorise(M, dim)  vectorise(Q)"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-75","dir":"Articles","previous_headings":"Flatten matrix into vector","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] doubles vectorise1_(const int& n) {   mat A(n, n, fill::randu);   vec B = vectorise(A);   return as_doubles(B); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"misc-functions","dir":"Articles","previous_headings":"","what":"Miscellaneous element-wise functions: exp, log, sqrt, round, sign, and others","title":"Functions of vectors, matrices, and cubes","text":"Miscellaneous element-wise functions include:","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"caveats-6","dir":"Articles","previous_headings":"Miscellaneous element-wise functions: exp, log, sqrt, round, sign, and others","what":"Caveats","title":"Functions of vectors, matrices, and cubes","text":"functions applied element-wise, element treated independently. expmat(), logmat(), sqrtmat(), powmat() take account matrix structure.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-76","dir":"Articles","previous_headings":"Miscellaneous element-wise functions: exp, log, sqrt, round, sign, and others","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] list misc1_(const int& n) {   mat A(n, n, fill::randu);   mat B = exp(A);   mat C = log(A);   mat D = sqrt(A);   mat E = round(A);   mat F = sign(A);    writable::list res(6);   res[0] = as_doubles_matrix(A);   res[1] = as_doubles_matrix(B);   res[2] = as_doubles_matrix(C);   res[3] = as_doubles_matrix(D);   res[4] = as_doubles_matrix(E);   res[5] = as_doubles_matrix(F);    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"trig-functions","dir":"Articles","previous_headings":"","what":"Trigonometric element-wise functions: cos, sin, tan, and others","title":"Functions of vectors, matrices, and cubes","text":"Trigonometric element-wise functions include:","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"caveats-7","dir":"Articles","previous_headings":"Trigonometric element-wise functions: cos, sin, tan, and others","what":"Caveats","title":"Functions of vectors, matrices, and cubes","text":"functions applied element-wise, element treated independently.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/functions-of-vector-matrices-cubes.html","id":"examples-77","dir":"Articles","previous_headings":"Trigonometric element-wise functions: cos, sin, tan, and others","what":"Examples","title":"Functions of vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] list trig1_(const int& n) {   mat A(n, n, fill::randu);   mat B = cos(A);   mat C = sin(A);   mat D = tan(A);   mat E = atan2(C, B);   mat F = hypot(B, C);    writable::list res(6);   res[0] = as_doubles_matrix(A);   res[1] = as_doubles_matrix(B);   res[2] = as_doubles_matrix(C);   res[3] = as_doubles_matrix(D);   res[4] = as_doubles_matrix(E);   res[5] = as_doubles_matrix(F);    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/generated-vectors-matrices-cubes.html","id":"linspace","dir":"Articles","previous_headings":"","what":"Generate vector with linearly spaced elements","title":"Generated vectors, matrices, and cubes","text":"linspace() function generates vector linearly spaced values start end (includes end). arguments can start, end start, end, N, N optional indicates number elements vector (N 100 default). usage :","code":"vec v = linspace(start, end, N) vector_type v = linspace<vector_type>(start, end, N)"},{"path":"https://pacha.dev/cpp11armadillo/articles/generated-vectors-matrices-cubes.html","id":"examples","dir":"Articles","previous_headings":"Generate vector with linearly spaced elements","what":"Examples","title":"Generated vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] doubles linspace1_(const int& n) {   vec a = linspace(1, 2, n);   rowvec b = linspace<rowvec>(3, 4, n);    vec res = a + b.t();    return as_doubles(res); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/generated-vectors-matrices-cubes.html","id":"caveat","dir":"Articles","previous_headings":"Generate vector with linearly spaced elements","what":"Caveat","title":"Generated vectors, matrices, and cubes","text":"N = 1, generated vector single element equal end.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/generated-vectors-matrices-cubes.html","id":"logspace","dir":"Articles","previous_headings":"","what":"Generate vector with logarithmically spaced elements","title":"Generated vectors, matrices, and cubes","text":"logspace() function generates vector logarithmically spaced values 10^start 10^end (includes 10^end). arguments can start, end start, end, N, N optional indicates number elements vector (N 50 default). usage :","code":"vec v = logspace(start, end, N) vector_type v = logspace<vector_type>(start, end, N)"},{"path":"https://pacha.dev/cpp11armadillo/articles/generated-vectors-matrices-cubes.html","id":"examples-1","dir":"Articles","previous_headings":"Generate vector with logarithmically spaced elements","what":"Examples","title":"Generated vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] doubles logspace1_(const int& n) {   vec a = logspace(1, 2, n);   rowvec b = logspace<rowvec>(3, 4, n);    vec res = a + b.t();    return as_doubles(res); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/generated-vectors-matrices-cubes.html","id":"regspace","dir":"Articles","previous_headings":"","what":"Generate vector with regularly spaced elements","title":"Generated vectors, matrices, and cubes","text":"regspace() function generates vector regularly spaced values start, start + delta, start + 2*delta, ..., start + M * delta M M = floor((end - start) / delta). arguments can start, end start, delta, end, delta optional (delta = 1 start <= end delta = -1 start > end default). usage : output vector empty following conditions met: start < end delta < 0 start > end delta > 0 delta = 0","code":"vec v = regspace(start, end) vec v = regspace(start, delta, end) vector_type v = regspace<vector_type>(start, end) vector_type v = regspace<vector_type>(start, delta, end)"},{"path":"https://pacha.dev/cpp11armadillo/articles/generated-vectors-matrices-cubes.html","id":"examples-2","dir":"Articles","previous_headings":"Generate vector with regularly spaced elements","what":"Examples","title":"Generated vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] doubles regspace1_(const double& delta) {   vec a = regspace(1, delta, 2);   rowvec b = regspace<rowvec>(3, delta, 4);    vec res = a + b.t();    return as_doubles(res); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/generated-vectors-matrices-cubes.html","id":"caveats","dir":"Articles","previous_headings":"Generate vector with regularly spaced elements","what":"Caveats","title":"Generated vectors, matrices, and cubes","text":"different Matlab/Octave. use regspace() specify ranges contiguous submatrix views, use span() instead.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/generated-vectors-matrices-cubes.html","id":"randperm","dir":"Articles","previous_headings":"","what":"Generate vector with random permutation of a sequence of integers","title":"Generated vectors, matrices, and cubes","text":"randperm() function generates vector permutation integers 0 N-1. argument can empty, N, N, M, N (N = 10 default) range integers M (M = N default) length output. usage :","code":"uvec v = randperm(N) uvec v = randperm(N, M)"},{"path":"https://pacha.dev/cpp11armadillo/articles/generated-vectors-matrices-cubes.html","id":"examples-3","dir":"Articles","previous_headings":"Generate vector with random permutation of a sequence of integers","what":"Examples","title":"Generated vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] integers randperm1_(const int& n, const int& m) {   uvec a = randperm(n);   uvec b = randperm(n, m);    uvec res = a + b;    return as_integers(res); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/generated-vectors-matrices-cubes.html","id":"eye","dir":"Articles","previous_headings":"","what":"Generate identity matrix","title":"Generated vectors, matrices, and cubes","text":"eye() function generates matrix size n x m. argument can n_rows, n_cols size(X). n_rows = n_cols, output identity matrix. usage :","code":"mat X = eye(n_rows, n_cols) matrix_type X = eye<matrix_type>(n_rows, n_cols)  matrix_type X = eye<matrix_type>(size(X))"},{"path":"https://pacha.dev/cpp11armadillo/articles/generated-vectors-matrices-cubes.html","id":"examples-4","dir":"Articles","previous_headings":"Generate identity matrix","what":"Examples","title":"Generated vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] doubles_matrix<> eye1_(const int& n) {   mat A = eye(5,5);  // or:  mat A(5,5,fill::eye);    fmat B = 123.0 * eye<fmat>(5,5);  cx_mat C = eye<cx_mat>( size(B) );    return as_doubles(res); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/generated-vectors-matrices-cubes.html","id":"ones","dir":"Articles","previous_headings":"","what":"Generate object filled with ones","title":"Generated vectors, matrices, and cubes","text":"ones() function generates vector, matrix cube. arguments can n_elem, n_rows, n_cols, n_rows, n_cols, n_slices, size(X). usage :","code":"vector_type v = ones<vector_type>(n_elem) matrix_type X = ones<matrix_type>(n_rows, n_cols) matrix_type Y = ones<matrix_type>(size(X)) cube_type Q = ones<cube_type>(n_rows, n_cols, n_slices) cube_type R = ones<cube_type>(size(Q))"},{"path":"https://pacha.dev/cpp11armadillo/articles/generated-vectors-matrices-cubes.html","id":"examples-5","dir":"Articles","previous_headings":"Generate object filled with ones","what":"Examples","title":"Generated vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] doubles_matrix<> ones2_(const int& n) {   vec v = ones(n);  // or: vec v(10, fill::ones);   uvec u = ones<uvec>(n);   rowvec r = ones<rowvec>(n);    mat A = ones(n, n);  // or: mat A(n, n, fill::ones);   fmat B = ones<fmat>(n, n);    cube Q = ones(n, n, n + 1);  // or: cube Q(n, n, n + 1, fill::ones);    mat res = diagmat(v) + diagmat(conv_to<vec>::from(u)) + diagmat(r) + A + B +     Q.slice(0);    return as_doubles_matrix(res); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/generated-vectors-matrices-cubes.html","id":"caveat-1","dir":"Articles","previous_headings":"Generate object filled with ones","what":"Caveat","title":"Generated vectors, matrices, and cubes","text":"Specifying fill::ones object construction compact. example, mat (5, 6, fill::ones).","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/generated-vectors-matrices-cubes.html","id":"zeros","dir":"Articles","previous_headings":"","what":"Generate object filled with zeros","title":"Generated vectors, matrices, and cubes","text":"zeros() function generates vector, matrix cube. arguments can n_elem, n_rows, n_cols, n_rows, n_cols, n_slices, size(X). usage :","code":"vector_type v = zeros<vector_type>(n_elem) matrix_type X = zeros<matrix_type>(n_rows, n_cols) matrix_type Y = zeros<matrix_type>(size(X)) cube_type Q = zeros<cube_type>(n_rows, n_cols, n_slices) cube_type R = zeros<cube_type>(size(Q))"},{"path":"https://pacha.dev/cpp11armadillo/articles/generated-vectors-matrices-cubes.html","id":"examples-6","dir":"Articles","previous_headings":"Generate object filled with zeros","what":"Examples","title":"Generated vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] doubles_matrix<> zeros2_(const int& n) {   vec v = zeros(n);  // or: vec v(10, fill::zeros);   uvec u = zeros<uvec>(n);   rowvec r = zeros<rowvec>(n);    mat A = zeros(n, n);  // or: mat A(n, n, fill::zeros);   fmat B = zeros<fmat>(n, n);    cube Q = zeros(n, n, n + 1);  // or: cube Q(n, n, n + 1, fill::zeros);    mat res = diagmat(v) + diagmat(conv_to<vec>::from(u)) + diagmat(r) + A + B +     Q.slice(0);    return as_doubles_matrix(res); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/generated-vectors-matrices-cubes.html","id":"caveat-2","dir":"Articles","previous_headings":"Generate object filled with zeros","what":"Caveat","title":"Generated vectors, matrices, and cubes","text":"Specifying fill::zeros object construction compact. example, mat (5, 6, fill::zeros).","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/generated-vectors-matrices-cubes.html","id":"randu","dir":"Articles","previous_headings":"","what":"Generate object with random values from a uniform distribution","title":"Generated vectors, matrices, and cubes","text":"randu() function generates vector, matrix cube elements set random floating point values uniformly distributed [,b] interval. arguments can distr_param(,b), n_elem, n_elem, distr_param(,b), n_rows, n_cols, n_rows, n_cols, distr_param(,b), n_rows, n_cols, n_slices, n_rows, n_cols, n_slices, distr_param(,b), size(X), size(X), distr_param(,b). usage :","code":"// the scalar type can be: float, double, cx_float, or cx_double  scalar_type s = randu<scalar_type>() scalar_type s = randu<scalar_type>(distr_param(a,b))  vector_type v = randu<vector_type>(n_elem) vector_type v = randu<vector_type>(n_elem, distr_param(a,b))  matrix_type X = randu<matrix_type>(n_rows, n_cols) matrix_type X = randu<matrix_type>(n_rows, n_cols, distr_param(a,b))  cube_type Q = randu<cube_type>(n_rows, n_cols, n_slices) cube_type Q = randu<cube_type>(n_rows, n_cols, n_slices, distr_param(a,b))"},{"path":"https://pacha.dev/cpp11armadillo/articles/generated-vectors-matrices-cubes.html","id":"examples-7","dir":"Articles","previous_headings":"Generate object with random values from a uniform distribution","what":"Examples","title":"Generated vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] doubles_matrix<> randu3_(const int& n) {   double a = randu();   double b = randu(distr_param(10, 20));    vec v1 = randu(n);  // or vec v1(n, fill::randu);   vec v2 = randu(n, distr_param(10, 20));    rowvec r1 = randu<rowvec>(n);   rowvec r2 = randu<rowvec>(n, distr_param(10, 20));    mat A1 = randu(n, n);  // or mat A1(n, n, fill::randu);   mat A2 = randu(n, n, distr_param(10, 20));    fmat B1 = randu<fmat>(n, n);   fmat B2 = randu<fmat>(n, n, distr_param(10, 20));    mat res = diagmat(v1) + diagmat(v2) + diagmat(r1) + diagmat(r2) + A1 + A2 +     B1 + B2;    res.each_col([a](vec& x) { x += a; });   res.each_row([b](rowvec& y) { y /= b; });    return as_doubles_matrix(res); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/generated-vectors-matrices-cubes.html","id":"caveat-3","dir":"Articles","previous_headings":"Generate object with random values from a uniform distribution","what":"Caveat","title":"Generated vectors, matrices, and cubes","text":"generate matrix random integer values instead floating point values, use randi() instead.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/generated-vectors-matrices-cubes.html","id":"randn","dir":"Articles","previous_headings":"","what":"Generate object with random values from a normal/gaussian distribution","title":"Generated vectors, matrices, and cubes","text":"randn() function generates vector, matrix cube elements set random floating point values normally distributed mean 0 standard deviation 1. arguments can n_elem, distr_param(mean, stddev), n_elem, n_elem, distr_param(mean, stddev), n_rows, n_cols, n_rows, n_cols, distr_param(mean, stddev), n_rows, n_cols, n_slices, n_rows, n_cols, n_slices, distr_param(mean, stddev), size(X), size(X), distr_param(mean, stddev). usage :","code":"// the scalar type can be: float, double, cx_float, or cx_double  scalar_type s = randn<scalar_type>() scalar_type s = randn<scalar_type>(distr_param(mean, stddev))  vector_type v = randn<vector_type>(n_elem) vector_type v = randn<vector_type>(n_elem, distr_param(mean, stddev))  matrix_type X = randn<matrix_type>(n_rows, n_cols) matrix_type X = randn<matrix_type>(n_rows, n_cols, distr_param(mean, stddev))  cube_type Q = randn<cube_type>(n_rows, n_cols, n_slices) cube_type Q = randn<cube_type>(n_rows, n_cols, n_slices, distr_param(mean, stddev))"},{"path":"https://pacha.dev/cpp11armadillo/articles/generated-vectors-matrices-cubes.html","id":"examples-8","dir":"Articles","previous_headings":"Generate object with random values from a normal/gaussian distribution","what":"Examples","title":"Generated vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] doubles_matrix<> randn3_(const int& n) {   vec v1 = randn(n);  // or vec v1(n, fill::randn);   vec v2 = randn(n, distr_param(10, 20));    rowvec r1 = randn<rowvec>(n);   rowvec r2 = randn<rowvec>(n, distr_param(10, 20));    mat A1 = randn(n, n);  // or mat A1(n, n, fill::randn);   mat A2 = randn(n, n, distr_param(10, 20));    fmat B1 = randn<fmat>(n, n);   fmat B2 = randn<fmat>(n, n, distr_param(10, 20));    mat res = diagmat(v1) + diagmat(v2) + diagmat(r1) + diagmat(r2) + A1 + A2 +     B1 + B2;    return as_doubles_matrix(res); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/generated-vectors-matrices-cubes.html","id":"randg","dir":"Articles","previous_headings":"","what":"Generate object with random values from a gamma distribution","title":"Generated vectors, matrices, and cubes","text":"randg() function generates vector, matrix cube elements set random floating point values gamma distributed shape scale b. arguments can distr_param(, b), n_elem, n_elem, distr_param(, b), n_rows, n_cols, n_rows, n_cols, distr_param(, b), n_rows, n_cols, n_slices, n_rows, n_cols, n_slices, distr_param(, b), size(X), size(X), distr_param(, b). usage :","code":"// the scalar type can be: float, double, cx_float, or cx_double  scalar_type s = randg<scalar_type>() scalar_type s = randg<scalar_type>(distr_param(a, b))  vector_type v = randg<vector_type>(n_elem) vector_type v = randg<vector_type>(n_elem, distr_param(a, b))  matrix_type X = randg<matrix_type>(n_rows, n_cols) matrix_type X = randg<matrix_type>(n_rows, n_cols, distr_param(a, b))  cube_type Q = randg<cube_type>(n_rows, n_cols, n_slices) cube_type Q = randg<cube_type>(n_rows, n_cols, n_slices, distr_param(a, b))"},{"path":"https://pacha.dev/cpp11armadillo/articles/generated-vectors-matrices-cubes.html","id":"examples-9","dir":"Articles","previous_headings":"Generate object with random values from a gamma distribution","what":"Examples","title":"Generated vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] doubles_matrix<> randg3_(const int& n) {   int a = randi();   int b = randi(distr_param(-10, +20));    imat A1 = randi(n, n);   imat A2 = randi(n, n, distr_param(-10, +20));    mat B1 = randi<mat>(n, n);   mat B2 = randi<mat>(n, n, distr_param(-10, +20));    mat res = A1 + A2 + B1 + B2;    res.each_col([a](vec& x) { x *= a; });   res.each_row([b](rowvec& y) { y -= b; });    return as_doubles_matrix(res); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/generated-vectors-matrices-cubes.html","id":"randi","dir":"Articles","previous_headings":"","what":"Generate object with random integer values in specified interval","title":"Generated vectors, matrices, and cubes","text":"randi() function generates vector, matrix cube elements set random integer values uniformly distributed [,b] interval. arguments can distr_param(, b), n_elem, n_elem, distr_param(, b), n_rows, n_cols, n_rows, n_cols, distr_param(, b), n_rows, n_cols, n_slices, n_rows, n_cols, n_slices, distr_param(, b), size(X), size(X), distr_param(, b). default values = 0 b = maximum_int. usage :","code":"scalar_type s = randi<scalar_type>() scalar_type s = randi<scalar_type>(distr_param(a, b))  vector_type v = randi<vector_type>(n_elem) vector_type v = randi<vector_type>(n_elem, distr_param(a, b))  matrix_type X = randi<matrix_type>(n_rows, n_cols) matrix_type X = randi<matrix_type>(n_rows, n_cols, distr_param(a, b))  cube_type Q = randi<cube_type>(n_rows, n_cols, n_slices) cube_type Q = randi<cube_type>(n_rows, n_cols, n_slices, distr_param(a, b))"},{"path":"https://pacha.dev/cpp11armadillo/articles/generated-vectors-matrices-cubes.html","id":"examples-10","dir":"Articles","previous_headings":"Generate object with random integer values in specified interval","what":"Examples","title":"Generated vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] integers_matrix<> randi3_(const int& n) {   uvec v1 = randi(n);  // or uvec v1(n, fill::randi);   uvec v2 = randi(n, distr_param(10, 20));    umat A1 = randi(n, n);  // or umat A1(n, n, fill::randi);   umat A2 = randi(n, n, distr_param(10, 20));    icube Q1 = randi(icube(n, n, n + 1));  // or icube Q1(n, n, n + 1, fill::randi);   icube Q2 = randi(icube(n, n, n + 1), distr_param(10, 20));    mat res = diagmat(conv_to<vec>::from(v1)) + diagmat(conv_to<vec>::from(v2)) +     A1 + A2 + Q1.slice(0) + Q2.slice(0);    return as_integers_matrix(res); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/generated-vectors-matrices-cubes.html","id":"caveat-4","dir":"Articles","previous_headings":"Generate object with random integer values in specified interval","what":"Caveat","title":"Generated vectors, matrices, and cubes","text":"generate matrix random floating point values (e.g., float double) instead integers, use randu() instead.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/generated-vectors-matrices-cubes.html","id":"speye","dir":"Articles","previous_headings":"","what":"Generate sparse identity matrix","title":"Generated vectors, matrices, and cubes","text":"speye() function generates sparse matrix size n x n elements diagonal set 1 remaining elements set 0. argument can n_rows, n_cols size(X). identity matrix generated n_rows = n_cols. usage :","code":"sparse_matrix_type X = speye(n_rows, n_cols) sparse_matrix_type X = speye<sparse_matrix_type>(size(X))"},{"path":"https://pacha.dev/cpp11armadillo/articles/generated-vectors-matrices-cubes.html","id":"examples-11","dir":"Articles","previous_headings":"Generate sparse identity matrix","what":"Examples","title":"Generated vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] doubles_matrix<> speye1_(const int& n) {   sp_mat A = speye<sp_mat>(n, n);   mat B = mat(A);   return as_doubles_matrix(B); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/generated-vectors-matrices-cubes.html","id":"spones","dir":"Articles","previous_headings":"","what":"Generate sparse matrix with non-zero elements set to one","title":"Generated vectors, matrices, and cubes","text":"spones(X) function generates sparse matrix size X non-zero elements set 1.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/generated-vectors-matrices-cubes.html","id":"examples-12","dir":"Articles","previous_headings":"Generate sparse matrix with non-zero elements set to one","what":"Examples","title":"Generated vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] doubles_matrix<> spones1_(const int& n) {   sp_mat A = sprandu<sp_mat>(n, n, 0.1);   sp_mat B = spones(A);   mat C = mat(B);   return as_doubles_matrix(C); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/generated-vectors-matrices-cubes.html","id":"sprandu","dir":"Articles","previous_headings":"","what":"Generate sparse matrix with non-zero elements set to random values from a uniform distribution","title":"Generated vectors, matrices, and cubes","text":"sprandu() function generates sparse matrix size n_rows x n_cols random floating point values uniformly distributed [0,1] interval. arguments can n_rows, n_cols, density size(X), density. usage :","code":"sparse_matrix_type X = sprandu<sparse_matrix_type>(n_rows, n_cols, density) sparse_matrix_type X = sprandu<sparse_matrix_type>(size(X), density)"},{"path":"https://pacha.dev/cpp11armadillo/articles/generated-vectors-matrices-cubes.html","id":"examples-13","dir":"Articles","previous_headings":"Generate sparse matrix with non-zero elements set to random values from a uniform distribution","what":"Examples","title":"Generated vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] doubles_matrix<> sprandu1_(const int& n) {   sp_mat A = sprandu<sp_mat>(n, n, 0.05);   mat B = mat(A);   return as_doubles_matrix(B); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/generated-vectors-matrices-cubes.html","id":"sprandn","dir":"Articles","previous_headings":"","what":"Generate sparse matrix with non-zero elements set to random values from a normal/gaussian distribution","title":"Generated vectors, matrices, and cubes","text":"sprandn() function generates sparse matrix size n_rows x n_cols random floating point values normally distributed mean 0 standard deviation 1. arguments can n_rows, n_cols, density size(X), density. usage :","code":"sparse_matrix_type X = sprandn<sparse_matrix_type>(n_rows, n_cols, density) sparse_matrix_type X = sprandn<sparse_matrix_type>(size(X), density)"},{"path":"https://pacha.dev/cpp11armadillo/articles/generated-vectors-matrices-cubes.html","id":"examples-14","dir":"Articles","previous_headings":"Generate sparse matrix with non-zero elements set to random values from a normal/gaussian distribution","what":"Examples","title":"Generated vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] doubles_matrix<> sprandn1_(const int& n) {   sp_mat A = sprandn<sp_mat>(n, n, 0.05);   mat B = mat(A);   return as_doubles_matrix(B); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/generated-vectors-matrices-cubes.html","id":"toeplitz","dir":"Articles","previous_headings":"","what":"Generate Toeplitz matrix","title":"Generated vectors, matrices, and cubes","text":"toeplitz() function generates toeplitz matrix. arguments can , b, vector determines first column b optional vector determines first row. Alternatively, circ_toeplitz() generates circulant toeplitz matrix.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/generated-vectors-matrices-cubes.html","id":"examples-15","dir":"Articles","previous_headings":"Generate Toeplitz matrix","what":"Examples","title":"Generated vectors, matrices, and cubes","text":"","code":"[[cpp11::register]] doubles_matrix<> toeplitz1_() {   vec a = linspace(1, 5, 5);   vec b = linspace(1, 5, 5);    mat A = toeplitz(a, b);   mat B = circ_toeplitz(a);    return as_doubles_matrix(A + B); }"},{"path":[]},{"path":"https://pacha.dev/cpp11armadillo/articles/linear-model.html","id":"design-matrix-and-response-vector","dir":"Articles","previous_headings":"Linear regression","what":"Design matrix and response vector","title":"Fitting regressions with Armadillo","text":"starting point fit linear regresion R without using lm function create design matrix response vector. design matrix matrix row corresponds observation column corresponds predictor. response vector vector length number observations. example, using mtcars dataset possible create design matrix later estimate linear regression coefficients model: mpgi=β0+β1×weighti+ei \\text{mpg}_i = \\beta_0 + \\beta_1 \\times \\text{weight}_i + e_i β0\\beta_0 β1\\beta_1 estimated, design matrix response vector created follows: Certainly, efficient way create design matrix response vector. model.matrix function can used create design matrix model.response function can used create response vector: advantage using functions handle factor variables easily. example, mtcars dataset factor variable, model.matrix function create one 0/1 column level factor variable.","code":"x <- cbind(1, mtcars$wt) y <- mtcars$mpg  head(x) #>      [,1]  [,2] #> [1,]    1 2.620 #> [2,]    1 2.875 #> [3,]    1 2.320 #> [4,]    1 3.215 #> [5,]    1 3.440 #> [6,]    1 3.460  head(y) #> [1] 21.0 21.0 22.8 21.4 18.7 18.1  dim(x) #> [1] 32  2  length(y) #> [1] 32 x <- model.matrix(mpg ~ wt, data = mtcars) y <- model.response(model.frame(mpg ~ wt, data = mtcars))"},{"path":"https://pacha.dev/cpp11armadillo/articles/linear-model.html","id":"estimating-the-regression-coefficients-in-r","dir":"Articles","previous_headings":"Linear regression","what":"Estimating the regression coefficients in R","title":"Fitting regressions with Armadillo","text":"estimate regression coefficients, solve function can used: can verified coefficients ones estimated lm function: However, lm() function use solve function estimate coefficients. Instead, uses QR decomposition internal functions written C FORTRAN estimate coefficients.","code":"solve(t(x) %*% x) %*% t(x) %*% y #>                  [,1] #> (Intercept) 37.285126 #> wt          -5.344472 lm(mpg ~ wt, data = mtcars)$coefficients #> (Intercept)          wt  #>   37.285126   -5.344472"},{"path":"https://pacha.dev/cpp11armadillo/articles/linear-model.html","id":"estimating-the-regression-coefficients-in-armadillo","dir":"Articles","previous_headings":"Linear regression","what":"Estimating the regression coefficients in Armadillo","title":"Fitting regressions with Armadillo","text":"Using ‘cpp11armadillo’ library, regression coefficients can estimated follows: Verify equivalence:","code":"vec ols_fit(const Mat<double>& X, const Col<double>& Y) {   // QR decomposition   mat Q, R;   qr_econ(Q, R, X);    // Least Squares Problem   vec betas = solve(trimatu(R), Q.t() * Y);    return betas; }  [[cpp11::register]] doubles ols_(const doubles_matrix<>& x, const doubles& y) {   mat X = as_Mat(x);   vec Y = as_Col(y);   return as_doubles(ols_fit(X, Y)); } all.equal(ols_(x,y), unname(coef(lm(mpg ~ wt, data = mtcars)))) [1] TRUE"},{"path":[]},{"path":"https://pacha.dev/cpp11armadillo/articles/linear-model.html","id":"design-matrix-and-response-vector-1","dir":"Articles","previous_headings":"Poisson regression","what":"Design matrix and response vector","title":"Fitting regressions with Armadillo","text":"starting point fit Poisson regresion R without using glm function create design matrix response vector. example, using mtcars dataset possible create design matrix later estimate Poisson regression coefficients model: log(mpgi)=β0+β1×weighti+ei \\log(\\text{mpg}_i) = \\beta_0 + \\beta_1 \\times \\text{weight}_i + e_i β0\\beta_0 β1\\beta_1 estimated, design matrix response vector created follows:","code":"x <- model.matrix(mpg ~ wt, data = mtcars) y <- log(mtcars$mpg)"},{"path":"https://pacha.dev/cpp11armadillo/articles/linear-model.html","id":"estimating-the-regression-coefficients-in-r-1","dir":"Articles","previous_headings":"Poisson regression","what":"Estimating the regression coefficients in R","title":"Fitting regressions with Armadillo","text":"Poisson regression coefficients can estimated using glm function:","code":"glm(mpg ~ wt, data = mtcars, family = poisson(link = \"log\"))$coefficients #> (Intercept)          wt  #>   3.8730232  -0.2823192"},{"path":"https://pacha.dev/cpp11armadillo/articles/linear-model.html","id":"estimating-the-regression-coefficients-in-armadillo-1","dir":"Articles","previous_headings":"Poisson regression","what":"Estimating the regression coefficients in Armadillo","title":"Fitting regressions with Armadillo","text":"Estimating Poisson regression complex estimating linear regression. Poisson regression coefficients estimated using iterative algorithm known Iteratively Reweighted Least Squares (IRLS) algorithm. However, IRLS algorithm can simplified using weighted least squares method, repeats linear regression transformed data using Poisson link convergence. Using ‘cpp11armadillo’ library, Poisson regression coefficients can estimated via IRLS follows: Verify equivalence: Note: glm() function shows warnings expects integer values response variable. However, Poisson regression can estimated non-integer values response variable quasipoisson() family can used suppress warnings.","code":"vec ols_weighted_fit(const Mat<double>& X, const Col<double>& Y, const Col<double>& W) {   // Create a diagonal matrix from the weight vector   mat W_diag = diagmat(W);    // Weighted least squares problem   mat XTWX = X.t() * W_diag * X;   vec XTWY = X.t() * W_diag * Y;    // Solve the system   vec betas = solve(XTWX, XTWY);    return betas; }  vec poisson_fit(const Mat<double>& X, const Col<double>& Y) {   // Data transformation   vec MU = Y + 0.1;  // Initial guess for MU   vec ETA = log(MU);   vec Z = ETA + (Y - MU) / MU;    // Iterate with initial values for the difference and the sum of sq residuals   double dif = 1;   double rss = 1;   double tol = 1e-10;    vec W;   vec betas, res;   double rss2;    while (abs(dif) > tol) {     W = MU;  // Weights are the current estimates of MU     betas = ols_weighted_fit(X, Z, W);     ETA = X * betas;     MU = exp(ETA);     Z = ETA + (Y - MU) / MU;     res = Y - MU;     rss2 = sum(res % res);     dif = rss2 - rss;     rss = rss2;   }    return betas; }  [[cpp11::register]] doubles poisson_(const doubles_matrix<>& x, const doubles& y) {   mat X = as_Mat(x);   vec Y = as_Col(y);   return as_doubles(poisson_fit(X, Y)); } all.equal(poisson_(x,y), unname(coef(glm(mpg ~ wt, data = mtcars, family = poisson())))) [1] TRUE"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"dense-matrix-class","dir":"Articles","previous_headings":"","what":"Dense matrix class","title":"Matrix, vector, cube and field classes","text":"Mat<type>, mat cx_mat classes dense matrices, elements stored column-major ordering (e.g., column column). root matrix class Mat<type>, type one : float double std::complex<float> std::complex<double> short int long unsigned short unsigned int unsigned long convenience following typedefs defined: mat = Mat<double> dmat = Mat<double> fmat = Mat<float> cx_mat = Mat<cx_double> (cx_double shortcut std::complex<double>) cx_dmat = Mat<cx_double> cx_fmat = Mat<cx_float> (cx_float shortcut std::complex<float>) umat = Mat<uword> (uword shortcut unsigned int) imat = Mat<sword> (sword shortcut signed int) mat type used convenience, possible use matrix types (e.g, fmat, cx_mat) instead. Matrix types integer elements (umat imat) hold special values NaN Inf. Functions use LAPACK (generally matrix decompositions) valid following matrix types: mat, dmat, fmat, cx_mat, cx_dmat, cx_fmat.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"constructors","dir":"Articles","previous_headings":"Dense matrix class","what":"Constructors","title":"Matrix, vector, cube and field classes","text":"mat() mat(n_rows, n_cols) mat(n_rows, n_cols, fill_form) (elements initialised according fill_form) mat(size(X)) mat(size(X), fill_form) (elements initialised according fill_form) mat(mat) mat(vec) mat(rowvec) mat(initializer_list) mat(string) mat(std::vector) (treated column vector) mat(sp_mat) (converting sparse matrix dense matrix) cx_mat(mat,mat) (constructing complex matrix two real matrices) elements can explicitly initialised construction specifying fill_form, one : fill::zeros set elements 0 (default cpp11armadillo) fill::ones set elements 1 fill::eye set elements main diagonal 1 -diagonal elements 0 fill::randu set elements random values uniform distribution [0,1] interval fill::randn set elements random values normal distribution zero mean unit variance fill::value(scalar) set elements specified scalar fill::none initialise elements (matrix may garbage values) mat(string) constructor, format elements separated spaces, rows denoted semicolons. example, 2x2 identity matrix can created using \"1 0; 0 1\". Note string based initialisation slower directly setting elements using element initialisation. instance mat automatically allocates releases internal memory. internally allocated memory used instance mat automatically released soon instance goes scope. example, instance mat declared inside function, automatically destroyed end function. forcefully release memory point, use .reset(). Note normal use required.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"advanced-constructors","dir":"Articles","previous_headings":"Dense matrix class","what":"Advanced constructors","title":"Matrix, vector, cube and field classes","text":"Create matrix using data writable auxiliary (external) memory, ptr_aux_mem pointer memory. default matrix allocates memory copies data auxiliary memory (safety). However, copy_aux_mem set false, matrix instead directly use auxiliary memory (e.g., copying). faster, can dangerous unless know . strict set false, matrix use auxiliary memory size change aliasing event. strict set true, matrix bound auxiliary memory lifetime. number elements matrix changed. Create matrix copying data read-auxiliary memory, ptr_aux_mem pointer memory Create fixed size matrix, size specified via template arguments. Memory matrix reserved compile time. generally faster dynamic memory allocation, size matrix changed afterwards (directly indirectly). convenience, several pre-defined typedefs matrix type (types : umat, imat, fmat, mat, cx_fmat, cx_mat). typedefs specify square matrix size, ranging 2x2 9x9. typedefs defined appending two digit form size matrix type. Examples: mat33 equivalent mat::fixed<3,3>, cx_mat44 equivalent cx_mat::fixed<4,4>. Create fixed size matrix, elements explicitly initialised according fill_form. Create fixed size matrix, size specified via template arguments; data copied auxiliary memory, ptr_aux_mem pointer memory.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples","dir":"Articles","previous_headings":"Dense matrix class","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"set.seed(123) a <- matrix(runif(25), nrow = 5, ncol = 5) [[cpp11::register]] doubles_matrix<> matrix1_(const doubles_matrix<>& a) {   mat A = as_Mat(a); // convert from R to C++    double x = A(0, 0);  // access an element on row 1, column 1   A = A + x; // scalar addition          mat B = A + A; // matrix addition   mat C = A * B; // matrix multiplication   mat D = A % B; // element-wise matrix multiplication    mat res = B + C + D;    return as_doubles_matrix(res);  // convert from C++ to R }        [[cpp11::register]] list matrix2_(const doubles_matrix<>& a) {   mat A = as_Mat(a);   mat B = A + A;    cx_mat X(A,B); // construct a complex matrix out of two real matrices    B.zeros();                       // set all elements to zero   B.set_size(A.n_rows, A.n_cols);  // resize the matrix   B.ones(5, 6);                    // same as mat B(5, 6, fill::ones)            mat::fixed<5,6> F; // fixed size matrix          double aux_mem[24]; // auxiliary memory   mat H(&aux_mem[0], 4, 6, false);  // use auxiliary memory    X = X + F.submat(0, 0, 4, 4) + H(1, 2)    Mat<double> res_real = real(X);   Mat<double> res_imag = imag(X);    writable::list res;   res.push_back({\"real\"_nm = as_doubles_matrix(res_real)});   res.push_back({\"imag\"_nm = as_doubles_matrix(res_imag)});    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"column-vector-class","dir":"Articles","previous_headings":"","what":"Column vector class","title":"Matrix, vector, cube and field classes","text":"Col<type>, vec cx_vec classes column vectors (dense matrices one column). Col<type> class derived Mat<type> class inherits member functions. convenience following typedefs defined: vec = colvec = Col<double> dvec = dcolvec = Col<double> fvec = fcolvec = Col<float> cx_vec = cx_colvec = Col<[cx_double](#cx_double)> cx_dvec = cx_dcolvec = Col<[cx_double](#cx_double)> cx_fvec = cx_fcolvec = Col<[cx_float](#cx_double)> uvec = ucolvec = Col<[uword](#uword)> ivec = icolvec = Col<[sword](#uword)> vec colvec types meaning used interchangeably. types vec colvec used convenience. possible use column vector types instead (e.g., fvec fcolvec). Functions take mat input can generally also take Col input. Main exceptions functions require square matrices.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"constructors-1","dir":"Articles","previous_headings":"Column vector class","what":"Constructors","title":"Matrix, vector, cube and field classes","text":"vec() vec(_n_elem_) vec(_n_elem, fill_form) (elements initialised according fill_form) vec(size(X)) vec(size(X), fill_form) (elements initialised according fill_form) vec(vec) vec(mat) (std::logic_error exception thrown given matrix one column) vec(initializer_list) vec(string) (elements separated spaces) vec(std::vector) cx_vec(vec,vec) (constructing complex vector two real vectors)","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"advanced-constructors-1","dir":"Articles","previous_headings":"Column vector class","what":"Advanced constructors","title":"Matrix, vector, cube and field classes","text":"Create column vector using data writable auxiliary (external) memory, ptr_aux_mem pointer memory. default vector allocates memory copies data auxiliary memory (safety). However, copy_aux_mem set false, vector instead directly use auxiliary memory (e.g., copying). faster, can dangerous unless know . strict parameter comes effect copy_aux_mem set false (e.g., vector directly using auxiliary memory). strict set false, vector use auxiliary memory size change aliasing event. strict set true, vector bound auxiliary memory lifetime. number elements vector changed. vec(const ptr_aux_mem, number_of_elements): Create column vector copying data read-auxiliary memory, ptr_aux_mem pointer memory. Create fixed size column vector, size specified via template argument. Memory vector reserved compile time. generally faster dynamic memory allocation, size vector changed afterwards (directly indirectly). convenience, several pre-defined typedefs vector type (types : uvec, ivec, fvec, vec, cx_fvec, cx_vec well corresponding colvec versions). pre-defined typedefs specify vector sizes ranging 2 9. typedefs defined appending single digit form size vector type. Examples: vec3 equivalent vec::fixed<3>, cx_vec4 equivalent cx_vec::fixed<4>. vec::fixed<number_of_elements>(fill_form): Create fixed size column vector, elements explicitly initialised according fill_form. vec::fixed<number_of_elements>(const ptr_aux_mem): Create fixed size column vector, size specified via template argument. data copied auxiliary memory, ptr_aux_mem pointer memory.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-1","dir":"Articles","previous_headings":"Column vector class","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"set.seed(123) x <- runif(10) y <- rep(1, 10) [[cpp11::register]] doubles column1_(const doubles& x, const doubles& y) {   vec X = as_Col(x); // convert from R to C++   vec Y = as_Col(y);    mat A(10, 10, fill::randu);   vec Z = A.col(5); // extract a column vector    Z = Z + Y + X;    return as_doubles(Z); // convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"row-vector-class","dir":"Articles","previous_headings":"","what":"Row vector class","title":"Matrix, vector, cube and field classes","text":"Row<type>, rowvec cx_rowvec classes row vectors (dense matrices one row). template Row<type> class derived Mat<type> class inherits member functions. convenience following typedefs defined: rowvec = Row<double> drowvec = Row<double> frowvec = Row<float> cx_rowvec = Row<cx_double> cx_drowvec = Row<cx_double> cx_frowvec = Row<cx_float> urowvec = Row<uword> irowvec = Row<sword> rowvec type used convenience. possible use row vector types instead (e.g., frowvec). Functions take mat input can generally also take Row input. Main exceptions functions require square matrices.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"constructors-2","dir":"Articles","previous_headings":"Row vector class","what":"Constructors","title":"Matrix, vector, cube and field classes","text":"rowvec() rowvec(n_elem) rowvec(n_elem, fill_form) (elements initialised according fill_form) rowvec(size(X)) rowvec(size(X), fill_form) (elements initialised according fill_form) rowvec(rowvec) rowvec(mat) (std::logic_error exception thrown given matrix one row) rowvec(initializer_list) rowvec(string) (elements separated spaces) rowvec(std::vector) cx_rowvec(rowvec,rowvec) (constructing complex row vector two real row vectors)","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"advanced-constructors-2","dir":"Articles","previous_headings":"Row vector class","what":"Advanced constructors","title":"Matrix, vector, cube and field classes","text":"Create row vector using data writable auxiliary (external) memory, ptr_aux_mem pointer memory. default vector allocates memory copies data auxiliary memory (safety). However, copy_aux_mem set false, vector instead directly use auxiliary memory (e.g., copying); faster, can dangerous unless know . strict set false, vector use auxiliary memory size change aliasing event. strict set true, vector bound auxiliary memory lifetime. number elements vector changed. Create row vector copying data read-auxiliary memory, ptr_aux_mem pointer memory. Create fixed size row vector, size specified via template argument. Memory vector reserved compile time. generally faster dynamic memory allocation, size vector changed afterwards (directly indirectly). convenience, several pre-defined typedefs vector type (types : urowvec, irowvec, frowvec, rowvec, cx_frowvec, cx_rowvec). pre-defined typedefs specify vector sizes ranging 2 9. typedefs defined appending single digit form size vector type. Examples: rowvec3 equivalent rowvec::fixed<3>, cx_rowvec4 equivalent cx_rowvec::fixed<4>. Create fixed size row vector, elements explicitly initialised according fill_form. Create fixed size row vector, size specified via template argument. data copied auxiliary memory, ptr_aux_mem pointer memory.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-2","dir":"Articles","previous_headings":"Row vector class","what":"Examples","title":"Matrix, vector, cube and field classes","text":"⚠️Important⚠️: ‘cpp11armadillo’ opinionated package follows notation Econometrics Bruce E. Hansen. intentionally exports/imports matrices column vectors. can use row vectors functions, communication R C++ accept row vectors unless transpose convert matrices.","code":"set.seed(123) x <- runif(10) y <- rep(1, 10) [[cpp11::register]] doubles row1_(const doubles& x, const doubles& y) {   vec X = as_Col(x);  // convert from R to C++   vec Y = as_Col(y);    mat A(10, 10, fill::randu);      rowvec Z = A.row(5);  // extract a row vector   Z = Z + Y.t() + X.t(); // transpose Y and X to be able to sum    vec res = Z.t();      return as_doubles(res);  // convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"cube-class","dir":"Articles","previous_headings":"","what":"Cube class","title":"Matrix, vector, cube and field classes","text":"Cube<type>, cube cx_cube classes cubes, also known quasi 3rd order tensors “3D matrices”. data stored set slices (matrices) stored contiguously within memory. Within slice, elements stored column-major ordering (e.g., column column) root cube class Cube<type>, type one : float, double, std::complex<float>, std::complex<double>, short, int, long unsigned versions short, int, long. convenience following typedefs defined: cube = Cube<double> dcube = Cube<double> fcube = Cube<float> cx_cube = Cube<cx_double> cx_dcube = Cube<cx_double> cx_fcube = Cube<cx_float> ucube = Cube<uword> icube = Cube<sword> cube type used convenience. possible use types instead (e.g., fcube). cube slice can interpreted matrix, hence functions take Mat input can generally also take cube slices input.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"constructors-3","dir":"Articles","previous_headings":"Cube class","what":"Constructors","title":"Matrix, vector, cube and field classes","text":"cube() cube(n_rows, n_cols, n_slices_) cube(n_rows, n_cols, n_slices, fill_form) (elements initialised according fill_form) cube(size(X)) cube(size(X), fill_form) (elements initialised according fill_form) cube(cube) cx_cube(cube, cube) (constructing complex cube two real cubes) elements can explicitly initialised construction specifying fill_form, one : fill::zeros: set elements 0 (default cpp11armadillo) fill::ones: set elements 1 fill::randu: set elements random values uniform distribution [0,1] interval fill::randn: set elements random values normal distribution zero mean unit variance fill::value(scalar): set elements specified scalar fill::none: initialise elements (cube may garbage values) instance cube automatically allocates releases internal memory. internally allocated memory used instance cube automatically released soon instance goes scope. example, instance cube declared inside function, automatically destroyed end function. forcefully release memory point, use .reset() note normal use required.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"advanced-constructors-3","dir":"Articles","previous_headings":"Cube class","what":"Advanced constructors","title":"Matrix, vector, cube and field classes","text":"cube::fixed<n_rows, n_cols, n_slices>: Create fixed size cube, size specified via template arguments. Memory cube reserved compile time. generally faster dynamic memory allocation, size cube changed afterwards (directly indirectly). Create cube using data writable auxiliary (external) memory, ptr_aux_mem pointer memory. default cube allocates memory copies data auxiliary memory (safety). However, copy_aux_mem set false, cube instead directly use auxiliary memory (e.g., copying). faster, can dangerous unless know . strict parameter comes effect copy_aux_mem set false (e.g., cube directly using auxiliary memory). strict set false, cube use auxiliary memory size change aliasing event. strict set true, cube bound auxiliary memory lifetime. number elements cube changed. cube(const ptr_aux_mem, n_rows, n_cols, n_slices): Create cube copying data read-auxiliary memory, ptr_aux_mem pointer memory.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-3","dir":"Articles","previous_headings":"Cube class","what":"Examples","title":"Matrix, vector, cube and field classes","text":"size individual slices changed. following work:","code":"set.seed(123) a <- matrix(runif(4), nrow = 2, ncol = 2) b <- matrix(rnorm(4), nrow = 2, ncol = 2) [[cpp11::register]] doubles_matrix<> cube1_(const doubles_matrix<>& a,                                                 const doubles_matrix<>& b) {   mat A = as_Mat(a);  // convert from R to C++   mat B = as_Mat(b);    cube X(A.n_rows, A.n_cols, 2);  // create a cube with 2 slices   X.slice(0) = A;                 // copy A into first slice   X.slice(1) = B;                 // copy B into second slice    cube Y = X + X;  // cube addition   cube Z = X % X;  // element-wise cube multiplication    mat res = Y.slice(0) + Z.slice(1);    return as_doubles_matrix(res);  // convert from C++ to R } cube c(5,6,7); c.slice(0) = randu<mat>(10,20); // wrong size"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"field-class","dir":"Articles","previous_headings":"","what":"Field class","title":"Matrix, vector, cube and field classes","text":"field<object_type> class storing arbitrary objects matrix-like cube-like layouts. similar matrix cube, instead element scalar, element can vector, matrix, cube. similar list R. element can arbitrary size (e.g., field matrices, matrix can unique size).","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"constructors-4","dir":"Articles","previous_headings":"Field class","what":"Constructors","title":"Matrix, vector, cube and field classes","text":"object_type another class (e.g., vec, mat, std::string, etc) field<object_type>() field<object_type>(n_elem) field<object_type>(n_rows, n_cols) field<object_type>(n_rows, n_cols, n_slices) field<object_type>(size(X)) field<object_type>(field<object_type>)","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-4","dir":"Articles","previous_headings":"Field class","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"set.seed(123) a <- matrix(runif(4), nrow = 2, ncol = 2) b <- matrix(rnorm(4), nrow = 2, ncol = 2) [[cpp11::register]] doubles_matrix<> field1_(const doubles_matrix<>& a,                                                  const doubles_matrix<>& b) {   mat A = as_Mat(a);  // convert from R to C++   mat B = as_Mat(b);    field<mat> F(A.n_rows, A.n_cols, 3);  // create a field with 2 matrices   F(0) = A;                             // copy A into first location   F(1) = B;                             // copy B into second location   F(2) = F(0) + F(1);                   // matrix addition    mat res = F(0) + F(1) + F(2).t();    return as_doubles_matrix(res);  // convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"caveat","dir":"Articles","previous_headings":"Field class","what":"Caveat","title":"Matrix, vector, cube and field classes","text":"store set matrices size, Cube class efficient.","code":""},{"path":[]},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"attributes","dir":"Articles","previous_headings":"","what":"Attributes","title":"Matrix, vector, cube and field classes","text":"n_* provides information different objects: .n_rows number rows Mat, Col, Row, Cube, field, SpMat. .n_cols number columns Mat, Col, Row, Cube, field, SpMat. .n_elem total number elements Mat, Col, Row, Cube, field, SpMat. .n_slices number slices Cube field. .n_nonzero number non-zero elements SpMat. Col Row classes, n_elem also indicates vector length. variables read-type uword. change size, use set_size, copy_size, zeros_member, ones_member, reset. avoid compiler warnings implicit conversion operating uword integers/doubles pass data R, converte uword int static_cast<int> declare int.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-5","dir":"Articles","previous_headings":"Attributes","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"a <- matrix(runif(4), nrow = 2, ncol = 2) [[cpp11::register]] integers attr1_(const doubles_matrix<>& a) {   mat A = as_Mat(a);  // convert from R to C++    // uword or int can be used   int n_rows = A.n_rows;  // number of rows   int n_cols = A.n_cols;  // number of columns   int n_elem = A.n_elem;  // number of elements    writable::integers res({n_rows, n_cols, n_elem});   res.attr(\"names\") = strings({\"n_rows\", \"n_cols\", \"n_elem\"});    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"elementobject-access","dir":"Articles","previous_headings":"","what":"Element/object access","title":"Matrix, vector, cube and field classes","text":"Provide access individual elements objects stored container object (e.g., Mat, Col, Row, Cube, field). () vec rowvec, access element stored index . Mat, Cube field, access element/object stored index assumption flat layout, column-major ordering data (e.g., column column). exception thrown requested element bounds. .() [] (), without bounds check. recommended. (r,c) Mat 2D field classes, access element/object stored row r column c. exception thrown requested element bounds. .(r,c) (r,c), without bounds check. recommended. (r,c,s) Cube 3D field classes, access element/object stored row r, column c, slice s. exception thrown requested element bounds. .(r,c,s) (r,c,s), without bounds check. recommended.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-6","dir":"Articles","previous_headings":"Element/object access","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"a <- matrix(runif(4), nrow = 2, ncol = 2) [[cpp11::register]] doubles_matrix<> access1_(const doubles_matrix<>& a) {   mat A = as_Mat(a);  // convert from R to C++   A(1,1) = 123.0;     // set element at row 2, column 2    vec B(2, fill::randu);    double x = A(0,1);  // copy element at row 1, column 2 to a double   double y = B(1);    // copy element at coordinate 2 to a double    uword i, j; // int also works   uword N = A.n_rows;   uword M = A.n_cols;    for(i = 0; i < N; ++i) {     for(j = 0; j < M; ++j) {       A(i,j) = A(i,j) + x + y;     }   }    return as_doubles_matrix(A);  // convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"caveats","dir":"Articles","previous_headings":"Element/object access","what":"Caveats","title":"Matrix, vector, cube and field classes","text":".() [], .(r,c) .(r,c,s): Indexing C++ starts 0 Accessing elements without bounds checks slightly faster, recommended code thoroughly debugged first Accessing elements via [r,c] [r,c,s] work correctly C++; instead use (r,c) (r,c,s) indices elements specified via uword type, typedef unsigned integer type. using loops access elements, efficient use uword instead int.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"element-initialisation","dir":"Articles","previous_headings":"","what":"Element initialisation","title":"Matrix, vector, cube and field classes","text":"Set elements Mat, Col Row via braced initialiser lists.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-7","dir":"Articles","previous_headings":"Element initialisation","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"a <- matrix(runif(4), nrow = 2, ncol = 2) [[cpp11::register]] doubles_matrix<> initialization1_(const doubles_matrix<>& a) {   mat A = as_Mat(a);  // convert from R to C++   mat B = {{1, 2}, {3, 4}}; // create new matrix   vec C = {1, 2}; // create new column vector    // sum C to the diagonal of A   A(0,0) = A(0,0) + C(0);   A(1,1) = A(1,1) + C(1);    mat D = A + B;      return as_doubles_matrix(D);  // convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"zeros","dir":"Articles","previous_headings":"","what":"Zeros","title":"Matrix, vector, cube and field classes","text":"Set elements object zero, optionally first changing size specified dimensions. .zeros() (member function Mat, Col, Row, SpMat, Cube) .zeros(n_elem) (member function Col Row) .zeros(n_rows, n_cols) (member function Mat SpMat) .zeros(n_rows, n_cols, n_slices) (member function Cube) .zeros(size(X)) (member function Mat, Col, Row, Cube, SpMat)","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-8","dir":"Articles","previous_headings":"Zeros","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"a <- matrix(runif(4), nrow = 2, ncol = 2) [[cpp11::register]] doubles_matrix<> zeros1_(const doubles_matrix<>& a) {   mat A = as_Mat(a);  // convert from R to C++   A.zeros();          // set all elements to zero    mat B;   B.zeros(size(A)); // set size to be the same as A and set all elements to zero    mat C(A.n_rows, A.n_cols, fill::zeros);    mat D = A + B + C;    return as_doubles_matrix(D);  // convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"ones","dir":"Articles","previous_headings":"","what":"Ones","title":"Matrix, vector, cube and field classes","text":"Set elements object one, optionally first changing size specified dimensions.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-9","dir":"Articles","previous_headings":"Ones","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"a <- matrix(runif(4), nrow = 2, ncol = 2) [[cpp11::register]] doubles_matrix<> ones1_(const doubles_matrix<>& a) {   mat A = as_Mat(a);  // convert from R to C++   A.ones();          // set all elements to zero    mat B;   B.ones(size(A)); // set size to be the same as A and set all elements to zero    mat C(A.n_rows, A.n_cols, fill::ones);    mat D = A + B + C;    return as_doubles_matrix(D);  // convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"eye","dir":"Articles","previous_headings":"","what":"Eye","title":"Matrix, vector, cube and field classes","text":".eye() member function Mat SpMat. .eye(n_rows, n_cols) sets elements along main diagonal one -diagonal elements zero, optionally first changing size specified dimensions. .eye(size(X)) creates identity matrix generated n_rows = n_cols.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-10","dir":"Articles","previous_headings":"Eye","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"a <- matrix(runif(4), nrow = 2, ncol = 2) [[cpp11::register]] doubles_matrix<> eye1_(const doubles_matrix<>& a) {   mat A = as_Mat(a);  // convert from R to C++   A.eye();            // create an identity matrix    mat B;   B.eye(size(A)); // another identity matrix    uword N = A.n_rows;   uword M = A.n_cols;   mat C(N, M, fill::randu);   C.eye(N, M); // yet another identity matrix    mat D = A + B + C;    return as_doubles_matrix(D);  // convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"random-uniform","dir":"Articles","previous_headings":"","what":"Random uniform","title":"Matrix, vector, cube and field classes","text":"Set elements random values uniform distribution [0,1] interval, optionally first changing size specified dimensions. complex elements, real imaginary parts treated separately.","code":"a <- matrix(runif(4), nrow = 2, ncol = 2) [[cpp11::register]] doubles_matrix<> randu1_(const doubles_matrix<>& a) {   mat A = as_Mat(a);  // convert from R to C++    mat B;   B.randu(size(A)); // random uniform matrix with the same size as A    mat C(A.n_rows, A.n_cols, fill::randu);    mat D = A + B + C;    return as_doubles_matrix(D);  // convert from C++ to R }  [[cpp11::register]] doubles_matrix<> randu2_(const int& n) {   GetRNGstate();  // Ensure R's RNG state is synchronized   mat y(n, n);   ::arma_rng::randu<double>::fill(y.memptr(), y.n_elem);   PutRNGstate();    return as_doubles_matrix(y); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"normal-distribution","dir":"Articles","previous_headings":"","what":"Normal distribution","title":"Matrix, vector, cube and field classes","text":"Set elements random values normal distribution zero mean unit variance, optionally first changing size specified dimensions. complex elements, real imaginary parts treated separately.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-11","dir":"Articles","previous_headings":"Normal distribution","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"a <- matrix(runif(4), nrow = 2, ncol = 2) [[cpp11::register]] doubles_matrix<> randn1_(const doubles_matrix<>& a) {   mat A = as_Mat(a);  // convert from R to C++    mat B;   B.randn(size(A)); // random normal matrix with the same size as A    mat C(A.n_rows, A.n_cols, fill::randn);    mat D = A + B + C;    return as_doubles_matrix(D);  // convert from C++ to R }  [[cpp11::register]] doubles_matrix<> randn2_(const int& n) {   GetRNGstate();  // Ensure R's RNG state is synchronized   mat y(n, n);   ::arma_rng::randn<double>::fill(y.memptr(), y.n_elem);   PutRNGstate();      return as_doubles_matrix(y); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"fill","dir":"Articles","previous_headings":"","what":"Fill","title":"Matrix, vector, cube and field classes","text":"Sets elements specified value .fill(value) member function Mat, Col, Row, Cube, field. type value must match type elements used container object (e.g., Mat type double)","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-12","dir":"Articles","previous_headings":"Fill","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"a <- matrix(runif(4), nrow = 2, ncol = 2) [[cpp11::register]] doubles_matrix<> fill1_(const doubles_matrix<>& a) {   mat A = as_Mat(a);  // convert from R to C++    uword N = A.n_rows;   uword M = A.n_cols;    mat B(size(A), fill::value(200.0));  // create a matrix filled with 200.0   mat C(N, M, fill::value(100.0));     // matrix filled with 100.0   mat D(N, M, fill::zeros);            // matrix filled with zeros   mat E(N, M, fill::ones);             // matrix filled with ones    mat F = A + B + C + D + E;    return as_doubles_matrix(F);  // convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"imbue","dir":"Articles","previous_headings":"","what":"Imbue","title":"Matrix, vector, cube and field classes","text":".imbue(functor) member function Mat, Col, Row Cube, fills elements values provided functor. argument can functor lambda function. matrices, filling done column--column (e.g., column 0 filled, column 1, etc.) cubes, filling done slice--slice, slice treated matrix","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-13","dir":"Articles","previous_headings":"Imbue","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"a <- matrix(runif(4), nrow = 2, ncol = 2) [[cpp11::register]] doubles_matrix<> imbue1_(const doubles_matrix<>& a) {   mat A = as_Mat(a);  // convert from R to C++    std::mt19937 engine;  // Mersenne twister random number engine   std::uniform_real_distribution<double> distr(0.0, 1.0);    mat B(size(A), fill::none);                // create an empty matrix   B.imbue([&]() { return distr(engine); });  // fill with random values    mat C = A + B;    return as_doubles_matrix(C);  // convert from C++ to R }  [[cpp11::register]] doubles_matrix<> imbue2_(const doubles_matrix<>& a) {   GetRNGstate();  // Ensure R's RNG state is synchronized    mat A = as_Mat(a);  // Convert from R to C++    mat B(size(A), fill::none);  // Create an empty matrix   B.imbue([]() { return unif_rand(); });  // Fill with random values    mat C = A + B;    PutRNGstate();    return as_doubles_matrix(C);  // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"clean","dir":"Articles","previous_headings":"","what":"Clean","title":"Matrix, vector, cube and field classes","text":".clean(threshold) member function Mat, Col, Row, Cube, SpMat. can used sparsify matrix, sense zeroing values small magnitudes. objects non-complex elements: element absolute value less equal threshold replaced zero. objects complex elements: element, component (real imaginary) absolute value less equal threshold replaced zero.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-14","dir":"Articles","previous_headings":"Clean","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"[[cpp11::register]] doubles_matrix<> clean1_(const int& n) {   mat A(n, n, fill::randu); // create a random matrix    A(0, 0) = datum::eps; // set the diagonal with small values (+/- epsilon)   A(1, 1) = -datum::eps;    A.clean(datum::eps); // set elements with small values to zero    return as_doubles_matrix(A); // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"caveat-1","dir":"Articles","previous_headings":"Clean","what":"Caveat","title":"Matrix, vector, cube and field classes","text":"explicitly convert dense storage sparse storage, use SpMat.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"replace","dir":"Articles","previous_headings":"","what":"Replace","title":"Matrix, vector, cube and field classes","text":".replace( old_value, new_value ) member function Mat, Col, Row, Cube, SpMat. elements equal old_value, set new_value.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-15","dir":"Articles","previous_headings":"Replace","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"[[cpp11::register]] doubles_matrix<> replace1_(const int& n) {   mat A(n, n, fill::randu); // create a random matrix    A.diag().fill(datum::nan); // set the diagonal with NaN values   A.replace(datum::nan, 0);  // replace each NaN with 0    return as_doubles_matrix(A); // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"caveats-1","dir":"Articles","previous_headings":"Replace","what":"Caveats","title":"Matrix, vector, cube and field classes","text":"type old_value new_value must match type elements used container object (e.g., Mat type double). Floating point numbers (float double) approximations due limited precision. sparse matrices (SpMat), replacement done old_value = 0.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"clamp","dir":"Articles","previous_headings":"","what":"Clamp","title":"Matrix, vector, cube and field classes","text":".clamp(min_value, max_value) member function Mat, Col, Row, Cube SpMat transforms values lower min_val min_val, values higher max_val max_val. complex elements, real imaginary components clamped separately. sparse matrices, clamping applied non-zero elements.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-16","dir":"Articles","previous_headings":"Clamp","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"[[cpp11::register]] doubles_matrix<> clamp1_(const int& n) {   mat A(n, n, fill::randu); // create a random matrix   A.diag().fill(0.1);       // set the diagonal with 0.1 values    A.clamp(0.2, 0.8); // clamp values to the [0.2, 0.8] interval    return as_doubles_matrix(A); // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"transform","dir":"Articles","previous_headings":"","what":"Transform","title":"Matrix, vector, cube and field classes","text":".transform(functor) member function Mat, Col, Row, Cube, SpMat. argument can functor lambda function. dense matrices, transformation done column--column elements. sparse matrices, transformation done column--column non-zero elements. cubes, transformation done slice--slice, slice treated matrix.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-17","dir":"Articles","previous_headings":"Transform","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"[[cpp11::register]] doubles_matrix<> transform1_(const int& n) {   mat A(n, n, fill::ones);  // create a matrix filled with ones   A.transform([](double val) { return (val + 122.0); });   return as_doubles_matrix(A); // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"for-each","dir":"Articles","previous_headings":"","what":"For each","title":"Matrix, vector, cube and field classes","text":".for_each(functor) member function Mat, Col, Row, Cube, SpMat, field. argument can functor lambda function. dense matrices fields, processing done column--column elements. sparse matrices, processing done column--column non-zero elements. cubes, processing done slice--slice, slice treated matrix.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-18","dir":"Articles","previous_headings":"For each","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"[[cpp11::register]] doubles_matrix<> for_each1_(const int& n) {   // add 122 to each element in a dense matrix, the '&' is important   mat D(n, n, fill::ones);   D.for_each([](mat::elem_type& val) { val += 122.0; });    // add 122 to each non-zero element in a sparse matrix   sp_mat S;   S.sprandu(n, n, 1.0);   S.for_each([](sp_mat::elem_type& val) { val += 123.0; });    // set the size of all matrices in a field   field<mat> F(2, 2);   F.for_each([n](mat& X) { X.zeros(n, n); });  // capture n for the lambda    mat res = D + S + F(0) + F(1);    return as_doubles_matrix(res);  // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"set-size","dir":"Articles","previous_headings":"","what":"Set size","title":"Matrix, vector, cube and field classes","text":"Change size object, without explicitly preserving data without initialising elements (e.g., elements may contain garbage values, including NaN). .set_size(n_elem) (member function Col, Row, field) .set_size(n_rows, n_cols) (member function Mat, SpMat, field) .set_size(n_rows, n_cols, n_slices) (member function Cube field) .set_size(size(X)) (member function Mat, Col, Row, Cube, SpMat, field) initialise elements zero changing size, use .zeros() instead. explicitly preserve data changing size, use .reshape() .resize() instead.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-19","dir":"Articles","previous_headings":"Set size","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"[[cpp11::register]] doubles set_size1_(const int& n) {   mat A;   A.set_size(n, n);  // or:  mat A(n, n, fill::none);    mat B;   B.set_size(size(A));  // or:  mat B(size(A), fill::none);    vec C;   C.set_size(n);  // or:  vec v(n, fill::none);    A.fill(1.0);  // set all elements to 1.0   B.fill(2.0);  // set all elements to 2.0   C.fill(3.0);  // set all elements to 3.0    vec res = A.col(0) + B.col(1) + C;    return as_doubles(res);  // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"reshape","dir":"Articles","previous_headings":"","what":"Reshape","title":"Matrix, vector, cube and field classes","text":"Recreate object according given size specifications, elements taken previous version object column-wise manner. elements generated object placed column-wise (e.g., first column filled filling second column) .reshape(n_rows, n_cols) (member function Mat SpMat) .reshape(n_rows, n_cols, n_slices) (member function Cube) .reshape(size(X)) (member function Mat, Cube, SpMat) layout elements recreated object different layout previous version object total number elements previous version object less specified size, extra elements recreated object set zero total number elements previous version object greater specified size, subset elements taken","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-20","dir":"Articles","previous_headings":"Reshape","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"[[cpp11::register]] doubles_matrix<> reshape1_(const int& n) {   mat A(n + 1, n - 1, fill::randu);   A.reshape(n - 1, n + 1);   return as_doubles_matrix(A);  // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"caveats-2","dir":"Articles","previous_headings":"Reshape","what":"Caveats","title":"Matrix, vector, cube and field classes","text":".reshape() considerably slower .set_size(). change size without preserving data, use .set_size(). grow/shrink object preserving elements layout elements, use .resize() flatten matrix vector, use vectorise() .as_col()/.as_row().","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"resize","dir":"Articles","previous_headings":"","what":"Resize","title":"Matrix, vector, cube and field classes","text":"Resize object according given size specifications, preserving elements layout elements. can used growing shrinking object (e.g., adding/removing rows, /columns, /slices). .resize(n_elem): member function Col, Row. .resize(n_rows, n_cols): member function Mat SpMat. .resize(n_rows, n_cols, n_slices): member function Cube. .resize(size(X)): member function Mat, Col, Row, Cube, SpMat.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-21","dir":"Articles","previous_headings":"Resize","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"[[cpp11::register]] doubles_matrix<> resize1_(const int& n) {   mat A(n + 1, n - 1, fill::randu);   A.resize(n - 1, n + 1);   return as_doubles_matrix(A);  // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"caveats-3","dir":"Articles","previous_headings":"Resize","what":"Caveats","title":"Matrix, vector, cube and field classes","text":".resize() considerably slower .set_size(). change size without preserving data, .set_size() instead.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"copy-size","dir":"Articles","previous_headings":"","what":"Copy size","title":"Matrix, vector, cube and field classes","text":".copy_size() sets size matrix/vector/cube matrix/vector/cube .","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-22","dir":"Articles","previous_headings":"Copy size","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"[[cpp11::register]] integers copy_size1_(const int& n) {   mat A(n, n, fill::randu);    mat B;   B.copy_size(A);    int N = B.n_rows;   int M = B.n_cols;      writable::integers res({N, M});   res.attr(\"names\") = strings({\"n_rows\", \"n_cols\"});    return as_integers(res);  // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"caveat-2","dir":"Articles","previous_headings":"Copy size","what":"Caveat","title":"Matrix, vector, cube and field classes","text":"set size object B, must type B. example, size matrix set providing cube.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"reset","dir":"Articles","previous_headings":"","what":"Reset","title":"Matrix, vector, cube and field classes","text":".reset() sets matrix/vector size zero (object elements).","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-23","dir":"Articles","previous_headings":"Reset","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"[[cpp11::register]] integers reset1_(const int& n) {   mat A(n, n, fill::randu);   A.reset();    int N = A.n_rows;   int M = A.n_cols;      writable::integers res({N, M});   res.attr(\"names\") = strings({\"n_rows\", \"n_cols\"});    return as_integers(res);  // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"submatrix-views","dir":"Articles","previous_headings":"","what":"Submatrix views","title":"Matrix, vector, cube and field classes","text":"collection member functions Mat, Col Row classes provide read/write access submatrix views.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"contiguous-views-for-matrix","dir":"Articles","previous_headings":"Submatrix views","what":"Contiguous views for matrix","title":"Matrix, vector, cube and field classes","text":"X.col(col_number) X.row(row_number) X.cols(first_col, last_col) X.rows(first_row, last_row) X.submat(first_row, first_col, last_row, last_col) X(span(first_row, last_row), span(first_col, last_col)) X(first_row, first_col, size(n_rows, n_cols)) X(first_row, first_col, size(Y)) (Y matrix) X(span(first_row, last_row), col_number) X(row_number, span(first_col, last_col)) X.head_cols(number_of_cols) X.head_rows(number_of_rows) X.tail_cols(number_of_cols) X.tail_rows(number_of_rows) X.unsafe_col(col_number) (use caution)","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"contiguous-views-for-vector","dir":"Articles","previous_headings":"Submatrix views","what":"Contiguous views for vector","title":"Matrix, vector, cube and field classes","text":"Y(span(first_index, last_index)) Y.subvec(first_index, last_index) Y.subvec(first_index, size(X)) (X vector) Y.head(number_of_elements) Y.tail(number_of_elements)","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"non-contiguous-views-for-matrix-or-vector","dir":"Articles","previous_headings":"Submatrix views","what":"Non-contiguous views for matrix or vector:","title":"Matrix, vector, cube and field classes","text":"X.elem(vector_of_indices) X(vector_of_indices) X.cols(vector_of_column_indices) X.rows(vector_of_row_indices) X.submat(vector_of_row_indices, vector_of_column_indices) X(vector_of_row_indices, vector_of_column_indices) Instances span(start, end) can replaced span::all_ indicate entire range. functions requiring one vector indices, example X.submat(vector_of_row_indices, vector_of_column_indices), vector indices must type uvec. function X.elem(vector_of_indices), elements specified vector_of_indices accessed. X interpreted one long vector, column--column ordering elements X. vector_of_indices must evaluate vector type uvec (e.g., generated find() function). aggregate set specified elements treated column vector (e.g., output X.elem() always column vector). function .unsafe_col() provided speed reasons used know . creates seemingly independent Col vector object (e.g., vec), uses memory existing matrix object. , created vector alias safe, take account underlying matrix memory freed (e.g., due operation involving size change matrix).","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-24","dir":"Articles","previous_headings":"Submatrix views","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"[[cpp11::register]] doubles_matrix<> subview1_(const int& n) {   mat A(n, n, fill::zeros);    A.submat(0,1,2,3) = randu<mat>(3,3);   A(span(0,2), span(1,3)) = randu<mat>(3,3);   A(0,1, size(3,3)) = randu<mat>(3,3);    mat B = A.submat(0,1,2,3);   mat C = A(span(0,2), span(1,3) );   mat D = A(0, 1, size(3,3) );    A.col(1) = randu<mat>(5,1);   A(span::all, 1) = randu<mat>(5,1);    mat X(5, 5, fill::randu);        // get all elements of X that are greater than 0.5   vec q = X.elem( find(X > 0.5) );        // add 123 to all elements of X greater than 0.5   X.elem( find(X > 0.5) ) += 123.0;        // set four specific elements of X to 1   uvec indices = { 2, 3, 6, 8 };        X.elem(indices) = ones<vec>(4);        // add 123 to the last 5 elements of vector a   vec a(10, fill::randu);   a.tail(5) += 123.0;        // add 123 to the first 3 elements of column 2 of X   X.col(2).head(3) += 123;    return as_doubles_matrix(X);  // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"subcube-views-and-slices","dir":"Articles","previous_headings":"","what":"Subcube views and slices","title":"Matrix, vector, cube and field classes","text":"collection member functions Cube class provide subcube views.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"contiguous-views-for-cube","dir":"Articles","previous_headings":"Subcube views and slices","what":"Contiguous views for cube","title":"Matrix, vector, cube and field classes","text":"Q.slice(slice_number) Q.slices(first_slice, last_slice) Q.row(row_number) Q.rows(first_row, last_row) Q.col(col_number) Q.cols(first_col, last_col) Q.subcube( first_row, first_col, first_slice, last_row, last_col, last_slice) Q(span(first_row, last_row), span(first_col, last_col), span(first_slice, last_slice)) Q(first_row, first_col, first_slice, size(n_rows, n_cols, n_slices)) Q(first_row, first_col, first_slice, size(R)) (R cube) Q.head_slices(number_of_slices) Q.tail_slices(number_of_slices) Q.tube(row, col) Q.tube(first_row, first_col, last_row, last_col) Q.tube(span(first_row, last_row), span(first_col, last_col)) Q.tube(first_row, first_col, size(n_rows, n_cols))","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"non-contiguous-views-for-cube","dir":"Articles","previous_headings":"Subcube views and slices","what":"Non-contiguous views for cube","title":"Matrix, vector, cube and field classes","text":"Q.elem(vector_of_indices), Q(vector_of_indices), Q.slices( vector_of_slice_indices) instances span(,b) can replaced : span() span::, indicate entire range. span(), indicate particular row, column slice. individual slice, accessed via .slice(), instance Mat class (reference matrix provided). .tube() forms variants .subcube(), using first_slice = 0 last_slice = Q.n_slices-1. .tube(row,col) form uses row = first_row = last_row, col = first_col = last_col. function Q.elem(vector_of_indices), elements specified vector_of_indices accessed. Q interpreted one long vector, slice--slice column--column ordering elements Q. vector_of_indices must evaluate vector type uvec (e.g., generated find() function). aggregate set specified elements treated column vector (e.g., output Q.elem() always column vector). function Q.slices(vector_of_slice_indices), slices specified vector_of_slice_indices accessed. vector_of_slice_indices must evaluate vector type uvec.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-25","dir":"Articles","previous_headings":"Subcube views and slices","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"[[cpp11::register]] doubles_matrix<> subview2_(const int& n) {   cube A(n, 3, 4, fill::randu);        mat B = A.slice(1); // each slice is a matrix        A.slice(0) = randu<mat>(2,3);   A.slice(0)(1,2) = 99.0;        A.subcube(0,0,1,  1,1,2)           = randu<cube>(2,2,2);   A(span(0,1), span(0,1), span(1,2)) = randu<cube>(2,2,2);   A(0,0,1, size(2,2,2))              = randu<cube>(2,2,2);        // add 123 to all elements of A greater than 0.5   A.elem( find(A > 0.5) ) += 123.0;        cube C = A.head_slices(2);  // get first two slices        A.head_slices(2) += 123.0;    mat res = A.slice(0) + B + C.slice(1);    return as_doubles_matrix(res);  // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"subfield-views","dir":"Articles","previous_headings":"","what":"Subfield views","title":"Matrix, vector, cube and field classes","text":"collection member functions field class provide subfield views. 2D field F, subfields accessed : F.row(row_number) F.col(col_number) F.rows(first_row, last_row) F.cols(first_col, last_col) F.subfield(first_row, first_col, last_row, last_col) F(span(first_row, last_row), span(first_col, last_col)) F(first_row, first_col, size(G)) (G 2D field) F(first_row, first_col, size(n_rows, n_cols)) 3D field F, subfields accessed : F.slice(slice_number) F.slices(first_slice, last_slice) F.subfield(first_row, first_col, first_slice, last_row, last_col, last_slice) F(span(first_row, last_row), span(first_col, last_col), span(first_slice, last_slice)) F(first_row, first_col, first_slice, size(G)) (G 3D field) F(first_row, first_col, first_slice, size(n_rows, n_cols, n_slices)) Instances span(,b) can replaced : span() span::, indicate entire range. span(), indicate particular row column.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"diagonal","dir":"Articles","previous_headings":"","what":"Diagonal","title":"Matrix, vector, cube and field classes","text":".diag() member functions Mat SpMat read/write access diagonal matrix. argument can empty value k specify diagonal (k = 0 default). diagonal interpreted column vector within expressions. k = 0 indicates main diagonal (default setting) k < 0 indicates k-th sub-diagonal (main diagonal, towards bottom-left corner) k > 0 indicates k-th super-diagonal (main diagonal, towards top-right corner)","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-26","dir":"Articles","previous_headings":"Diagonal","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"[[cpp11::register]] doubles diagonal1_(const int& n) {   mat X(n, n, fill::randu);    vec A = X.diag(); // extract the main diagonal   double B = accu(X.diag(1)); // sum of elements on the first upper diagonal   double C = accu(X.diag(-1)); // sum of elements on the first lower diagonal    X.diag() = randu<vec>(n);   X.diag() += A;   X.diag() /= B;   X.diag() *= C;    sp_mat S = sprandu<sp_mat>(n, n, 0.0);   S.diag().ones();    vec v(S.diag());  // copy sparse diagonal to dense vector   v += X.diag();    return as_doubles(v);  // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"caveat-3","dir":"Articles","previous_headings":"Diagonal","what":"Caveat","title":"Matrix, vector, cube and field classes","text":"calculate diagonal elements compound expression, use diagvec() diagmat().","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"each-col","dir":"Articles","previous_headings":"","what":"Each col","title":"Matrix, vector, cube and field classes","text":".each_col() member function Mat. applies vector operation column matrix, similar “broadcasting” Matlab/Octave. argument can empty, vector indices, lambda function.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-27","dir":"Articles","previous_headings":"Each col","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"[[cpp11::register]] doubles_matrix<> each_col1_(const int& n) {   mat X(n, n + 1, fill::ones);    // create a vector with n elements ranging from 5 to 10   vec v = linspace<vec>(5, 10, n);    // in-place addition of v to each column vector of X   X.each_col() += v;    // generate Y by adding v to each column vector of X   mat Y = X.each_col() + v;    // subtract v from columns 1 and 2 of X   X.cols(0, 1).each_col() -= v;    uvec indices(2);   indices(0) = 1;   indices(1) = 2;    X.each_col(indices) = v;  // copy v to columns 1 and 2 of X    // lambda function with non-const vector   X.each_col([](vec& a) { 2 * a; });    const mat& XX = X;    // lambda function with const vector   XX.each_col([](const vec& b) { 3 * b; });    mat res = X + Y + XX;    return as_doubles_matrix(res);  // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"each-row","dir":"Articles","previous_headings":"","what":"Each row","title":"Matrix, vector, cube and field classes","text":".each_row(), .each_row(vector_of_indices), .each_row(lambdaction) member functions Mat. apply vector operation row matrix, similar “broadcasting” Matlab/Octave.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"form-1","dir":"Articles","previous_headings":"Each row","what":"Form 1","title":"Matrix, vector, cube and field classes","text":".each_row() supports following operations: + addition += -place addition - subtraction -= -place subtraction % element-wise multiplication %= -place element-wise multiplication / element-wise division /= -place element-wise division = assignment (copy)","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"form-2","dir":"Articles","previous_headings":"Each row","what":"Form 2","title":"Matrix, vector, cube and field classes","text":".each_row(vector_of_indices) supports operations form 1. argument vector_of_indices contains list indices rows used, must evaluate vector type uvec.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"form-3","dir":"Articles","previous_headings":"Each row","what":"Form 3","title":"Matrix, vector, cube and field classes","text":".each_col(lambdaction) applies given lambdaction column vector. function must accept reference Row object element type underlying matrix.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-28","dir":"Articles","previous_headings":"Each row","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"[[cpp11::register]] doubles_matrix<> each_row1_(const int& n) {   mat X(n + 1, n, fill::ones);    // create a vector with n elements ranging from 5 to 10   rowvec v = linspace<rowvec>(5, 10, n);    // in-place addition of v to each rows vector of X   X.each_row() += v;    // generate Y by adding v to each rows vector of X   mat Y = X.each_row() + v;    // subtract v from rows 1 and 2 of X   X.rows(0, 1).each_row() -= v;    uvec indices(2);   indices(0) = 1;   indices(1) = 2;    X.each_row(indices) = v;       // copy v to columns 1 and 2 of X    // lambda function with non-const vector   X.each_row([](rowvec& a) { a / 2; });    const mat& XX = X;    // lambda function with const vector   XX.each_row([](const rowvec& b) { b / 3; });    mat res = X + Y + XX;    return as_doubles_matrix(res);  // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"each-slice","dir":"Articles","previous_headings":"","what":"Each slice","title":"Matrix, vector, cube and field classes","text":".each_slice() member function Cube applies matrix operation slice cube, slice treated matrix. similar “broadcasting” Matlab/Octave.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"form-1-1","dir":"Articles","previous_headings":"Each slice","what":"Form 1","title":"Matrix, vector, cube and field classes","text":".each_slice(vector_of_indices) Supported operations: + addition += -place addition - subtraction -= -place subtraction % element-wise multiplication %= -place element-wise multiplication / element-wise division /= -place element-wise division * matrix multiplication *= -place matrix multiplication = assignment (copy)","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"form-2-1","dir":"Articles","previous_headings":"Each slice","what":"Form 2","title":"Matrix, vector, cube and field classes","text":".each_slice(lambdaction) argument vector_of_indices contains list indices slices used; must evaluate vector type uvec. Arithmetic operations per form 1 supported, except * *= (e.g., matrix multiplication).","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"form-3-1","dir":"Articles","previous_headings":"Each slice","what":"Form 3","title":"Matrix, vector, cube and field classes","text":".each_slice(lambdaction, use_mp) Apply given lambdaction slice. function must accept reference Mat object element type underlying cube.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"form-4","dir":"Articles","previous_headings":"Each slice","what":"Form 4","title":"Matrix, vector, cube and field classes","text":"Apply given lambdaction slice, per form 3. argument use_mp bool enable use OpenMP multi-threaded execution lambdaction multiple slices time. order processing slices deterministic (e.g., slice 2 can processed slice 1). lambdaction must thread-safe, e.g., must write variables outside scope.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-29","dir":"Articles","previous_headings":"Each slice","what":"Examples:","title":"Matrix, vector, cube and field classes","text":"","code":"[[cpp11::register]] doubles_matrix<> each_slice1_(const int& n) {   cube C(n, n + 1, 6, fill::randu);    mat M = repmat(linspace<vec>(1, n, n), 1, n + 1);    C.each_slice() += M;  // in-place addition of M to each slice of C    cube D = C.each_slice() + M;  // generate D by adding M to each slice of C    // sum all slices of D into a single n x (n + 1) matrix   mat D_flat = sum(D, 2);    uvec indices(2);   indices(0) = 2;   indices(1) = 4;    C.each_slice(indices) = M;  // copy M to slices 2 and 4 in C   C.each_slice([](mat& X) { X * 2.0; });  // lambda function with non-const matrix   mat C_flat = sum(C, 2);    const cube& CC = C;   CC.each_slice([](const mat& X) { X / 3.0; });  // lambda function with const matrix    mat CC_flat = sum(CC, 2);    mat res = C_flat + D_flat + CC_flat;    return as_doubles_matrix(res);  // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"set-real","dir":"Articles","previous_headings":"","what":"Set real","title":"Matrix, vector, cube and field classes","text":".set_real(X) sets real part object. X must size recipient object.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-30","dir":"Articles","previous_headings":"Set real","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"[[cpp11::register]] list set_real1_(const int& n) {   mat A(n + 1, n - 1, fill::randu);    cx_mat C(n + 1, n - 1, fill::zeros);    C.set_real(A);    return as_complex_matrix(C);  // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"caveat-4","dir":"Articles","previous_headings":"Set real","what":"Caveat","title":"Matrix, vector, cube and field classes","text":"directly construct complex matrix two real matrices, following code faster:","code":"[[cpp11::register]] list set_real2_(const int& n) {       mat A(n - 1, n + 1, fill::randu);   mat B(n - 1, n + 1, fill::randu);      cx_mat C = cx_mat(A,B);    return as_complex_matrix(C);  // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"set-imaginary","dir":"Articles","previous_headings":"","what":"Set imaginary","title":"Matrix, vector, cube and field classes","text":".set_imaginary(X) sets imaginary part object. X must size recipient object.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-31","dir":"Articles","previous_headings":"Set imaginary","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"[[cpp11::register]] list set_imag1_(const int& n) {   mat B(n + 1, n - 1, fill::randu);    cx_mat C(n + 1, n - 1, fill::zeros);    C.set_imag(B);    return as_complex_matrix(C);  // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"caveat-5","dir":"Articles","previous_headings":"Set imaginary","what":"Caveat","title":"Matrix, vector, cube and field classes","text":"directly construct complex matrix two real matrices, following code faster:","code":"[[cpp11::register]] list set_imag2_(const int& n) {       mat A(n - 1, n + 1, fill::randu);   mat B(n - 1, n + 1, fill::randu);      cx_mat C = cx_mat(A,B);    return as_complex_matrix(C);  // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"insert-columns","dir":"Articles","previous_headings":"","what":"Insert columns","title":"Matrix, vector, cube and field classes","text":".insert_cols() member function Mat, Row Cube. arguments can colnumber, X indicate column number matrix insert, colnumber, number_of_cols indicate column number number columns insert. X argument inserts copy X specified column. X must number rows (slices) recipient object. number_of_cols argument expands object creating new columns set zero.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-32","dir":"Articles","previous_headings":"Insert columns","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"[[cpp11::register]] doubles_matrix<> insert_columns1_(const int& n) {   mat A(n, n * 2, fill::randu);   mat B(n, n - 1, fill::ones);    // at column n - 1, insert a copy of B   // A will now have 3n - 1 columns   A.insert_cols(n - 1, B);    // at column 1, insert 2n zeroed columns   // B will now have 3n - 1 columns   B.insert_cols(1, n * 2);    mat res = A + B;    return as_doubles_matrix(res);  // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"insert-rows","dir":"Articles","previous_headings":"","what":"Insert rows","title":"Matrix, vector, cube and field classes","text":".insert_rows() member function Mat, Row Cube. arguments can rownumber, X indicate row number matrix insert, rownumber, number_of_rows indicate row number number rows insert. X argument inserts copy X specified column. X must number columns (slices) recipient object. number_of_rows argument expands object creating new rows set zero.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-33","dir":"Articles","previous_headings":"Insert rows","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"[[cpp11::register]] doubles_matrix<> insert_rows1_(const int& n) {   mat A(n * 2, n, fill::randu);   mat B(n - 1, n, fill::ones);    // at row n - 1, insert a copy of B   // A will now have 3n - 1 rows   A.insert_rows(n - 1, B);    // at row 1, insert 2n zeroed rows   // B will now have 3n - 1 columns   B.insert_rows(1, n * 2);    mat res = A + B;    return as_doubles_matrix(res);  // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"insert-slice","dir":"Articles","previous_headings":"","what":"Insert slice","title":"Matrix, vector, cube and field classes","text":".insert_slices() member function Cube. arguments can slice_number, X indicate slice number matrix insert, slice_number, number_of_slices indicate slice number number slices insert. X argument inserts copy X specified slice. X must number columns rows recipient object. number_of_slices argument expands object creating new slices set zero.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-34","dir":"Articles","previous_headings":"Insert slice","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"[[cpp11::register]] doubles_matrix<> insert_slices1_(const int& n) {   cube A(n, n, n * 2, fill::randu);   cube B(n, n, n - 1, fill::ones);    // At slice n - 1, insert a copy of B   // A will now have 3n - 1 slices   A.insert_slices(n - 1, B);    // At slice 1, insert 2n zeroed slices   // B will now have 3n - 1 slices   B.insert_slices(1, n * 2);    mat res = sum(A + B);    return as_doubles_matrix(res);  // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"shed-columns","dir":"Articles","previous_headings":"","what":"Shed columns","title":"Matrix, vector, cube and field classes","text":".shed_col(row_number) .shed_cols(first_row, last_row) member functions Mat, Col, SpMat, Cube. single scalar argument remove specified column, two scalar arguments removes specified range columns. .shed_cols(vector_of_indices) member function Mat Col. vector indices must evaluate vector type uvec containing indices columns remove.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-35","dir":"Articles","previous_headings":"Shed columns","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"[[cpp11::register]] doubles_matrix<> shed_columns1_(const int& n) {   mat A(n, n * 5, fill::randu);    // remove the first column   A.shed_col(0);    // remove columns 1 and 2   A.shed_cols(0, 1);    // remove columns 2 and 4   uvec indices(2);   indices(0) = 1;   indices(1) = 3;   A.shed_cols(indices);    return as_doubles_matrix(A);  // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"shed-rows","dir":"Articles","previous_headings":"","what":"Shed rows","title":"Matrix, vector, cube and field classes","text":".shed_row(row_number) .shed_rows(first_row, last_row) member functions Mat, Col, SpMat, Cube. single scalar argument remove specified rows, two scalar arguments removes specified range rows. .shed_rows(vector_of_indices) member function Mat Row. vector indices must evaluate vector type uvec containing indices rows remove.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-36","dir":"Articles","previous_headings":"Shed rows","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"[[cpp11::register]] doubles_matrix<> shed_rows1_(const int& n) {   mat A(n * 5, n, fill::randu);    // remove the first row   A.shed_row(0);    // remove rows 1 and 2   A.shed_rows(0, 1);    // remove rows 2 and 4   uvec indices(2);   indices(0) = 1;   indices(1) = 3;   A.shed_rows(indices);    return as_doubles_matrix(A);  // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"shed-slices","dir":"Articles","previous_headings":"","what":"Shed slices","title":"Matrix, vector, cube and field classes","text":".shed_slices() member function Cube. single scalar argument remove specified slices, two scalar arguments removes specified range slices. vector indices must evaluate vector type uvec containing indices rows remove. arguments can slice_number indicate slice number remove, first_slice, last_slice indicate range slices remove, vector_of_indices indicate indices slices remove.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-37","dir":"Articles","previous_headings":"Shed slices","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"[[cpp11::register]] doubles_matrix<> shed_slices1_(const int& n) {   cube A(n, n, n * 5, fill::randu);    // remove the first slice   A.shed_slice(0);    // remove slices 1 and 2   A.shed_slices(0, 1);    // remove slices 2 and 4   uvec indices(2);   indices(0) = 1;   indices(1) = 3;   A.shed_slices(indices);    mat res = sum(A, 2);    return as_doubles_matrix(res);  // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"swap-columns","dir":"Articles","previous_headings":"","what":"Swap columns","title":"Matrix, vector, cube and field classes","text":".swap_cols( col1, col2 ) member functions Mat, Col, Row, SpMat. swaps contents specified columns.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-38","dir":"Articles","previous_headings":"Swap columns","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"[[cpp11::register]] doubles_matrix<> swap_columns1_(const int& n) {   mat A(n, n * 5, fill::randu);    // swap columns 1 and 2   A.swap_cols(0, 1);    // swap columns 2 and 4   A.swap_cols(1, 3);    return as_doubles_matrix(A);  // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"swap-rows","dir":"Articles","previous_headings":"","what":"Swap rows","title":"Matrix, vector, cube and field classes","text":".swap_rows( col1, col2 ) member functions Mat, Col, Row, SpMat. swaps contents specified rows.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-39","dir":"Articles","previous_headings":"Swap rows","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"[[cpp11::register]] doubles_matrix<> swap_rows1_(const int& n) {   mat A(n * 5, n, fill::randu);    // swap rows 1 and 2   A.swap_rows(0, 1);    // swap rows 2 and 4   A.swap_rows(1, 3);    return as_doubles_matrix(A);  // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"swap","dir":"Articles","previous_headings":"","what":"Swap","title":"Matrix, vector, cube and field classes","text":".swap( X ) member function Mat, Col, Row, Cube. swaps contents object X.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-40","dir":"Articles","previous_headings":"Swap","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"[[cpp11::register]] doubles_matrix<> swap1_(const int& n) {   mat A(n, n + 1, fill::zeros);   mat B(n * 2, n - 1, fill::ones);    A.swap(B);    return as_doubles_matrix(A);  // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"memory-pointer","dir":"Articles","previous_headings":"","what":"Memory pointer","title":"Matrix, vector, cube and field classes","text":".memptr() member function Mat, Col, Row, Cube. obtains raw pointer memory used storing elements. Data matrices stored column--column order. Data cubes stored slice--slice (matrix--matrix) order.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-41","dir":"Articles","previous_headings":"Memory pointer","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"[[cpp11::register]] doubles_matrix<> memptr1_(const int& n) {   mat A(n, n, fill::randu);   const mat B(n, n, fill::randu);    double* A_mem = A.memptr();   const double* B_mem = B.memptr();    // alter A_mem   // B_mem is const, so it cannot be altered   for (int i = 0; i < n * n; ++i) {     A_mem[i] += 123.0 + B_mem[i];   }    return as_doubles_matrix(A);  // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"caveats-4","dir":"Articles","previous_headings":"Memory pointer","what":"Caveats","title":"Matrix, vector, cube and field classes","text":"pointer becomes invalid operation involving size change aliasing. function recommended use unless know .","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"column-pointer","dir":"Articles","previous_headings":"","what":"Column pointer","title":"Matrix, vector, cube and field classes","text":".colptr( col_number ) member function Mat class obtains raw pointer memory used elements specified column.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-42","dir":"Articles","previous_headings":"Column pointer","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"[[cpp11::register]] doubles_matrix<> colptr1_(const int& n) {   mat A(n, n, fill::randu);    // pointer to the memory of the first column of A   double* Acol1_mem = A.colptr(0);    // alter memory   for (int i = 0; i < n; ++i) {     Acol1_mem[i] += 123.0;   }    return as_doubles_matrix(A);  // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"caveats-5","dir":"Articles","previous_headings":"Column pointer","what":"Caveats","title":"Matrix, vector, cube and field classes","text":"pointer becomes invalid operation involving size change aliasing. function recommended use unless know . safer use submat() instead.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"iterators","dir":"Articles","previous_headings":"","what":"Iterators","title":"Matrix, vector, cube and field classes","text":"Iterators traverse elements within specified range. return column/row/slice object uword type.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"member-functions","dir":"Articles","previous_headings":"Iterators","what":"Member functions","title":"Matrix, vector, cube and field classes","text":"Dense matrices vectors (Mat, Col, Row): .begin() iterator referring first element. .end() iterator referring past end element. .begin_col(col_number) iterator referring first element specified column. .end_col(col_number) iterator referring past--end element specified column. begin_row(row_number) iterator referring first element specified row. end_row(row_number) iterator referring past--end element specified row. Cubes (Cube): begin() iterator referring first element. end() iterator referring past--end element. begin_slice(slice_number) iterator referring first element specified slice. end_slice(slice_number) iterator referring past--end element specified slice. Sparse matrices (SpMat): begin() iterator referring first element. end() iterator referring past--end element. begin_col(col_number) iterator referring first element specified column. end_col(col_number) iterator referring past--end element specified column. begin_row(row_number) iterator referring first element specified row. end_row(row_number) iterator referring past--end element specified row. Dense submatrices subcubes (submatrix subcube): span(row, col) span(row, col, slice) can used specify range elements iterate .","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"iterator-types","dir":"Articles","previous_headings":"Iterators","what":"Iterator types","title":"Matrix, vector, cube and field classes","text":"Dense matrices vectors (Mat, Col, Row): mat::iterator, vec::iterator rowvec::iterator random access iterators, read/write access elements (stored column column). mat::const_iterator, vec::const_iterator rowvec::const_iterator random access iterators, read-access elements (stored column column) mat::col_iterator, vec::col_iterator rowvec::col_iterator random access iterators, read/write access elements specified columns. mat::const_col_iterator, vec::const_col_iterator rowvec::const_col_iterator random access iterators, read-access elements specified columns. mat::row_iterator bidirectional iterator, read/write access elements specified rows. mat::const_row_iterator bidirectional iterator, read-access elements specified rows. vec::row_iterator rowvec::row_iterator random access iterators, read/write access elements specified rows. vec::const_row_iterator rowvec::const_row_iterator random access iterators, read-access elements specified rows. Cubes (Cube): cube::iterator random access iterator, read/write access elements. elements ordered slice slice; elements within slice ordered column column. cube::const_iterator random access iterator, read-access elements. cube::slice_iterator random access iterator, read/write access elements particular slice. elements ordered column column. cube::const_slice_iterator random access iterator, read-access elements particular slice. Sparse matrices (SpMat): sp_mat::iterator bidirectional iterator, read/write access elements (stored column column). sp_mat::const_iterator bidirectional iterator, read-access elements (stored column column). sp_mat::col_iterator bidirectional iterator, read/write access elements specific column. sp_mat::const_col_iterator bidirectional iterator, read-access elements specific column. sp_mat::row_iterator bidirectional iterator, read/write access elements specific row. sp_mat::const_row_iterator bidirectional iterator, read-access elements specific row.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-43","dir":"Articles","previous_headings":"Iterators","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"[[cpp11::register]] doubles_matrix<> iterators1_(const int& n) {   mat X(n, n + 1, fill::randu);    mat::iterator it = X.begin();   mat::iterator it_end = X.end();    for (; it != it_end; ++it) {     (*it) += 123.0;   }    mat::col_iterator col_it = X.begin_col(1);    // start of column 1   mat::col_iterator col_it_end = X.end_col(n);  //   end of column n    for (; col_it != col_it_end; ++col_it) {     (*col_it) = 321.0;   }    return as_doubles_matrix(X);  // Convert from C++ to R } [[cpp11::register]] doubles_matrix<> iterators2_(const int& n) {   cube X(n, n + 1, n + 2, fill::randu);    cube::iterator it = X.begin();   cube::iterator it_end = X.end();    for (; it != it_end; ++it) {     (*it) += 123.0;   }    cube::slice_iterator s_it = X.begin_slice(1);    // start of slice 1   cube::slice_iterator s_it_end = X.end_slice(n);  // end of slice n    for (; s_it != s_it_end; ++s_it) {     (*s_it) = 321.0;   }    mat res = sum(X, 2);    return as_doubles_matrix(res);  // Convert from C++ to R } [[cpp11::register]] doubles_matrix<> iterators3_(const int& n) {   sp_mat X = sprandu<sp_mat>(n, n * 2, 0.1);    sp_mat::iterator it = X.begin();   sp_mat::iterator it_end = X.end();    for (; it != it_end; ++it) {     (*it) += 123.0;   }    return as_doubles_matrix(X);  // Convert from C++ to R } [[cpp11::register]] doubles_matrix<> iterators4_(const int& n) {   mat X(n, n, fill::randu);    for (double& val : X(span(0, 1), span(1, 1))) {     val = 123.0;   }    return as_doubles_matrix(X);  // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"caveats-6","dir":"Articles","previous_headings":"Iterators","what":"Caveats","title":"Matrix, vector, cube and field classes","text":"Writing zero value sparse matrix iterator invalidate current iterators associated sparse matrix. modify non-zero elements safer manner, use .transform() .for_each() instead iterators. submatrix subcube iterators intended used range-based loops. use supported. example, direct use .begin() .end() functions, well underlying iterators types supported. implementation submatrices subcubes uses short-lived temporary objects subject automatic deletion, error-prone handle manually.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"compatibility-container-functions","dir":"Articles","previous_headings":"","what":"Compatibility container functions","title":"Matrix, vector, cube and field classes","text":"Member functions Col Row classes mimic functionality containers C++ standard library: .front() accesses first element vector. .back() accesses last element vector. Member functions Col, Row, Mat, Cube SpMat classes mimic functionality containers C++ standard library: .clear() removes elements object. .empty() returns true object elements false object one elements. .size() returns total number elements object.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-44","dir":"Articles","previous_headings":"Compatibility container functions","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"[[cpp11::register]] doubles compatibility1_(const int& n) {   vec X(n, fill::randu);    writable::doubles res = {X.front(), X.back()};    res.attr(\"names\") = strings({\"front\", \"back\"});    return res; } [[cpp11::register]] integers compatibility2_(const int& n) {   mat X(n, n, fill::randu);    writable::integers res(2);   res[0] = X.n_rows;    X.clear();   res[1] = X.n_rows;    res.attr(\"names\") = strings({\"before\", \"after\"});    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"convert-matrix-to-column","dir":"Articles","previous_headings":"","what":"Convert matrix to column","title":"Matrix, vector, cube and field classes","text":".as_col() member function Mat class, returns flattened version matrix column vector. Flattening done concatenating columns.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-45","dir":"Articles","previous_headings":"Convert matrix to column","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"[[cpp11::register]] doubles as_col1_(const int& n) {   mat M(n, n + 1, fill::randu);   vec V = M.as_col();   return as_doubles(V); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"convert-matrix-to-row","dir":"Articles","previous_headings":"","what":"Convert matrix to row","title":"Matrix, vector, cube and field classes","text":".as_row() member function Mat class, returns flattened version matrix row vector. Flattening done concatenating rows.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-46","dir":"Articles","previous_headings":"Convert matrix to row","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"[[cpp11::register]] doubles as_row1_(const int& n) {   mat M(n, n + 1, fill::randu);   vec V = M.as_row();   return as_doubles(V); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"caveat-6","dir":"Articles","previous_headings":"Convert matrix to row","what":"Caveat","title":"Matrix, vector, cube and field classes","text":"Converting columns rows faster converting rows columns.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"convert-column-to-matrix","dir":"Articles","previous_headings":"","what":"Convert column to matrix","title":"Matrix, vector, cube and field classes","text":".col_as_mat(col_number) member function Cube class, returns matrix specified cube column number rows preserved. Given cube size R x C x S, resultant matrix size R x S.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-47","dir":"Articles","previous_headings":"Convert column to matrix","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"[[cpp11::register]] list col_as_mat1_(const int& n) {   cube C(n, n + 1, n + 2, fill::randu);   mat M = C.col_as_mat(0);  // size n x (n + 1)      writable::list res(5);   res[0] = as_doubles_matrix(C.slice(0));   res[1] = as_doubles_matrix(C.slice(1));   res[2] = as_doubles_matrix(C.slice(2));   res[3] = as_doubles_matrix(C.slice(3));   res[4] = as_doubles_matrix(M);    res.attr(\"names\") = strings({\"slice0\", \"slice1\", \"slice2\", \"slice3\",     \"col_as_mat\"});    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"convert-column-to-matrix-1","dir":"Articles","previous_headings":"","what":"Convert column to matrix","title":"Matrix, vector, cube and field classes","text":".row_as_mat(row_number) member function Cube class, returns matrix specified cube row number columns preserved. Given cube size R x C x S, resultant matrix size S x C.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-48","dir":"Articles","previous_headings":"Convert column to matrix","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"[[cpp11::register]] list row_as_mat1_(const int& n) {   cube C(n, n + 1, n + 2, fill::randu);   mat M = C.row_as_mat(0);  // size (n + 2) x (n + 1)    writable::list res(5);   res[0] = as_doubles_matrix(C.slice(0));   res[1] = as_doubles_matrix(C.slice(1));   res[2] = as_doubles_matrix(C.slice(2));   res[3] = as_doubles_matrix(C.slice(3));   res[4] = as_doubles_matrix(M);    res.attr(\"names\") = strings({\"slice0\", \"slice1\", \"slice2\", \"slice3\",     \"row_as_mat\"});    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"convert-sparse-matrix-to-dense-matrix","dir":"Articles","previous_headings":"","what":"Convert sparse matrix to dense matrix","title":"Matrix, vector, cube and field classes","text":".as_dense() member function SpMat class, avoids construction intermediate sparse matrix representation expression.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-49","dir":"Articles","previous_headings":"Convert sparse matrix to dense matrix","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"[[cpp11::register]] doubles as_dense1_(const int& n) {   sp_mat A;   A.sprandu(n, n, 0.1);    // extract column 1 of A directly into dense column vector   colvec c = A.col(0).as_dense();    // store the sum of each column of A directly in dense row vector   rowvec r = sum(A).as_dense();    return as_doubles(c + r.t()); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"dense-matrix-and-vector-transposition","dir":"Articles","previous_headings":"","what":"Dense matrix and vector transposition","title":"Matrix, vector, cube and field classes","text":".t() member function Mat, Col Row classes, returns transposed copy object. real matrices, transpose simple transposition elements. complex matrices, transpose Hermitian conjugate transposition elements (e.g., signs imaginary components flipped).","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-50","dir":"Articles","previous_headings":"Dense matrix and vector transposition","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"[[cpp11::register]] doubles_matrix<> transpose1_(const int& n) {   mat A(n, n + 1, fill::randu);   mat B = A.t();   return as_doubles_matrix(B); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"sparse-matrix-transposition","dir":"Articles","previous_headings":"","what":"Sparse matrix transposition","title":"Matrix, vector, cube and field classes","text":".st() member function SpMat classe, returns transposed copy object. real matrices, applicable. complex matrices, transpose simple transposition elements (e.g., signs imaginary components flipped).","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-51","dir":"Articles","previous_headings":"Sparse matrix transposition","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"[[cpp11::register]] doubles_matrix<> transpose2_(const int& n) {   sp_mat A;   A.sprandu(n, n + 1, 0.1);   sp_mat B = A.t();   return as_doubles_matrix(B); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"matrix-inversion","dir":"Articles","previous_headings":"","what":"Matrix inversion","title":"Matrix, vector, cube and field classes","text":".() member function Mat class, provides inverse matrix. matrix square sized, std::logic_error exception thrown. matrix appears singular, output matrix reset std::runtime_error exception thrown.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-52","dir":"Articles","previous_headings":"Matrix inversion","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"[[cpp11::register]] doubles inverse1_(const doubles_matrix<>& a,                                       const doubles b) {   mat A = as_Mat(a);   vec B = as_Col(b);    mat X = inv(A);   vec Y = X * B;    return as_doubles(Y); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"caveats-7","dir":"Articles","previous_headings":"Matrix inversion","what":"Caveats","title":"Matrix, vector, cube and field classes","text":"matrix known symmetric positive definite, inv_sympd(). solve system linear equations, Z = inv(X) * Y, solve() can faster /accurate.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"maximum-and-minimum","dir":"Articles","previous_headings":"","what":"Maximum and minimum","title":"Matrix, vector, cube and field classes","text":".min() .max() member functions Mat, Col, Row, Cube classes. return minimum maximum values object, respectively. objects complex numbers, absolute values used comparison.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-53","dir":"Articles","previous_headings":"Maximum and minimum","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"[[cpp11::register]] doubles maxmin1_(const int& n) {   mat A = randu<mat>(n, n);    writable::doubles res(2);   res[0] = A.max();   res[1] = A.min();    res.attr(\"names\") = strings({\"max\", \"min\"});    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"linear-index-of-maximum-and-minimum","dir":"Articles","previous_headings":"","what":"Linear index of maximum and minimum","title":"Matrix, vector, cube and field classes","text":".index_min() .index_max() member functions Mat, Col, Row, Cube classes. return linear index minimum maximum values object, respectively. objects complex numbers, absolute values used comparison. returned index type uword.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-54","dir":"Articles","previous_headings":"Linear index of maximum and minimum","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"[[cpp11::register]] doubles index_maxmin1_(const int& n) {   mat A = randu<mat>(n, n);    writable::doubles res(6);   res[0] = static_cast<int>(A.index_max());   res[1] = static_cast<int>(A.index_min());   res[2] = A(0, 0);   res[3] = A(1, 0);   res[4] = A(0, 1);   res[5] = A(1, 1);    res.attr(\"names\") = strings({\"index_max\", \"index_min\", \"element0\", \"element1\",     \"element2\", \"element3\"});    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"in-range","dir":"Articles","previous_headings":"","what":"In-range","title":"Matrix, vector, cube and field classes","text":".in_range(** **) member function Mat, Col, Row, Cube, SpMat field, returns true given location span currently valid false object empty, location bounds, span bounds. Instances span(,b) can replaced : span() span::indicate entire range. span() indicate particular row, column, slice.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-55","dir":"Articles","previous_headings":"In-range","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"[[cpp11::register]] logicals in_range1_(const int& n) {   mat A(n, n + 1, fill::randu);    writable::logicals res(3);   res[0] = A.in_range(0, 0);   res[1] = A.in_range(3, 4);   res[2] = A.in_range(4, 5);    res.attr(\"names\") = strings({\"in_range00\", \"in_range34\", \"in_range45\"});    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"is-empty","dir":"Articles","previous_headings":"","what":"Is empty","title":"Matrix, vector, cube and field classes","text":".is_empty() member function Mat, Col, Row, Cube, SpMat, field classes. returns true object elements false object one elements.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-56","dir":"Articles","previous_headings":"Is empty","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"[[cpp11::register]] logicals is_empty1_(const int& n) {   mat A(n, n + 1, fill::randu);    writable::logicals res(2);   res[0] = A.is_empty();    A.reset();   res[1] = A.is_empty();    res.attr(\"names\") = strings({\"before_reset\", \"after_reset\"});    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"is-vectorcolumn-vectorrow-vector","dir":"Articles","previous_headings":"","what":"Is vector/column vector/row vector","title":"Matrix, vector, cube and field classes","text":".is_vec(), .is_colvec() .is_rowvec() member functions Mat SpMat. .is_vec() returns true matrix can interpreted vector (either column row vector) false otherwise. .is_colvec() returns true matrix can interpreted column vector false otherwise. .is_rowvec() returns true matrix can interpreted row vector false otherwise.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-57","dir":"Articles","previous_headings":"Is vector/column vector/row vector","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"[[cpp11::register]] logicals is_vec1_(const int& n) {   mat A(n, 1, fill::randu);   mat B(1, n, fill::randu);   mat C(0, 1, fill::randu);   mat D(1, 0, fill::randu);    writable::logicals res(5);   res[0] = A.is_vec();   res[1] = A.is_colvec();   res[2] = B.is_rowvec();   res[3] = C.is_colvec();   res[4] = D.is_rowvec();    res.attr(\"names\") = strings({\"Nx1_is_vec\", \"Nx1_is_colvec\", \"1xN_is_rowvec\",     \"0x1_is_colvec\", \"1x0_is_rowvec\"});    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"caveat-7","dir":"Articles","previous_headings":"Is vector/column vector/row vector","what":"Caveat","title":"Matrix, vector, cube and field classes","text":"assume vector elements functions return true. possible empty vector (e.g., 0x1 examples).","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"is-sorted","dir":"Articles","previous_headings":"","what":"Is sorted","title":"Matrix, vector, cube and field classes","text":".is_sorted(), .is_sorted(sort_direction) .is_sorted(sort_direction, dim) member function Mat, Row, Col. matrices vectors complex numbers, order checked via absolute values. object vector, return bool indicating whether elements sorted. object matrix, return bool indicating whether elements sorted column (dim = 0, default) row (dim = 1), dim argument optional. sort_direction argument optional, sort_direction can one following strings: \"ascend\": elements ascending, consecutive elements can equal, default operation. \"descend\": elements descending, consecutive elements can equal. \"strictascend\": elements strictly ascending, consecutive elements equal. \"strictdescend\": elements strictly descending, consecutive elements equal.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-58","dir":"Articles","previous_headings":"Is sorted","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"[[cpp11::register]] logicals is_sorted1_(const int& n) {   vec a(n, fill::randu);   vec b = sort(a);   mat A(10, 10, fill::randu);    writable::logicals res(4);   res[0] = a.is_sorted();   res[1] = b.is_sorted();   res[2] = A.is_sorted(\"descend\", 1);   res[4] = A.is_sorted(\"ascend\", 1);    res.attr(\"names\") = strings({\"a_sorted\", \"b_sorted\", \"A_descend\",     \"A_ascend\"});    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"is-upper-triangularlower-triangular","dir":"Articles","previous_headings":"","what":"Is upper triangular/lower triangular","title":"Matrix, vector, cube and field classes","text":".is_trimatu() .is_trimatl() member functions Mat SpMat. .is_trimatu() returns true matrix upper triangular (e.g., matrix square sized elements main diagonal zero) false otherwise. .is_trimatl() returns true matrix lower triangular (e.g., matrix square sized elements main diagonal zero) false otherwise.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-59","dir":"Articles","previous_headings":"Is upper triangular/lower triangular","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"[[cpp11::register]] logicals is_triangular1_(const int& n) {   mat A(n, n, fill::randu);   mat B = trimatl(A);    writable::logicals res(3);   res[0] = B.is_trimatu();   res[1] = B.is_trimatl();    B.reset();   res[2] = B.is_trimatu();    res.attr(\"names\") = strings({\"is_trimatu\", \"is_trimatl\",     \"is_trimatu_after_reset\"});    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"caveat-8","dir":"Articles","previous_headings":"Is upper triangular/lower triangular","what":"Caveat","title":"Matrix, vector, cube and field classes","text":"functions return true, assume matrix contains non-zero elements /main diagonal. possible empty matrix (e.g., 0x0 examples).","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"is-diagonal","dir":"Articles","previous_headings":"","what":"Is diagonal","title":"Matrix, vector, cube and field classes","text":"is_diagmat() member function Mat SpMat. returns true matrix diagonal (e.g., elements outside main diagonal zero). matrix square sized, std::logic_error exception thrown.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-60","dir":"Articles","previous_headings":"Is diagonal","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"[[cpp11::register]] logicals is_diagonal1_(const int& n) {   mat A(n, n, fill::randu);   mat B = diagmat(A);    writable::logicals res(3);   res[0] = A.is_diagmat();   res[1] = B.is_diagmat();    A.reset();   res[2] = A.is_diagmat();    res.attr(\"names\") = strings({\"A_diagmat\", \"B_diagmat\",     \"A_diagmat_after_reset\"});    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"caveat-9","dir":"Articles","previous_headings":"Is diagonal","what":"Caveat","title":"Matrix, vector, cube and field classes","text":"function returns true, assume matrix contains non-zero elements main diagonal . possible empty matrix (e.g., 0x0 examples).","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"is-square","dir":"Articles","previous_headings":"","what":"Is square","title":"Matrix, vector, cube and field classes","text":".is_square() member function Mat SpMat classes. returns true matrix square sized (e.g., number rows equal number columns) false otherwise.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-61","dir":"Articles","previous_headings":"Is square","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"[[cpp11::register]] logicals is_square1_(const int& n) {   mat A(n, n, fill::randu);   mat B = diagmat(A);    writable::logicals res(3);   res[0] = A.is_square();   res[1] = B.is_square();    A.reset();   res[2] = A.is_square();    res.attr(\"names\") = strings({\"A_square\", \"B_square\",     \"A_square_after_reset\"});    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"caveats-8","dir":"Articles","previous_headings":"Is square","what":"Caveats","title":"Matrix, vector, cube and field classes","text":"function returns true, assume matrix non-empty. possible empty matrix (e.g., 0x0 examples).","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"is-symmetric","dir":"Articles","previous_headings":"","what":"Is symmetric","title":"Matrix, vector, cube and field classes","text":".is_symmetric() member function Mat SpMat classes. returns true matrix symmetric (e.g., matrix square sized transpose equal original matrix) false otherwise.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-62","dir":"Articles","previous_headings":"Is symmetric","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"[[cpp11::register]] logicals is_symmetric1_(const int& n) {   mat A(n, n, fill::randu);   mat B = symmatu(A);    writable::logicals res(3);   res[0] = A.is_symmetric();   res[1] = B.is_symmetric();    A.reset();   res[2] = A.is_symmetric();    res.attr(\"names\") = strings({\"A_symmetric\", \"B_symmetric\",     \"A_symmetric_after_reset\"});    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"caveats-9","dir":"Articles","previous_headings":"Is symmetric","what":"Caveats","title":"Matrix, vector, cube and field classes","text":"function returns true, assume matrix non-empty. possible empty matrix (e.g., 0x0 examples).","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"is-hermitian","dir":"Articles","previous_headings":"","what":"Is hermitian","title":"Matrix, vector, cube and field classes","text":".is_hermitian() member function Mat SpMat classes. returns true matrix Hermitian self-adjoint (e.g., matrix square sized conjugate transpose equal original matrix) false otherwise.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-63","dir":"Articles","previous_headings":"Is hermitian","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"[[cpp11::register]] logicals is_hermitian1_(const int& n) {   cx_mat A(n, n, fill::randu);   cx_mat B = A.t() * A;    writable::logicals res(3);   res[0] = A.is_hermitian();   res[1] = B.is_hermitian();    A.reset();   res[2] = A.is_hermitian();    res.attr(\"names\") = strings({\"A_hermitian\", \"B_hermitian\",     \"A_hermitian_after_reset\"});    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"caveats-10","dir":"Articles","previous_headings":"Is hermitian","what":"Caveats","title":"Matrix, vector, cube and field classes","text":"function returns true, assume matrix non-empty. possible empty matrix (e.g., 0x0 examples).","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"is-symmetrichermitian-positive-definite","dir":"Articles","previous_headings":"","what":"Is symmetric/hermitian positive definite","title":"Matrix, vector, cube and field classes","text":".is_sympd() .is_sympd(tol) member function Mat SpMat classes. returns true matrix symmetric/hermitian positive definite within tolerance (e.g., matrix square sized eigenvalues positive) false otherwise. tol argument optional, default tol = 100 * datum::eps * norm(X, \"fro\").","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-64","dir":"Articles","previous_headings":"Is symmetric/hermitian positive definite","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"[[cpp11::register]] logicals is_sympd1_(const int& n) {   mat A(n, n, fill::randu);   mat B = A * A.t();    writable::logicals res(3);   res[0] = A.is_sympd();   res[1] = B.is_sympd();    A.reset();   res[2] = A.is_sympd();    res.attr(\"names\") = strings({\"A_sympd\", \"B_sympd\",     \"A_sympd_after_reset\"});    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"is-zero","dir":"Articles","previous_headings":"","what":"Is zero","title":"Matrix, vector, cube and field classes","text":".is_zero() .is_zero(tol) member function Mat, Col, Row, Cube, SpMat classes. returns true elements zero within tolerance false otherwise. complex numbers, component (real imaginary) checked separately. tol argument optional.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-65","dir":"Articles","previous_headings":"Is zero","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"[[cpp11::register]] logicals is_zero1_(const int& n) {   mat A(n, n, fill::randu);   cube B(n, n, n, fill::zeros);   sp_mat C(n, n);    writable::logicals res(3);   res[0] = A.is_zero(0.005);   res[1] = B.is_zero(0.005);   res[2] = C.is_zero(0.005);    res.attr(\"names\") = strings({\"A_is_zero\", \"B_is_zero\", \"C_is_zero\"});    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"is-finite","dir":"Articles","previous_headings":"","what":"Is finite","title":"Matrix, vector, cube and field classes","text":".is_finite() member function Mat, Col, Row, Cube, SpMat classes. returns true elements finite false otherwise.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-66","dir":"Articles","previous_headings":"Is finite","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"[[cpp11::register]] logicals is_finite1_(const int& n) {   mat A(n, n, fill::randu);   cube B(n, n, n, fill::randu);   sp_mat C(n, n);    // Insert infinite values   B(0, 0, 0) = datum::inf;   C(0, 0) = -1.0 * datum::inf;    writable::logicals res(3);   res[0] = A.is_finite();   res[1] = B.is_finite();   res[2] = C.is_finite();    res.attr(\"names\") = strings({\"A_is_finite\", \"B_is_finite\", \"C_is_finite\"});    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"has-infinity","dir":"Articles","previous_headings":"","what":"Has infinity","title":"Matrix, vector, cube and field classes","text":".has_inf() member function Mat, Col, Row, Cube, SpMat classes. returns true object contains least one infinite value false otherwise.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-67","dir":"Articles","previous_headings":"Has infinity","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"[[cpp11::register]] logicals has_inf1_(const int& n) {   mat A(n, n, fill::randu);   cube B(n, n, n, fill::randu);   sp_mat C(n, n);    // Insert infinite values   B(0, 0, 0) = datum::inf;   C(0, 0) = -1.0 * datum::inf;    writable::logicals res(3);   res[0] = A.has_inf();   res[1] = B.has_inf();   res[2] = C.has_inf();    res.attr(\"names\") = strings({\"A_has_inf\", \"B_has_inf\", \"C_has_inf\"});    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"has-not-a-number","dir":"Articles","previous_headings":"","what":"Has not-a-number","title":"Matrix, vector, cube and field classes","text":".has_nan() member function Mat, Col, Row, Cube, SpMat classes. returns true object contains least one --number (NaN) value false otherwise.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"examples-68","dir":"Articles","previous_headings":"Has not-a-number","what":"Examples","title":"Matrix, vector, cube and field classes","text":"","code":"[[cpp11::register]] logicals has_nan1_(const int& n) {   mat A(n, n, fill::randu);   cube B(n, n, n, fill::randu);   sp_mat C(n, n);    // Insert NaN values   B(0, 0, 0) = datum::nan;   C(0, 0) = -1.0 * datum::nan;    writable::logicals res(3);   res[0] = A.has_nan();   res[1] = B.has_nan();   res[2] = C.has_nan();    res.attr(\"names\") = strings({\"A_has_nan\", \"B_has_nan\", \"C_has_nan\"});    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/matrix-vector-cube-and-field-classes.html","id":"caveat-10","dir":"Articles","previous_headings":"Has not-a-number","what":"Caveat","title":"Matrix, vector, cube and field classes","text":"NaN equal anything, even .","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"attributes","dir":"Articles","previous_headings":"","what":"Attributes","title":"Member functions and variables","text":"n_* provides information different objects: .n_rows number rows Mat, Col, Row, Cube, field, SpMat. .n_cols number columns Mat, Col, Row, Cube, field, SpMat. .n_elem total number elements Mat, Col, Row, Cube, field, SpMat. .n_slices number slices Cube field. .n_nonzero number non-zero elements SpMat. Col Row classes, n_elem also indicates vector length. variables read-type uword. change size, use set_size, copy_size, zeros_member, ones_member, reset. avoid compiler warnings implicit conversion operating uword integers/doubles pass data R, converte uword int static_cast<int> declare int.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"examples","dir":"Articles","previous_headings":"Attributes","what":"Examples","title":"Member functions and variables","text":"","code":"a <- matrix(runif(4), nrow = 2, ncol = 2) [[cpp11::register]] integers attr1_(const doubles_matrix<>& a) {   mat A = as_Mat(a);  // convert from R to C++    // uword or int can be used   int n_rows = A.n_rows;  // number of rows   int n_cols = A.n_cols;  // number of columns   int n_elem = A.n_elem;  // number of elements    writable::integers res({n_rows, n_cols, n_elem});   res.attr(\"names\") = strings({\"n_rows\", \"n_cols\", \"n_elem\"});    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"elementobject-access","dir":"Articles","previous_headings":"","what":"Element/object access","title":"Member functions and variables","text":"Provide access individual elements objects stored container object (e.g., Mat, Col, Row, Cube, field). () vec rowvec, access element stored index . Mat, Cube field, access element/object stored index assumption flat layout, column-major ordering data (e.g., column column). exception thrown requested element bounds. .() [] (), without bounds check. recommended. (r,c) Mat 2D field classes, access element/object stored row r column c. exception thrown requested element bounds. .(r,c) (r,c), without bounds check. recommended. (r,c,s) Cube 3D field classes, access element/object stored row r, column c, slice s. exception thrown requested element bounds. .(r,c,s) (r,c,s), without bounds check. recommended.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"examples-1","dir":"Articles","previous_headings":"Element/object access","what":"Examples","title":"Member functions and variables","text":"","code":"a <- matrix(runif(4), nrow = 2, ncol = 2) [[cpp11::register]] doubles_matrix<> access1_(const doubles_matrix<>& a) {   mat A = as_Mat(a);  // convert from R to C++   A(1,1) = 123.0;     // set element at row 2, column 2    vec B(2, fill::randu);    double x = A(0,1);  // copy element at row 1, column 2 to a double   double y = B(1);    // copy element at coordinate 2 to a double    uword i, j; // int also works   uword N = A.n_rows;   uword M = A.n_cols;    for(i = 0; i < N; ++i) {     for(j = 0; j < M; ++j) {       A(i,j) = A(i,j) + x + y;     }   }    return as_doubles_matrix(A);  // convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"caveats","dir":"Articles","previous_headings":"Element/object access","what":"Caveats","title":"Member functions and variables","text":".() [], .(r,c) .(r,c,s): Indexing C++ starts 0 Accessing elements without bounds checks slightly faster, recommended code thoroughly debugged first Accessing elements via [r,c] [r,c,s] work correctly C++; instead use (r,c) (r,c,s) indices elements specified via uword type, typedef unsigned integer type. using loops access elements, efficient use uword instead int.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"element-initialisation","dir":"Articles","previous_headings":"","what":"Element initialisation","title":"Member functions and variables","text":"Set elements Mat, Col Row via braced initialiser lists.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"examples-2","dir":"Articles","previous_headings":"Element initialisation","what":"Examples","title":"Member functions and variables","text":"","code":"a <- matrix(runif(4), nrow = 2, ncol = 2) [[cpp11::register]] doubles_matrix<> initialization1_(const doubles_matrix<>& a) {   mat A = as_Mat(a);  // convert from R to C++   mat B = {{1, 2}, {3, 4}}; // create new matrix   vec C = {1, 2}; // create new column vector    // sum C to the diagonal of A   A(0,0) = A(0,0) + C(0);   A(1,1) = A(1,1) + C(1);    mat D = A + B;      return as_doubles_matrix(D);  // convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"zeros","dir":"Articles","previous_headings":"","what":"Zeros","title":"Member functions and variables","text":"Set elements object zero, optionally first changing size specified dimensions. .zeros() (member function Mat, Col, Row, SpMat, Cube) .zeros(n_elem) (member function Col Row) .zeros(n_rows, n_cols) (member function Mat SpMat) .zeros(n_rows, n_cols, n_slices) (member function Cube) .zeros(size(X)) (member function Mat, Col, Row, Cube, SpMat)","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"examples-3","dir":"Articles","previous_headings":"Zeros","what":"Examples","title":"Member functions and variables","text":"","code":"a <- matrix(runif(4), nrow = 2, ncol = 2) [[cpp11::register]] doubles_matrix<> zeros1_(const doubles_matrix<>& a) {   mat A = as_Mat(a);  // convert from R to C++   A.zeros();          // set all elements to zero    mat B;   B.zeros(size(A)); // set size to be the same as A and set all elements to zero    mat C(A.n_rows, A.n_cols, fill::zeros);    mat D = A + B + C;    return as_doubles_matrix(D);  // convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"ones","dir":"Articles","previous_headings":"","what":"Ones","title":"Member functions and variables","text":"Set elements object one, optionally first changing size specified dimensions.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"examples-4","dir":"Articles","previous_headings":"Ones","what":"Examples","title":"Member functions and variables","text":"","code":"a <- matrix(runif(4), nrow = 2, ncol = 2) [[cpp11::register]] doubles_matrix<> ones1_(const doubles_matrix<>& a) {   mat A = as_Mat(a);  // convert from R to C++   A.ones();          // set all elements to zero    mat B;   B.ones(size(A)); // set size to be the same as A and set all elements to zero    mat C(A.n_rows, A.n_cols, fill::ones);    mat D = A + B + C;    return as_doubles_matrix(D);  // convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"eye","dir":"Articles","previous_headings":"","what":"Eye","title":"Member functions and variables","text":".eye() member function Mat SpMat. .eye(n_rows, n_cols) sets elements along main diagonal one -diagonal elements zero, optionally first changing size specified dimensions. .eye(size(X)) creates identity matrix generated n_rows = n_cols.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"examples-5","dir":"Articles","previous_headings":"Eye","what":"Examples","title":"Member functions and variables","text":"","code":"a <- matrix(runif(4), nrow = 2, ncol = 2) [[cpp11::register]] doubles_matrix<> eye1_(const doubles_matrix<>& a) {   mat A = as_Mat(a);  // convert from R to C++   A.eye();            // create an identity matrix    mat B;   B.eye(size(A)); // another identity matrix    uword N = A.n_rows;   uword M = A.n_cols;   mat C(N, M, fill::randu);   C.eye(N, M); // yet another identity matrix    mat D = A + B + C;    return as_doubles_matrix(D);  // convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"random-uniform","dir":"Articles","previous_headings":"","what":"Random uniform","title":"Member functions and variables","text":"Set elements random values uniform distribution [0,1] interval, optionally first changing size specified dimensions. complex elements, real imaginary parts treated separately.","code":"a <- matrix(runif(4), nrow = 2, ncol = 2) [[cpp11::register]] doubles_matrix<> randu1_(const doubles_matrix<>& a) {   mat A = as_Mat(a);  // convert from R to C++    mat B;   B.randu(size(A)); // random uniform matrix with the same size as A    mat C(A.n_rows, A.n_cols, fill::randu);    mat D = A + B + C;    return as_doubles_matrix(D);  // convert from C++ to R }  [[cpp11::register]] doubles_matrix<> randu2_(const int& n) {   GetRNGstate();  // Ensure R's RNG state is synchronized   mat y(n, n);   ::arma_rng::randu<double>::fill(y.memptr(), y.n_elem);   PutRNGstate();    return as_doubles_matrix(y); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"normal-distribution","dir":"Articles","previous_headings":"","what":"Normal distribution","title":"Member functions and variables","text":"Set elements random values normal distribution zero mean unit variance, optionally first changing size specified dimensions. complex elements, real imaginary parts treated separately.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"examples-6","dir":"Articles","previous_headings":"Normal distribution","what":"Examples","title":"Member functions and variables","text":"","code":"a <- matrix(runif(4), nrow = 2, ncol = 2) [[cpp11::register]] doubles_matrix<> randn1_(const doubles_matrix<>& a) {   mat A = as_Mat(a);  // convert from R to C++    mat B;   B.randn(size(A)); // random normal matrix with the same size as A    mat C(A.n_rows, A.n_cols, fill::randn);    mat D = A + B + C;    return as_doubles_matrix(D);  // convert from C++ to R }  [[cpp11::register]] doubles_matrix<> randn2_(const int& n) {   GetRNGstate();  // Ensure R's RNG state is synchronized   mat y(n, n);   ::arma_rng::randn<double>::fill(y.memptr(), y.n_elem);   PutRNGstate();      return as_doubles_matrix(y); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"fill","dir":"Articles","previous_headings":"","what":"Fill","title":"Member functions and variables","text":"Sets elements specified value .fill(value) member function Mat, Col, Row, Cube, field. type value must match type elements used container object (e.g., Mat type double)","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"examples-7","dir":"Articles","previous_headings":"Fill","what":"Examples","title":"Member functions and variables","text":"","code":"a <- matrix(runif(4), nrow = 2, ncol = 2) [[cpp11::register]] doubles_matrix<> fill1_(const doubles_matrix<>& a) {   mat A = as_Mat(a);  // convert from R to C++    uword N = A.n_rows;   uword M = A.n_cols;    mat B(size(A), fill::value(200.0));  // create a matrix filled with 200.0   mat C(N, M, fill::value(100.0));     // matrix filled with 100.0   mat D(N, M, fill::zeros);            // matrix filled with zeros   mat E(N, M, fill::ones);             // matrix filled with ones    mat F = A + B + C + D + E;    return as_doubles_matrix(F);  // convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"imbue","dir":"Articles","previous_headings":"","what":"Imbue","title":"Member functions and variables","text":".imbue(functor) member function Mat, Col, Row Cube, fills elements values provided functor. argument can functor lambda function. matrices, filling done column--column (e.g., column 0 filled, column 1, etc.) cubes, filling done slice--slice, slice treated matrix","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"examples-8","dir":"Articles","previous_headings":"Imbue","what":"Examples","title":"Member functions and variables","text":"","code":"a <- matrix(runif(4), nrow = 2, ncol = 2) [[cpp11::register]] doubles_matrix<> imbue1_(const doubles_matrix<>& a) {   mat A = as_Mat(a);  // convert from R to C++    std::mt19937 engine;  // Mersenne twister random number engine   std::uniform_real_distribution<double> distr(0.0, 1.0);    mat B(size(A), fill::none);                // create an empty matrix   B.imbue([&]() { return distr(engine); });  // fill with random values    mat C = A + B;    return as_doubles_matrix(C);  // convert from C++ to R }  [[cpp11::register]] doubles_matrix<> imbue2_(const doubles_matrix<>& a) {   GetRNGstate();  // Ensure R's RNG state is synchronized    mat A = as_Mat(a);  // Convert from R to C++    mat B(size(A), fill::none);  // Create an empty matrix   B.imbue([]() { return unif_rand(); });  // Fill with random values    mat C = A + B;    PutRNGstate();    return as_doubles_matrix(C);  // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"clean","dir":"Articles","previous_headings":"","what":"Clean","title":"Member functions and variables","text":".clean(threshold) member function Mat, Col, Row, Cube, SpMat. can used sparsify matrix, sense zeroing values small magnitudes. objects non-complex elements: element absolute value less equal threshold replaced zero. objects complex elements: element, component (real imaginary) absolute value less equal threshold replaced zero.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"examples-9","dir":"Articles","previous_headings":"Clean","what":"Examples","title":"Member functions and variables","text":"","code":"[[cpp11::register]] doubles_matrix<> clean1_(const int& n) {   mat A(n, n, fill::randu); // create a random matrix    A(0, 0) = datum::eps; // set the diagonal with small values (+/- epsilon)   A(1, 1) = -datum::eps;    A.clean(datum::eps); // set elements with small values to zero    return as_doubles_matrix(A); // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"caveat","dir":"Articles","previous_headings":"Clean","what":"Caveat","title":"Member functions and variables","text":"explicitly convert dense storage sparse storage, use SpMat.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"replace","dir":"Articles","previous_headings":"","what":"Replace","title":"Member functions and variables","text":".replace( old_value, new_value ) member function Mat, Col, Row, Cube, SpMat. elements equal old_value, set new_value.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"examples-10","dir":"Articles","previous_headings":"Replace","what":"Examples","title":"Member functions and variables","text":"","code":"[[cpp11::register]] doubles_matrix<> replace1_(const int& n) {   mat A(n, n, fill::randu); // create a random matrix    A.diag().fill(datum::nan); // set the diagonal with NaN values   A.replace(datum::nan, 0);  // replace each NaN with 0    return as_doubles_matrix(A); // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"caveats-1","dir":"Articles","previous_headings":"Replace","what":"Caveats","title":"Member functions and variables","text":"type old_value new_value must match type elements used container object (e.g., Mat type double). Floating point numbers (float double) approximations due limited precision. sparse matrices (SpMat), replacement done old_value = 0.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"clamp","dir":"Articles","previous_headings":"","what":"Clamp","title":"Member functions and variables","text":".clamp(min_value, max_value) member function Mat, Col, Row, Cube SpMat transforms values lower min_val min_val, values higher max_val max_val. complex elements, real imaginary components clamped separately. sparse matrices, clamping applied non-zero elements.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"examples-11","dir":"Articles","previous_headings":"Clamp","what":"Examples","title":"Member functions and variables","text":"","code":"[[cpp11::register]] doubles_matrix<> clamp1_(const int& n) {   mat A(n, n, fill::randu); // create a random matrix   A.diag().fill(0.1);       // set the diagonal with 0.1 values    A.clamp(0.2, 0.8); // clamp values to the [0.2, 0.8] interval    return as_doubles_matrix(A); // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"transform","dir":"Articles","previous_headings":"","what":"Transform","title":"Member functions and variables","text":".transform(functor) member function Mat, Col, Row, Cube, SpMat. argument can functor lambda function. dense matrices, transformation done column--column elements. sparse matrices, transformation done column--column non-zero elements. cubes, transformation done slice--slice, slice treated matrix.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"examples-12","dir":"Articles","previous_headings":"Transform","what":"Examples","title":"Member functions and variables","text":"","code":"[[cpp11::register]] doubles_matrix<> transform1_(const int& n) {   mat A(n, n, fill::ones);  // create a matrix filled with ones   A.transform([](double val) { return (val + 122.0); });   return as_doubles_matrix(A); // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"for-each","dir":"Articles","previous_headings":"","what":"For each","title":"Member functions and variables","text":".for_each(functor) member function Mat, Col, Row, Cube, SpMat, field. argument can functor lambda function. dense matrices fields, processing done column--column elements. sparse matrices, processing done column--column non-zero elements. cubes, processing done slice--slice, slice treated matrix.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"examples-13","dir":"Articles","previous_headings":"For each","what":"Examples","title":"Member functions and variables","text":"","code":"[[cpp11::register]] doubles_matrix<> for_each1_(const int& n) {   // add 122 to each element in a dense matrix, the '&' is important   mat D(n, n, fill::ones);   D.for_each([](mat::elem_type& val) { val += 122.0; });    // add 122 to each non-zero element in a sparse matrix   sp_mat S;   S.sprandu(n, n, 1.0);   S.for_each([](sp_mat::elem_type& val) { val += 123.0; });    // set the size of all matrices in a field   field<mat> F(2, 2);   F.for_each([n](mat& X) { X.zeros(n, n); });  // capture n for the lambda    mat res = D + S + F(0) + F(1);    return as_doubles_matrix(res);  // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"set-size","dir":"Articles","previous_headings":"","what":"Set size","title":"Member functions and variables","text":"Change size object, without explicitly preserving data without initialising elements (e.g., elements may contain garbage values, including NaN). .set_size(n_elem) (member function Col, Row, field) .set_size(n_rows, n_cols) (member function Mat, SpMat, field) .set_size(n_rows, n_cols, n_slices) (member function Cube field) .set_size(size(X)) (member function Mat, Col, Row, Cube, SpMat, field) initialise elements zero changing size, use .zeros() instead. explicitly preserve data changing size, use .reshape() .resize() instead.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"examples-14","dir":"Articles","previous_headings":"Set size","what":"Examples","title":"Member functions and variables","text":"","code":"[[cpp11::register]] doubles set_size1_(const int& n) {   mat A;   A.set_size(n, n);  // or:  mat A(n, n, fill::none);    mat B;   B.set_size(size(A));  // or:  mat B(size(A), fill::none);    vec C;   C.set_size(n);  // or:  vec v(n, fill::none);    A.fill(1.0);  // set all elements to 1.0   B.fill(2.0);  // set all elements to 2.0   C.fill(3.0);  // set all elements to 3.0    vec res = A.col(0) + B.col(1) + C;    return as_doubles(res);  // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"reshape","dir":"Articles","previous_headings":"","what":"Reshape","title":"Member functions and variables","text":"Recreate object according given size specifications, elements taken previous version object column-wise manner. elements generated object placed column-wise (e.g., first column filled filling second column) .reshape(n_rows, n_cols) (member function Mat SpMat) .reshape(n_rows, n_cols, n_slices) (member function Cube) .reshape(size(X)) (member function Mat, Cube, SpMat) layout elements recreated object different layout previous version object total number elements previous version object less specified size, extra elements recreated object set zero total number elements previous version object greater specified size, subset elements taken","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"examples-15","dir":"Articles","previous_headings":"Reshape","what":"Examples","title":"Member functions and variables","text":"","code":"[[cpp11::register]] doubles_matrix<> reshape1_(const int& n) {   mat A(n + 1, n - 1, fill::randu);   A.reshape(n - 1, n + 1);   return as_doubles_matrix(A);  // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"caveats-2","dir":"Articles","previous_headings":"Reshape","what":"Caveats","title":"Member functions and variables","text":".reshape() considerably slower .set_size(). change size without preserving data, use .set_size(). grow/shrink object preserving elements layout elements, use .resize() flatten matrix vector, use vectorise() .as_col()/.as_row().","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"resize","dir":"Articles","previous_headings":"","what":"Resize","title":"Member functions and variables","text":"Resize object according given size specifications, preserving elements layout elements. can used growing shrinking object (e.g., adding/removing rows, /columns, /slices). .resize(n_elem): member function Col, Row. .resize(n_rows, n_cols): member function Mat SpMat. .resize(n_rows, n_cols, n_slices): member function Cube. .resize(size(X)): member function Mat, Col, Row, Cube, SpMat.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"examples-16","dir":"Articles","previous_headings":"Resize","what":"Examples","title":"Member functions and variables","text":"","code":"[[cpp11::register]] doubles_matrix<> resize1_(const int& n) {   mat A(n + 1, n - 1, fill::randu);   A.resize(n - 1, n + 1);   return as_doubles_matrix(A);  // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"caveats-3","dir":"Articles","previous_headings":"Resize","what":"Caveats","title":"Member functions and variables","text":".resize() considerably slower .set_size(). change size without preserving data, .set_size() instead.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"copy-size","dir":"Articles","previous_headings":"","what":"Copy size","title":"Member functions and variables","text":".copy_size() sets size matrix/vector/cube matrix/vector/cube .","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"examples-17","dir":"Articles","previous_headings":"Copy size","what":"Examples","title":"Member functions and variables","text":"","code":"[[cpp11::register]] integers copy_size1_(const int& n) {   mat A(n, n, fill::randu);    mat B;   B.copy_size(A);    int N = B.n_rows;   int M = B.n_cols;      writable::integers res({N, M});   res.attr(\"names\") = strings({\"n_rows\", \"n_cols\"});    return as_integers(res);  // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"caveat-1","dir":"Articles","previous_headings":"Copy size","what":"Caveat","title":"Member functions and variables","text":"set size object B, must type B. example, size matrix set providing cube.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"reset","dir":"Articles","previous_headings":"","what":"Reset","title":"Member functions and variables","text":".reset() sets matrix/vector size zero (object elements).","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"examples-18","dir":"Articles","previous_headings":"Reset","what":"Examples","title":"Member functions and variables","text":"","code":"[[cpp11::register]] integers reset1_(const int& n) {   mat A(n, n, fill::randu);   A.reset();    int N = A.n_rows;   int M = A.n_cols;      writable::integers res({N, M});   res.attr(\"names\") = strings({\"n_rows\", \"n_cols\"});    return as_integers(res);  // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"submatrix-views","dir":"Articles","previous_headings":"","what":"Submatrix views","title":"Member functions and variables","text":"collection member functions Mat, Col Row classes provide read/write access submatrix views.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"contiguous-views-for-matrix","dir":"Articles","previous_headings":"Submatrix views","what":"Contiguous views for matrix","title":"Member functions and variables","text":"X.col(col_number) X.row(row_number) X.cols(first_col, last_col) X.rows(first_row, last_row) X.submat(first_row, first_col, last_row, last_col) X(span(first_row, last_row), span(first_col, last_col)) X(first_row, first_col, size(n_rows, n_cols)) X(first_row, first_col, size(Y)) (Y matrix) X(span(first_row, last_row), col_number) X(row_number, span(first_col, last_col)) X.head_cols(number_of_cols) X.head_rows(number_of_rows) X.tail_cols(number_of_cols) X.tail_rows(number_of_rows) X.unsafe_col(col_number) (use caution)","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"contiguous-views-for-vector","dir":"Articles","previous_headings":"Submatrix views","what":"Contiguous views for vector","title":"Member functions and variables","text":"Y(span(first_index, last_index)) Y.subvec(first_index, last_index) Y.subvec(first_index, size(X)) (X vector) Y.head(number_of_elements) Y.tail(number_of_elements)","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"non-contiguous-views-for-matrix-or-vector","dir":"Articles","previous_headings":"Submatrix views","what":"Non-contiguous views for matrix or vector:","title":"Member functions and variables","text":"X.elem(vector_of_indices) X(vector_of_indices) X.cols(vector_of_column_indices) X.rows(vector_of_row_indices) X.submat(vector_of_row_indices, vector_of_column_indices) X(vector_of_row_indices, vector_of_column_indices) Instances span(start, end) can replaced span::all_ indicate entire range. functions requiring one vector indices, example X.submat(vector_of_row_indices, vector_of_column_indices), vector indices must type uvec. function X.elem(vector_of_indices), elements specified vector_of_indices accessed. X interpreted one long vector, column--column ordering elements X. vector_of_indices must evaluate vector type uvec (e.g., generated find() function). aggregate set specified elements treated column vector (e.g., output X.elem() always column vector). function .unsafe_col() provided speed reasons used know . creates seemingly independent Col vector object (e.g., vec), uses memory existing matrix object. , created vector alias safe, take account underlying matrix memory freed (e.g., due operation involving size change matrix).","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"examples-19","dir":"Articles","previous_headings":"Submatrix views","what":"Examples","title":"Member functions and variables","text":"","code":"[[cpp11::register]] doubles_matrix<> subview1_(const int& n) {   mat A(n, n, fill::zeros);    A.submat(0,1,2,3) = randu<mat>(3,3);   A(span(0,2), span(1,3)) = randu<mat>(3,3);   A(0,1, size(3,3)) = randu<mat>(3,3);    mat B = A.submat(0,1,2,3);   mat C = A(span(0,2), span(1,3) );   mat D = A(0, 1, size(3,3) );    A.col(1) = randu<mat>(5,1);   A(span::all, 1) = randu<mat>(5,1);    mat X(5, 5, fill::randu);        // get all elements of X that are greater than 0.5   vec q = X.elem( find(X > 0.5) );        // add 123 to all elements of X greater than 0.5   X.elem( find(X > 0.5) ) += 123.0;        // set four specific elements of X to 1   uvec indices = { 2, 3, 6, 8 };        X.elem(indices) = ones<vec>(4);        // add 123 to the last 5 elements of vector a   vec a(10, fill::randu);   a.tail(5) += 123.0;        // add 123 to the first 3 elements of column 2 of X   X.col(2).head(3) += 123;    return as_doubles_matrix(X);  // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"subcube-views-and-slices","dir":"Articles","previous_headings":"","what":"Subcube views and slices","title":"Member functions and variables","text":"collection member functions Cube class provide subcube views.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"contiguous-views-for-cube","dir":"Articles","previous_headings":"Subcube views and slices","what":"Contiguous views for cube","title":"Member functions and variables","text":"Q.slice(slice_number) Q.slices(first_slice, last_slice) Q.row(row_number) Q.rows(first_row, last_row) Q.col(col_number) Q.cols(first_col, last_col) Q.subcube( first_row, first_col, first_slice, last_row, last_col, last_slice) Q(span(first_row, last_row), span(first_col, last_col), span(first_slice, last_slice)) Q(first_row, first_col, first_slice, size(n_rows, n_cols, n_slices)) Q(first_row, first_col, first_slice, size(R)) (R cube) Q.head_slices(number_of_slices) Q.tail_slices(number_of_slices) Q.tube(row, col) Q.tube(first_row, first_col, last_row, last_col) Q.tube(span(first_row, last_row), span(first_col, last_col)) Q.tube(first_row, first_col, size(n_rows, n_cols))","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"non-contiguous-views-for-cube","dir":"Articles","previous_headings":"Subcube views and slices","what":"Non-contiguous views for cube","title":"Member functions and variables","text":"Q.elem(vector_of_indices), Q(vector_of_indices), Q.slices( vector_of_slice_indices) instances span(,b) can replaced : span() span::, indicate entire range. span(), indicate particular row, column slice. individual slice, accessed via .slice(), instance Mat class (reference matrix provided). .tube() forms variants .subcube(), using first_slice = 0 last_slice = Q.n_slices-1. .tube(row,col) form uses row = first_row = last_row, col = first_col = last_col. function Q.elem(vector_of_indices), elements specified vector_of_indices accessed. Q interpreted one long vector, slice--slice column--column ordering elements Q. vector_of_indices must evaluate vector type uvec (e.g., generated find() function). aggregate set specified elements treated column vector (e.g., output Q.elem() always column vector). function Q.slices(vector_of_slice_indices), slices specified vector_of_slice_indices accessed. vector_of_slice_indices must evaluate vector type uvec.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"examples-20","dir":"Articles","previous_headings":"Subcube views and slices","what":"Examples","title":"Member functions and variables","text":"","code":"[[cpp11::register]] doubles_matrix<> subview2_(const int& n) {   cube A(n, 3, 4, fill::randu);        mat B = A.slice(1); // each slice is a matrix        A.slice(0) = randu<mat>(2,3);   A.slice(0)(1,2) = 99.0;        A.subcube(0,0,1,  1,1,2)           = randu<cube>(2,2,2);   A(span(0,1), span(0,1), span(1,2)) = randu<cube>(2,2,2);   A(0,0,1, size(2,2,2))              = randu<cube>(2,2,2);        // add 123 to all elements of A greater than 0.5   A.elem( find(A > 0.5) ) += 123.0;        cube C = A.head_slices(2);  // get first two slices        A.head_slices(2) += 123.0;    mat res = A.slice(0) + B + C.slice(1);    return as_doubles_matrix(res);  // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"subfield-views","dir":"Articles","previous_headings":"","what":"Subfield views","title":"Member functions and variables","text":"collection member functions field class provide subfield views. 2D field F, subfields accessed : F.row(row_number) F.col(col_number) F.rows(first_row, last_row) F.cols(first_col, last_col) F.subfield(first_row, first_col, last_row, last_col) F(span(first_row, last_row), span(first_col, last_col)) F(first_row, first_col, size(G)) (G 2D field) F(first_row, first_col, size(n_rows, n_cols)) 3D field F, subfields accessed : F.slice(slice_number) F.slices(first_slice, last_slice) F.subfield(first_row, first_col, first_slice, last_row, last_col, last_slice) F(span(first_row, last_row), span(first_col, last_col), span(first_slice, last_slice)) F(first_row, first_col, first_slice, size(G)) (G 3D field) F(first_row, first_col, first_slice, size(n_rows, n_cols, n_slices)) Instances span(,b) can replaced : span() span::, indicate entire range. span(), indicate particular row column.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"diagonal","dir":"Articles","previous_headings":"","what":"Diagonal","title":"Member functions and variables","text":".diag() member functions Mat SpMat read/write access diagonal matrix. argument can empty value k specify diagonal (k = 0 default). diagonal interpreted column vector within expressions. k = 0 indicates main diagonal (default setting) k < 0 indicates k-th sub-diagonal (main diagonal, towards bottom-left corner) k > 0 indicates k-th super-diagonal (main diagonal, towards top-right corner)","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"examples-21","dir":"Articles","previous_headings":"Diagonal","what":"Examples","title":"Member functions and variables","text":"","code":"[[cpp11::register]] doubles diagonal1_(const int& n) {   mat X(n, n, fill::randu);    vec A = X.diag(); // extract the main diagonal   double B = accu(X.diag(1)); // sum of elements on the first upper diagonal   double C = accu(X.diag(-1)); // sum of elements on the first lower diagonal    X.diag() = randu<vec>(n);   X.diag() += A;   X.diag() /= B;   X.diag() *= C;    sp_mat S = sprandu<sp_mat>(n, n, 0.0);   S.diag().ones();    vec v(S.diag());  // copy sparse diagonal to dense vector   v += X.diag();    return as_doubles(v);  // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"caveat-2","dir":"Articles","previous_headings":"Diagonal","what":"Caveat","title":"Member functions and variables","text":"calculate diagonal elements compound expression, use diagvec() diagmat().","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"each-col","dir":"Articles","previous_headings":"","what":"Each col","title":"Member functions and variables","text":".each_col() member function Mat. applies vector operation column matrix, similar “broadcasting” Matlab/Octave. argument can empty, vector indices, lambda function.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"examples-22","dir":"Articles","previous_headings":"Each col","what":"Examples","title":"Member functions and variables","text":"","code":"[[cpp11::register]] doubles_matrix<> each_col1_(const int& n) {   mat X(n, n + 1, fill::ones);    // create a vector with n elements ranging from 5 to 10   vec v = linspace<vec>(5, 10, n);    // in-place addition of v to each column vector of X   X.each_col() += v;    // generate Y by adding v to each column vector of X   mat Y = X.each_col() + v;    // subtract v from columns 1 and 2 of X   X.cols(0, 1).each_col() -= v;    uvec indices(2);   indices(0) = 1;   indices(1) = 2;    X.each_col(indices) = v;  // copy v to columns 1 and 2 of X    // lambda function with non-const vector   X.each_col([](vec& a) { 2 * a; });    const mat& XX = X;    // lambda function with const vector   XX.each_col([](const vec& b) { 3 * b; });    mat res = X + Y + XX;    return as_doubles_matrix(res);  // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"each-row","dir":"Articles","previous_headings":"","what":"Each row","title":"Member functions and variables","text":".each_row(), .each_row(vector_of_indices), .each_row(lambdaction) member functions Mat. apply vector operation row matrix, similar “broadcasting” Matlab/Octave.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"form-1","dir":"Articles","previous_headings":"Each row","what":"Form 1","title":"Member functions and variables","text":".each_row() supports following operations: + addition += -place addition - subtraction -= -place subtraction % element-wise multiplication %= -place element-wise multiplication / element-wise division /= -place element-wise division = assignment (copy)","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"form-2","dir":"Articles","previous_headings":"Each row","what":"Form 2","title":"Member functions and variables","text":".each_row(vector_of_indices) supports operations form 1. argument vector_of_indices contains list indices rows used, must evaluate vector type uvec.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"form-3","dir":"Articles","previous_headings":"Each row","what":"Form 3","title":"Member functions and variables","text":".each_col(lambdaction) applies given lambdaction column vector. function must accept reference Row object element type underlying matrix.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"examples-23","dir":"Articles","previous_headings":"Each row","what":"Examples","title":"Member functions and variables","text":"","code":"[[cpp11::register]] doubles_matrix<> each_row1_(const int& n) {   mat X(n + 1, n, fill::ones);    // create a vector with n elements ranging from 5 to 10   rowvec v = linspace<rowvec>(5, 10, n);    // in-place addition of v to each rows vector of X   X.each_row() += v;    // generate Y by adding v to each rows vector of X   mat Y = X.each_row() + v;    // subtract v from rows 1 and 2 of X   X.rows(0, 1).each_row() -= v;    uvec indices(2);   indices(0) = 1;   indices(1) = 2;    X.each_row(indices) = v;       // copy v to columns 1 and 2 of X    // lambda function with non-const vector   X.each_row([](rowvec& a) { a / 2; });    const mat& XX = X;    // lambda function with const vector   XX.each_row([](const rowvec& b) { b / 3; });    mat res = X + Y + XX;    return as_doubles_matrix(res);  // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"each-slice","dir":"Articles","previous_headings":"","what":"Each slice","title":"Member functions and variables","text":".each_slice() member function Cube applies matrix operation slice cube, slice treated matrix. similar “broadcasting” Matlab/Octave.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"form-1-1","dir":"Articles","previous_headings":"Each slice","what":"Form 1","title":"Member functions and variables","text":".each_slice(vector_of_indices) Supported operations: + addition += -place addition - subtraction -= -place subtraction % element-wise multiplication %= -place element-wise multiplication / element-wise division /= -place element-wise division * matrix multiplication *= -place matrix multiplication = assignment (copy)","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"form-2-1","dir":"Articles","previous_headings":"Each slice","what":"Form 2","title":"Member functions and variables","text":".each_slice(lambdaction) argument vector_of_indices contains list indices slices used; must evaluate vector type uvec. Arithmetic operations per form 1 supported, except * *= (e.g., matrix multiplication).","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"form-3-1","dir":"Articles","previous_headings":"Each slice","what":"Form 3","title":"Member functions and variables","text":".each_slice(lambdaction, use_mp) Apply given lambdaction slice. function must accept reference Mat object element type underlying cube.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"form-4","dir":"Articles","previous_headings":"Each slice","what":"Form 4","title":"Member functions and variables","text":"Apply given lambdaction slice, per form 3. argument use_mp bool enable use OpenMP multi-threaded execution lambdaction multiple slices time. order processing slices deterministic (e.g., slice 2 can processed slice 1). lambdaction must thread-safe, e.g., must write variables outside scope.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"examples-24","dir":"Articles","previous_headings":"Each slice","what":"Examples:","title":"Member functions and variables","text":"","code":"[[cpp11::register]] doubles_matrix<> each_slice1_(const int& n) {   cube C(n, n + 1, 6, fill::randu);    mat M = repmat(linspace<vec>(1, n, n), 1, n + 1);    C.each_slice() += M;  // in-place addition of M to each slice of C    cube D = C.each_slice() + M;  // generate D by adding M to each slice of C    // sum all slices of D into a single n x (n + 1) matrix   mat D_flat = sum(D, 2);    uvec indices(2);   indices(0) = 2;   indices(1) = 4;    C.each_slice(indices) = M;  // copy M to slices 2 and 4 in C   C.each_slice([](mat& X) { X * 2.0; });  // lambda function with non-const matrix   mat C_flat = sum(C, 2);    const cube& CC = C;   CC.each_slice([](const mat& X) { X / 3.0; });  // lambda function with const matrix    mat CC_flat = sum(CC, 2);    mat res = C_flat + D_flat + CC_flat;    return as_doubles_matrix(res);  // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"set-real","dir":"Articles","previous_headings":"","what":"Set real","title":"Member functions and variables","text":".set_real(X) sets real part object. X must size recipient object.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"examples-25","dir":"Articles","previous_headings":"Set real","what":"Examples","title":"Member functions and variables","text":"","code":"[[cpp11::register]] list set_real1_(const int& n) {   mat A(n + 1, n - 1, fill::randu);    cx_mat C(n + 1, n - 1, fill::zeros);    C.set_real(A);    return as_complex_matrix(C);  // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"caveat-3","dir":"Articles","previous_headings":"Set real","what":"Caveat","title":"Member functions and variables","text":"directly construct complex matrix two real matrices, following code faster:","code":"[[cpp11::register]] list set_real2_(const int& n) {       mat A(n - 1, n + 1, fill::randu);   mat B(n - 1, n + 1, fill::randu);      cx_mat C = cx_mat(A,B);    return as_complex_matrix(C);  // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"set-imaginary","dir":"Articles","previous_headings":"","what":"Set imaginary","title":"Member functions and variables","text":".set_imaginary(X) sets imaginary part object. X must size recipient object.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"examples-26","dir":"Articles","previous_headings":"Set imaginary","what":"Examples","title":"Member functions and variables","text":"","code":"[[cpp11::register]] list set_imag1_(const int& n) {   mat B(n + 1, n - 1, fill::randu);    cx_mat C(n + 1, n - 1, fill::zeros);    C.set_imag(B);    return as_complex_matrix(C);  // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"caveat-4","dir":"Articles","previous_headings":"Set imaginary","what":"Caveat","title":"Member functions and variables","text":"directly construct complex matrix two real matrices, following code faster:","code":"[[cpp11::register]] list set_imag2_(const int& n) {       mat A(n - 1, n + 1, fill::randu);   mat B(n - 1, n + 1, fill::randu);      cx_mat C = cx_mat(A,B);    return as_complex_matrix(C);  // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"insert-columns","dir":"Articles","previous_headings":"","what":"Insert columns","title":"Member functions and variables","text":".insert_cols() member function Mat, Row Cube. arguments can colnumber, X indicate column number matrix insert, colnumber, number_of_cols indicate column number number columns insert. X argument inserts copy X specified column. X must number rows (slices) recipient object. number_of_cols argument expands object creating new columns set zero.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"examples-27","dir":"Articles","previous_headings":"Insert columns","what":"Examples","title":"Member functions and variables","text":"","code":"[[cpp11::register]] doubles_matrix<> insert_columns1_(const int& n) {   mat A(n, n * 2, fill::randu);   mat B(n, n - 1, fill::ones);    // at column n - 1, insert a copy of B   // A will now have 3n - 1 columns   A.insert_cols(n - 1, B);    // at column 1, insert 2n zeroed columns   // B will now have 3n - 1 columns   B.insert_cols(1, n * 2);    mat res = A + B;    return as_doubles_matrix(res);  // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"insert-rows","dir":"Articles","previous_headings":"","what":"Insert rows","title":"Member functions and variables","text":".insert_rows() member function Mat, Row Cube. arguments can rownumber, X indicate row number matrix insert, rownumber, number_of_rows indicate row number number rows insert. X argument inserts copy X specified column. X must number columns (slices) recipient object. number_of_rows argument expands object creating new rows set zero.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"examples-28","dir":"Articles","previous_headings":"Insert rows","what":"Examples","title":"Member functions and variables","text":"","code":"[[cpp11::register]] doubles_matrix<> insert_rows1_(const int& n) {   mat A(n * 2, n, fill::randu);   mat B(n - 1, n, fill::ones);    // at row n - 1, insert a copy of B   // A will now have 3n - 1 rows   A.insert_rows(n - 1, B);    // at row 1, insert 2n zeroed rows   // B will now have 3n - 1 columns   B.insert_rows(1, n * 2);    mat res = A + B;    return as_doubles_matrix(res);  // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"insert-slice","dir":"Articles","previous_headings":"","what":"Insert slice","title":"Member functions and variables","text":".insert_slices() member function Cube. arguments can slice_number, X indicate slice number matrix insert, slice_number, number_of_slices indicate slice number number slices insert. X argument inserts copy X specified slice. X must number columns rows recipient object. number_of_slices argument expands object creating new slices set zero.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"examples-29","dir":"Articles","previous_headings":"Insert slice","what":"Examples","title":"Member functions and variables","text":"","code":"[[cpp11::register]] doubles_matrix<> insert_slices1_(const int& n) {   cube A(n, n, n * 2, fill::randu);   cube B(n, n, n - 1, fill::ones);    // At slice n - 1, insert a copy of B   // A will now have 3n - 1 slices   A.insert_slices(n - 1, B);    // At slice 1, insert 2n zeroed slices   // B will now have 3n - 1 slices   B.insert_slices(1, n * 2);    mat res = sum(A + B);    return as_doubles_matrix(res);  // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"shed-columns","dir":"Articles","previous_headings":"","what":"Shed columns","title":"Member functions and variables","text":".shed_col(row_number) .shed_cols(first_row, last_row) member functions Mat, Col, SpMat, Cube. single scalar argument remove specified column, two scalar arguments removes specified range columns. .shed_cols(vector_of_indices) member function Mat Col. vector indices must evaluate vector type uvec containing indices columns remove.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"examples-30","dir":"Articles","previous_headings":"Shed columns","what":"Examples","title":"Member functions and variables","text":"","code":"[[cpp11::register]] doubles_matrix<> shed_columns1_(const int& n) {   mat A(n, n * 5, fill::randu);    // remove the first column   A.shed_col(0);    // remove columns 1 and 2   A.shed_cols(0, 1);    // remove columns 2 and 4   uvec indices(2);   indices(0) = 1;   indices(1) = 3;   A.shed_cols(indices);    return as_doubles_matrix(A);  // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"shed-rows","dir":"Articles","previous_headings":"","what":"Shed rows","title":"Member functions and variables","text":".shed_row(row_number) .shed_rows(first_row, last_row) member functions Mat, Col, SpMat, Cube. single scalar argument remove specified rows, two scalar arguments removes specified range rows. .shed_rows(vector_of_indices) member function Mat Row. vector indices must evaluate vector type uvec containing indices rows remove.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"examples-31","dir":"Articles","previous_headings":"Shed rows","what":"Examples","title":"Member functions and variables","text":"","code":"[[cpp11::register]] doubles_matrix<> shed_rows1_(const int& n) {   mat A(n * 5, n, fill::randu);    // remove the first row   A.shed_row(0);    // remove rows 1 and 2   A.shed_rows(0, 1);    // remove rows 2 and 4   uvec indices(2);   indices(0) = 1;   indices(1) = 3;   A.shed_rows(indices);    return as_doubles_matrix(A);  // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"shed-slices","dir":"Articles","previous_headings":"","what":"Shed slices","title":"Member functions and variables","text":".shed_slices() member function Cube. single scalar argument remove specified slices, two scalar arguments removes specified range slices. vector indices must evaluate vector type uvec containing indices rows remove. arguments can slice_number indicate slice number remove, first_slice, last_slice indicate range slices remove, vector_of_indices indicate indices slices remove.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"examples-32","dir":"Articles","previous_headings":"Shed slices","what":"Examples","title":"Member functions and variables","text":"","code":"[[cpp11::register]] doubles_matrix<> shed_slices1_(const int& n) {   cube A(n, n, n * 5, fill::randu);    // remove the first slice   A.shed_slice(0);    // remove slices 1 and 2   A.shed_slices(0, 1);    // remove slices 2 and 4   uvec indices(2);   indices(0) = 1;   indices(1) = 3;   A.shed_slices(indices);    mat res = sum(A, 2);    return as_doubles_matrix(res);  // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"swap-columns","dir":"Articles","previous_headings":"","what":"Swap columns","title":"Member functions and variables","text":".swap_cols( col1, col2 ) member functions Mat, Col, Row, SpMat. swaps contents specified columns.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"examples-33","dir":"Articles","previous_headings":"Swap columns","what":"Examples","title":"Member functions and variables","text":"","code":"[[cpp11::register]] doubles_matrix<> swap_columns1_(const int& n) {   mat A(n, n * 5, fill::randu);    // swap columns 1 and 2   A.swap_cols(0, 1);    // swap columns 2 and 4   A.swap_cols(1, 3);    return as_doubles_matrix(A);  // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"swap-rows","dir":"Articles","previous_headings":"","what":"Swap rows","title":"Member functions and variables","text":".swap_rows( col1, col2 ) member functions Mat, Col, Row, SpMat. swaps contents specified rows.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"examples-34","dir":"Articles","previous_headings":"Swap rows","what":"Examples","title":"Member functions and variables","text":"","code":"[[cpp11::register]] doubles_matrix<> swap_rows1_(const int& n) {   mat A(n * 5, n, fill::randu);    // swap rows 1 and 2   A.swap_rows(0, 1);    // swap rows 2 and 4   A.swap_rows(1, 3);    return as_doubles_matrix(A);  // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"swap","dir":"Articles","previous_headings":"","what":"Swap","title":"Member functions and variables","text":".swap( X ) member function Mat, Col, Row, Cube. swaps contents object X.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"examples-35","dir":"Articles","previous_headings":"Swap","what":"Examples","title":"Member functions and variables","text":"","code":"[[cpp11::register]] doubles_matrix<> swap1_(const int& n) {   mat A(n, n + 1, fill::zeros);   mat B(n * 2, n - 1, fill::ones);    A.swap(B);    return as_doubles_matrix(A);  // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"memory-pointer","dir":"Articles","previous_headings":"","what":"Memory pointer","title":"Member functions and variables","text":".memptr() member function Mat, Col, Row, Cube. obtains raw pointer memory used storing elements. Data matrices stored column--column order. Data cubes stored slice--slice (matrix--matrix) order.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"examples-36","dir":"Articles","previous_headings":"Memory pointer","what":"Examples","title":"Member functions and variables","text":"","code":"[[cpp11::register]] doubles_matrix<> memptr1_(const int& n) {   mat A(n, n, fill::randu);   const mat B(n, n, fill::randu);    double* A_mem = A.memptr();   const double* B_mem = B.memptr();    // alter A_mem   // B_mem is const, so it cannot be altered   for (int i = 0; i < n * n; ++i) {     A_mem[i] += 123.0 + B_mem[i];   }    return as_doubles_matrix(A);  // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"caveats-4","dir":"Articles","previous_headings":"Memory pointer","what":"Caveats","title":"Member functions and variables","text":"pointer becomes invalid operation involving size change aliasing. function recommended use unless know .","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"column-pointer","dir":"Articles","previous_headings":"","what":"Column pointer","title":"Member functions and variables","text":".colptr( col_number ) member function Mat class obtains raw pointer memory used elements specified column.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"examples-37","dir":"Articles","previous_headings":"Column pointer","what":"Examples","title":"Member functions and variables","text":"","code":"[[cpp11::register]] doubles_matrix<> colptr1_(const int& n) {   mat A(n, n, fill::randu);    // pointer to the memory of the first column of A   double* Acol1_mem = A.colptr(0);    // alter memory   for (int i = 0; i < n; ++i) {     Acol1_mem[i] += 123.0;   }    return as_doubles_matrix(A);  // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"caveats-5","dir":"Articles","previous_headings":"Column pointer","what":"Caveats","title":"Member functions and variables","text":"pointer becomes invalid operation involving size change aliasing. function recommended use unless know . safer use submat() instead.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"iterators","dir":"Articles","previous_headings":"","what":"Iterators","title":"Member functions and variables","text":"Iterators traverse elements within specified range. return column/row/slice object uword type.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"member-functions","dir":"Articles","previous_headings":"Iterators","what":"Member functions","title":"Member functions and variables","text":"Dense matrices vectors (Mat, Col, Row): .begin() iterator referring first element. .end() iterator referring past end element. .begin_col(col_number) iterator referring first element specified column. .end_col(col_number) iterator referring past--end element specified column. begin_row(row_number) iterator referring first element specified row. end_row(row_number) iterator referring past--end element specified row. Cubes (Cube): begin() iterator referring first element. end() iterator referring past--end element. begin_slice(slice_number) iterator referring first element specified slice. end_slice(slice_number) iterator referring past--end element specified slice. Sparse matrices (SpMat): begin() iterator referring first element. end() iterator referring past--end element. begin_col(col_number) iterator referring first element specified column. end_col(col_number) iterator referring past--end element specified column. begin_row(row_number) iterator referring first element specified row. end_row(row_number) iterator referring past--end element specified row. Dense submatrices subcubes (submatrix subcube): span(row, col) span(row, col, slice) can used specify range elements iterate .","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"iterator-types","dir":"Articles","previous_headings":"Iterators","what":"Iterator types","title":"Member functions and variables","text":"Dense matrices vectors (Mat, Col, Row): mat::iterator, vec::iterator rowvec::iterator random access iterators, read/write access elements (stored column column). mat::const_iterator, vec::const_iterator rowvec::const_iterator random access iterators, read-access elements (stored column column) mat::col_iterator, vec::col_iterator rowvec::col_iterator random access iterators, read/write access elements specified columns. mat::const_col_iterator, vec::const_col_iterator rowvec::const_col_iterator random access iterators, read-access elements specified columns. mat::row_iterator bidirectional iterator, read/write access elements specified rows. mat::const_row_iterator bidirectional iterator, read-access elements specified rows. vec::row_iterator rowvec::row_iterator random access iterators, read/write access elements specified rows. vec::const_row_iterator rowvec::const_row_iterator random access iterators, read-access elements specified rows. Cubes (Cube): cube::iterator random access iterator, read/write access elements. elements ordered slice slice; elements within slice ordered column column. cube::const_iterator random access iterator, read-access elements. cube::slice_iterator random access iterator, read/write access elements particular slice. elements ordered column column. cube::const_slice_iterator random access iterator, read-access elements particular slice. Sparse matrices (SpMat): sp_mat::iterator bidirectional iterator, read/write access elements (stored column column). sp_mat::const_iterator bidirectional iterator, read-access elements (stored column column). sp_mat::col_iterator bidirectional iterator, read/write access elements specific column. sp_mat::const_col_iterator bidirectional iterator, read-access elements specific column. sp_mat::row_iterator bidirectional iterator, read/write access elements specific row. sp_mat::const_row_iterator bidirectional iterator, read-access elements specific row.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"examples-38","dir":"Articles","previous_headings":"Iterators","what":"Examples","title":"Member functions and variables","text":"","code":"[[cpp11::register]] doubles_matrix<> iterators1_(const int& n) {   mat X(n, n + 1, fill::randu);    mat::iterator it = X.begin();   mat::iterator it_end = X.end();    for (; it != it_end; ++it) {     (*it) += 123.0;   }    mat::col_iterator col_it = X.begin_col(1);    // start of column 1   mat::col_iterator col_it_end = X.end_col(n);  //   end of column n    for (; col_it != col_it_end; ++col_it) {     (*col_it) = 321.0;   }    return as_doubles_matrix(X);  // Convert from C++ to R } [[cpp11::register]] doubles_matrix<> iterators2_(const int& n) {   cube X(n, n + 1, n + 2, fill::randu);    cube::iterator it = X.begin();   cube::iterator it_end = X.end();    for (; it != it_end; ++it) {     (*it) += 123.0;   }    cube::slice_iterator s_it = X.begin_slice(1);    // start of slice 1   cube::slice_iterator s_it_end = X.end_slice(n);  // end of slice n    for (; s_it != s_it_end; ++s_it) {     (*s_it) = 321.0;   }    mat res = sum(X, 2);    return as_doubles_matrix(res);  // Convert from C++ to R } [[cpp11::register]] doubles_matrix<> iterators3_(const int& n) {   sp_mat X = sprandu<sp_mat>(n, n * 2, 0.1);    sp_mat::iterator it = X.begin();   sp_mat::iterator it_end = X.end();    for (; it != it_end; ++it) {     (*it) += 123.0;   }    return as_doubles_matrix(X);  // Convert from C++ to R } [[cpp11::register]] doubles_matrix<> iterators4_(const int& n) {   mat X(n, n, fill::randu);    for (double& val : X(span(0, 1), span(1, 1))) {     val = 123.0;   }    return as_doubles_matrix(X);  // Convert from C++ to R }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"caveats-6","dir":"Articles","previous_headings":"Iterators","what":"Caveats","title":"Member functions and variables","text":"Writing zero value sparse matrix iterator invalidate current iterators associated sparse matrix. modify non-zero elements safer manner, use .transform() .for_each() instead iterators. submatrix subcube iterators intended used range-based loops. use supported. example, direct use .begin() .end() functions, well underlying iterators types supported. implementation submatrices subcubes uses short-lived temporary objects subject automatic deletion, error-prone handle manually.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"compatibility-container-functions","dir":"Articles","previous_headings":"","what":"Compatibility container functions","title":"Member functions and variables","text":"Member functions Col Row classes mimic functionality containers C++ standard library: .front() accesses first element vector. .back() accesses last element vector. Member functions Col, Row, Mat, Cube SpMat classes mimic functionality containers C++ standard library: .clear() removes elements object. .empty() returns true object elements false object one elements. .size() returns total number elements object.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"examples-39","dir":"Articles","previous_headings":"Compatibility container functions","what":"Examples","title":"Member functions and variables","text":"","code":"[[cpp11::register]] doubles compatibility1_(const int& n) {   vec X(n, fill::randu);    writable::doubles res = {X.front(), X.back()};    res.attr(\"names\") = strings({\"front\", \"back\"});    return res; } [[cpp11::register]] integers compatibility2_(const int& n) {   mat X(n, n, fill::randu);    writable::integers res(2);   res[0] = X.n_rows;    X.clear();   res[1] = X.n_rows;    res.attr(\"names\") = strings({\"before\", \"after\"});    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"convert-matrix-to-column","dir":"Articles","previous_headings":"","what":"Convert matrix to column","title":"Member functions and variables","text":".as_col() member function Mat class, returns flattened version matrix column vector. Flattening done concatenating columns.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"examples-40","dir":"Articles","previous_headings":"Convert matrix to column","what":"Examples","title":"Member functions and variables","text":"","code":"[[cpp11::register]] doubles as_col1_(const int& n) {   mat M(n, n + 1, fill::randu);   vec V = M.as_col();   return as_doubles(V); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"convert-matrix-to-row","dir":"Articles","previous_headings":"","what":"Convert matrix to row","title":"Member functions and variables","text":".as_row() member function Mat class, returns flattened version matrix row vector. Flattening done concatenating rows.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"examples-41","dir":"Articles","previous_headings":"Convert matrix to row","what":"Examples","title":"Member functions and variables","text":"","code":"[[cpp11::register]] doubles as_row1_(const int& n) {   mat M(n, n + 1, fill::randu);   vec V = M.as_row();   return as_doubles(V); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"caveat-5","dir":"Articles","previous_headings":"Convert matrix to row","what":"Caveat","title":"Member functions and variables","text":"Converting columns rows faster converting rows columns.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"convert-column-to-matrix","dir":"Articles","previous_headings":"","what":"Convert column to matrix","title":"Member functions and variables","text":".col_as_mat(col_number) member function Cube class, returns matrix specified cube column number rows preserved. Given cube size R x C x S, resultant matrix size R x S.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"examples-42","dir":"Articles","previous_headings":"Convert column to matrix","what":"Examples","title":"Member functions and variables","text":"","code":"[[cpp11::register]] list col_as_mat1_(const int& n) {   cube C(n, n + 1, n + 2, fill::randu);   mat M = C.col_as_mat(0);  // size n x (n + 1)      writable::list res(5);   res[0] = as_doubles_matrix(C.slice(0));   res[1] = as_doubles_matrix(C.slice(1));   res[2] = as_doubles_matrix(C.slice(2));   res[3] = as_doubles_matrix(C.slice(3));   res[4] = as_doubles_matrix(M);    res.attr(\"names\") = strings({\"slice0\", \"slice1\", \"slice2\", \"slice3\",     \"col_as_mat\"});    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"convert-column-to-matrix-1","dir":"Articles","previous_headings":"","what":"Convert column to matrix","title":"Member functions and variables","text":".row_as_mat(row_number) member function Cube class, returns matrix specified cube row number columns preserved. Given cube size R x C x S, resultant matrix size S x C.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"examples-43","dir":"Articles","previous_headings":"Convert column to matrix","what":"Examples","title":"Member functions and variables","text":"","code":"[[cpp11::register]] list row_as_mat1_(const int& n) {   cube C(n, n + 1, n + 2, fill::randu);   mat M = C.row_as_mat(0);  // size (n + 2) x (n + 1)    writable::list res(5);   res[0] = as_doubles_matrix(C.slice(0));   res[1] = as_doubles_matrix(C.slice(1));   res[2] = as_doubles_matrix(C.slice(2));   res[3] = as_doubles_matrix(C.slice(3));   res[4] = as_doubles_matrix(M);    res.attr(\"names\") = strings({\"slice0\", \"slice1\", \"slice2\", \"slice3\",     \"row_as_mat\"});    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"convert-sparse-matrix-to-dense-matrix","dir":"Articles","previous_headings":"","what":"Convert sparse matrix to dense matrix","title":"Member functions and variables","text":".as_dense() member function SpMat class, avoids construction intermediate sparse matrix representation expression.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"examples-44","dir":"Articles","previous_headings":"Convert sparse matrix to dense matrix","what":"Examples","title":"Member functions and variables","text":"","code":"[[cpp11::register]] doubles as_dense1_(const int& n) {   sp_mat A;   A.sprandu(n, n, 0.1);    // extract column 1 of A directly into dense column vector   colvec c = A.col(0).as_dense();    // store the sum of each column of A directly in dense row vector   rowvec r = sum(A).as_dense();    return as_doubles(c + r.t()); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"dense-matrix-and-vector-transposition","dir":"Articles","previous_headings":"","what":"Dense matrix and vector transposition","title":"Member functions and variables","text":".t() member function Mat, Col Row classes, returns transposed copy object. real matrices, transpose simple transposition elements. complex matrices, transpose Hermitian conjugate transposition elements (e.g., signs imaginary components flipped).","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"examples-45","dir":"Articles","previous_headings":"Dense matrix and vector transposition","what":"Examples","title":"Member functions and variables","text":"","code":"[[cpp11::register]] doubles_matrix<> transpose1_(const int& n) {   mat A(n, n + 1, fill::randu);   mat B = A.t();   return as_doubles_matrix(B); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"sparse-matrix-transposition","dir":"Articles","previous_headings":"","what":"Sparse matrix transposition","title":"Member functions and variables","text":".st() member function SpMat classe, returns transposed copy object. real matrices, applicable. complex matrices, transpose simple transposition elements (e.g., signs imaginary components flipped).","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"examples-46","dir":"Articles","previous_headings":"Sparse matrix transposition","what":"Examples","title":"Member functions and variables","text":"","code":"[[cpp11::register]] doubles_matrix<> transpose2_(const int& n) {   sp_mat A;   A.sprandu(n, n + 1, 0.1);   sp_mat B = A.t();   return as_doubles_matrix(B); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"matrix-inversion","dir":"Articles","previous_headings":"","what":"Matrix inversion","title":"Member functions and variables","text":".() member function Mat class, provides inverse matrix. matrix square sized, std::logic_error exception thrown. matrix appears singular, output matrix reset std::runtime_error exception thrown.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"examples-47","dir":"Articles","previous_headings":"Matrix inversion","what":"Examples","title":"Member functions and variables","text":"","code":"[[cpp11::register]] doubles inverse1_(const doubles_matrix<>& a,                                       const doubles b) {   mat A = as_Mat(a);   vec B = as_Col(b);    mat X = inv(A);   vec Y = X * B;    return as_doubles(Y); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"caveats-7","dir":"Articles","previous_headings":"Matrix inversion","what":"Caveats","title":"Member functions and variables","text":"matrix known symmetric positive definite, inv_sympd(). solve system linear equations, Z = inv(X) * Y, solve() can faster /accurate.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"maximum-and-minimum","dir":"Articles","previous_headings":"","what":"Maximum and minimum","title":"Member functions and variables","text":".min() .max() member functions Mat, Col, Row, Cube classes. return minimum maximum values object, respectively. objects complex numbers, absolute values used comparison.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"examples-48","dir":"Articles","previous_headings":"Maximum and minimum","what":"Examples","title":"Member functions and variables","text":"","code":"[[cpp11::register]] doubles maxmin1_(const int& n) {   mat A = randu<mat>(n, n);    writable::doubles res(2);   res[0] = A.max();   res[1] = A.min();    res.attr(\"names\") = strings({\"max\", \"min\"});    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"linear-index-of-maximum-and-minimum","dir":"Articles","previous_headings":"","what":"Linear index of maximum and minimum","title":"Member functions and variables","text":".index_min() .index_max() member functions Mat, Col, Row, Cube classes. return linear index minimum maximum values object, respectively. objects complex numbers, absolute values used comparison. returned index type uword.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"examples-49","dir":"Articles","previous_headings":"Linear index of maximum and minimum","what":"Examples","title":"Member functions and variables","text":"","code":"[[cpp11::register]] doubles index_maxmin1_(const int& n) {   mat A = randu<mat>(n, n);    writable::doubles res(6);   res[0] = static_cast<int>(A.index_max());   res[1] = static_cast<int>(A.index_min());   res[2] = A(0, 0);   res[3] = A(1, 0);   res[4] = A(0, 1);   res[5] = A(1, 1);    res.attr(\"names\") = strings({\"index_max\", \"index_min\", \"element0\", \"element1\",     \"element2\", \"element3\"});    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"in-range","dir":"Articles","previous_headings":"","what":"In-range","title":"Member functions and variables","text":".in_range(** **) member function Mat, Col, Row, Cube, SpMat field, returns true given location span currently valid false object empty, location bounds, span bounds. Instances span(,b) can replaced : span() span::indicate entire range. span() indicate particular row, column, slice.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"examples-50","dir":"Articles","previous_headings":"In-range","what":"Examples","title":"Member functions and variables","text":"","code":"[[cpp11::register]] logicals in_range1_(const int& n) {   mat A(n, n + 1, fill::randu);    writable::logicals res(3);   res[0] = A.in_range(0, 0);   res[1] = A.in_range(3, 4);   res[2] = A.in_range(4, 5);    res.attr(\"names\") = strings({\"in_range00\", \"in_range34\", \"in_range45\"});    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"is-empty","dir":"Articles","previous_headings":"","what":"Is empty","title":"Member functions and variables","text":".is_empty() member function Mat, Col, Row, Cube, SpMat, field classes. returns true object elements false object one elements.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"examples-51","dir":"Articles","previous_headings":"Is empty","what":"Examples","title":"Member functions and variables","text":"","code":"[[cpp11::register]] logicals is_empty1_(const int& n) {   mat A(n, n + 1, fill::randu);    writable::logicals res(2);   res[0] = A.is_empty();    A.reset();   res[1] = A.is_empty();    res.attr(\"names\") = strings({\"before_reset\", \"after_reset\"});    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"is-vectorcolumn-vectorrow-vector","dir":"Articles","previous_headings":"","what":"Is vector/column vector/row vector","title":"Member functions and variables","text":".is_vec(), .is_colvec() .is_rowvec() member functions Mat SpMat. .is_vec() returns true matrix can interpreted vector (either column row vector) false otherwise. .is_colvec() returns true matrix can interpreted column vector false otherwise. .is_rowvec() returns true matrix can interpreted row vector false otherwise.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"examples-52","dir":"Articles","previous_headings":"Is vector/column vector/row vector","what":"Examples","title":"Member functions and variables","text":"","code":"[[cpp11::register]] logicals is_vec1_(const int& n) {   mat A(n, 1, fill::randu);   mat B(1, n, fill::randu);   mat C(0, 1, fill::randu);   mat D(1, 0, fill::randu);    writable::logicals res(5);   res[0] = A.is_vec();   res[1] = A.is_colvec();   res[2] = B.is_rowvec();   res[3] = C.is_colvec();   res[4] = D.is_rowvec();    res.attr(\"names\") = strings({\"Nx1_is_vec\", \"Nx1_is_colvec\", \"1xN_is_rowvec\",     \"0x1_is_colvec\", \"1x0_is_rowvec\"});    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"caveat-6","dir":"Articles","previous_headings":"Is vector/column vector/row vector","what":"Caveat","title":"Member functions and variables","text":"assume vector elements functions return true. possible empty vector (e.g., 0x1 examples).","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"is-sorted","dir":"Articles","previous_headings":"","what":"Is sorted","title":"Member functions and variables","text":".is_sorted(), .is_sorted(sort_direction) .is_sorted(sort_direction, dim) member function Mat, Row, Col. matrices vectors complex numbers, order checked via absolute values. object vector, return bool indicating whether elements sorted. object matrix, return bool indicating whether elements sorted column (dim = 0, default) row (dim = 1), dim argument optional. sort_direction argument optional, sort_direction can one following strings: \"ascend\": elements ascending, consecutive elements can equal, default operation. \"descend\": elements descending, consecutive elements can equal. \"strictascend\": elements strictly ascending, consecutive elements equal. \"strictdescend\": elements strictly descending, consecutive elements equal.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"examples-53","dir":"Articles","previous_headings":"Is sorted","what":"Examples","title":"Member functions and variables","text":"","code":"[[cpp11::register]] logicals is_sorted1_(const int& n) {   vec a(n, fill::randu);   vec b = sort(a);   mat A(10, 10, fill::randu);    writable::logicals res(4);   res[0] = a.is_sorted();   res[1] = b.is_sorted();   res[2] = A.is_sorted(\"descend\", 1);   res[4] = A.is_sorted(\"ascend\", 1);    res.attr(\"names\") = strings({\"a_sorted\", \"b_sorted\", \"A_descend\",     \"A_ascend\"});    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"is-upper-triangularlower-triangular","dir":"Articles","previous_headings":"","what":"Is upper triangular/lower triangular","title":"Member functions and variables","text":".is_trimatu() .is_trimatl() member functions Mat SpMat. .is_trimatu() returns true matrix upper triangular (e.g., matrix square sized elements main diagonal zero) false otherwise. .is_trimatl() returns true matrix lower triangular (e.g., matrix square sized elements main diagonal zero) false otherwise.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"examples-54","dir":"Articles","previous_headings":"Is upper triangular/lower triangular","what":"Examples","title":"Member functions and variables","text":"","code":"[[cpp11::register]] logicals is_triangular1_(const int& n) {   mat A(n, n, fill::randu);   mat B = trimatl(A);    writable::logicals res(3);   res[0] = B.is_trimatu();   res[1] = B.is_trimatl();    B.reset();   res[2] = B.is_trimatu();    res.attr(\"names\") = strings({\"is_trimatu\", \"is_trimatl\",     \"is_trimatu_after_reset\"});    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"caveat-7","dir":"Articles","previous_headings":"Is upper triangular/lower triangular","what":"Caveat","title":"Member functions and variables","text":"functions return true, assume matrix contains non-zero elements /main diagonal. possible empty matrix (e.g., 0x0 examples).","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"is-diagonal","dir":"Articles","previous_headings":"","what":"Is diagonal","title":"Member functions and variables","text":"is_diagmat() member function Mat SpMat. returns true matrix diagonal (e.g., elements outside main diagonal zero). matrix square sized, std::logic_error exception thrown.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"examples-55","dir":"Articles","previous_headings":"Is diagonal","what":"Examples","title":"Member functions and variables","text":"","code":"[[cpp11::register]] logicals is_diagonal1_(const int& n) {   mat A(n, n, fill::randu);   mat B = diagmat(A);    writable::logicals res(3);   res[0] = A.is_diagmat();   res[1] = B.is_diagmat();    A.reset();   res[2] = A.is_diagmat();    res.attr(\"names\") = strings({\"A_diagmat\", \"B_diagmat\",     \"A_diagmat_after_reset\"});    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"caveat-8","dir":"Articles","previous_headings":"Is diagonal","what":"Caveat","title":"Member functions and variables","text":"function returns true, assume matrix contains non-zero elements main diagonal . possible empty matrix (e.g., 0x0 examples).","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"is-square","dir":"Articles","previous_headings":"","what":"Is square","title":"Member functions and variables","text":".is_square() member function Mat SpMat classes. returns true matrix square sized (e.g., number rows equal number columns) false otherwise.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"examples-56","dir":"Articles","previous_headings":"Is square","what":"Examples","title":"Member functions and variables","text":"","code":"[[cpp11::register]] logicals is_square1_(const int& n) {   mat A(n, n, fill::randu);   mat B = diagmat(A);    writable::logicals res(3);   res[0] = A.is_square();   res[1] = B.is_square();    A.reset();   res[2] = A.is_square();    res.attr(\"names\") = strings({\"A_square\", \"B_square\",     \"A_square_after_reset\"});    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"caveats-8","dir":"Articles","previous_headings":"Is square","what":"Caveats","title":"Member functions and variables","text":"function returns true, assume matrix non-empty. possible empty matrix (e.g., 0x0 examples).","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"is-symmetric","dir":"Articles","previous_headings":"","what":"Is symmetric","title":"Member functions and variables","text":".is_symmetric() member function Mat SpMat classes. returns true matrix symmetric (e.g., matrix square sized transpose equal original matrix) false otherwise.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"examples-57","dir":"Articles","previous_headings":"Is symmetric","what":"Examples","title":"Member functions and variables","text":"","code":"[[cpp11::register]] logicals is_symmetric1_(const int& n) {   mat A(n, n, fill::randu);   mat B = symmatu(A);    writable::logicals res(3);   res[0] = A.is_symmetric();   res[1] = B.is_symmetric();    A.reset();   res[2] = A.is_symmetric();    res.attr(\"names\") = strings({\"A_symmetric\", \"B_symmetric\",     \"A_symmetric_after_reset\"});    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"caveats-9","dir":"Articles","previous_headings":"Is symmetric","what":"Caveats","title":"Member functions and variables","text":"function returns true, assume matrix non-empty. possible empty matrix (e.g., 0x0 examples).","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"is-hermitian","dir":"Articles","previous_headings":"","what":"Is hermitian","title":"Member functions and variables","text":".is_hermitian() member function Mat SpMat classes. returns true matrix Hermitian self-adjoint (e.g., matrix square sized conjugate transpose equal original matrix) false otherwise.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"examples-58","dir":"Articles","previous_headings":"Is hermitian","what":"Examples","title":"Member functions and variables","text":"","code":"[[cpp11::register]] logicals is_hermitian1_(const int& n) {   cx_mat A(n, n, fill::randu);   cx_mat B = A.t() * A;    writable::logicals res(3);   res[0] = A.is_hermitian();   res[1] = B.is_hermitian();    A.reset();   res[2] = A.is_hermitian();    res.attr(\"names\") = strings({\"A_hermitian\", \"B_hermitian\",     \"A_hermitian_after_reset\"});    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"caveats-10","dir":"Articles","previous_headings":"Is hermitian","what":"Caveats","title":"Member functions and variables","text":"function returns true, assume matrix non-empty. possible empty matrix (e.g., 0x0 examples).","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"is-symmetrichermitian-positive-definite","dir":"Articles","previous_headings":"","what":"Is symmetric/hermitian positive definite","title":"Member functions and variables","text":".is_sympd() .is_sympd(tol) member function Mat SpMat classes. returns true matrix symmetric/hermitian positive definite within tolerance (e.g., matrix square sized eigenvalues positive) false otherwise. tol argument optional, default tol = 100 * datum::eps * norm(X, \"fro\").","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"examples-59","dir":"Articles","previous_headings":"Is symmetric/hermitian positive definite","what":"Examples","title":"Member functions and variables","text":"","code":"[[cpp11::register]] logicals is_sympd1_(const int& n) {   mat A(n, n, fill::randu);   mat B = A * A.t();    writable::logicals res(3);   res[0] = A.is_sympd();   res[1] = B.is_sympd();    A.reset();   res[2] = A.is_sympd();    res.attr(\"names\") = strings({\"A_sympd\", \"B_sympd\",     \"A_sympd_after_reset\"});    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"is-zero","dir":"Articles","previous_headings":"","what":"Is zero","title":"Member functions and variables","text":".is_zero() .is_zero(tol) member function Mat, Col, Row, Cube, SpMat classes. returns true elements zero within tolerance false otherwise. complex numbers, component (real imaginary) checked separately. tol argument optional.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"examples-60","dir":"Articles","previous_headings":"Is zero","what":"Examples","title":"Member functions and variables","text":"","code":"[[cpp11::register]] logicals is_zero1_(const int& n) {   mat A(n, n, fill::randu);   cube B(n, n, n, fill::zeros);   sp_mat C(n, n);    writable::logicals res(3);   res[0] = A.is_zero(0.005);   res[1] = B.is_zero(0.005);   res[2] = C.is_zero(0.005);    res.attr(\"names\") = strings({\"A_is_zero\", \"B_is_zero\", \"C_is_zero\"});    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"is-finite","dir":"Articles","previous_headings":"","what":"Is finite","title":"Member functions and variables","text":".is_finite() member function Mat, Col, Row, Cube, SpMat classes. returns true elements finite false otherwise.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"examples-61","dir":"Articles","previous_headings":"Is finite","what":"Examples","title":"Member functions and variables","text":"","code":"[[cpp11::register]] logicals is_finite1_(const int& n) {   mat A(n, n, fill::randu);   cube B(n, n, n, fill::randu);   sp_mat C(n, n);    // Insert infinite values   B(0, 0, 0) = datum::inf;   C(0, 0) = -1.0 * datum::inf;    writable::logicals res(3);   res[0] = A.is_finite();   res[1] = B.is_finite();   res[2] = C.is_finite();    res.attr(\"names\") = strings({\"A_is_finite\", \"B_is_finite\", \"C_is_finite\"});    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"has-infinity","dir":"Articles","previous_headings":"","what":"Has infinity","title":"Member functions and variables","text":".has_inf() member function Mat, Col, Row, Cube, SpMat classes. returns true object contains least one infinite value false otherwise.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"examples-62","dir":"Articles","previous_headings":"Has infinity","what":"Examples","title":"Member functions and variables","text":"","code":"[[cpp11::register]] logicals has_inf1_(const int& n) {   mat A(n, n, fill::randu);   cube B(n, n, n, fill::randu);   sp_mat C(n, n);    // Insert infinite values   B(0, 0, 0) = datum::inf;   C(0, 0) = -1.0 * datum::inf;    writable::logicals res(3);   res[0] = A.has_inf();   res[1] = B.has_inf();   res[2] = C.has_inf();    res.attr(\"names\") = strings({\"A_has_inf\", \"B_has_inf\", \"C_has_inf\"});    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"has-not-a-number","dir":"Articles","previous_headings":"","what":"Has not-a-number","title":"Member functions and variables","text":".has_nan() member function Mat, Col, Row, Cube, SpMat classes. returns true object contains least one --number (NaN) value false otherwise.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"examples-63","dir":"Articles","previous_headings":"Has not-a-number","what":"Examples","title":"Member functions and variables","text":"","code":"[[cpp11::register]] logicals has_nan1_(const int& n) {   mat A(n, n, fill::randu);   cube B(n, n, n, fill::randu);   sp_mat C(n, n);    // Insert NaN values   B(0, 0, 0) = datum::nan;   C(0, 0) = -1.0 * datum::nan;    writable::logicals res(3);   res[0] = A.has_nan();   res[1] = B.has_nan();   res[2] = C.has_nan();    res.attr(\"names\") = strings({\"A_has_nan\", \"B_has_nan\", \"C_has_nan\"});    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/member-functions-and-variables.html","id":"caveat-9","dir":"Articles","previous_headings":"Has not-a-number","what":"Caveat","title":"Member functions and variables","text":"NaN equal anything, even .","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/save-load.html","id":"saving-and-loading-matrices-and-cubes","dir":"Articles","previous_headings":"","what":"Saving and loading matrices and cubes","title":"Saving and loading Armadillo objects on C++ side","text":"Armadillo provides functions save load matrices cubes files. following file types supported: arma_binary: Numerical data stored machine dependent binary format, simple header speed loading. header indicates type size matrix/cube. arma_ascii: Numerical data stored human readable text format, simple header speed loading. header indicates type size matrix/cube. raw_binary: Numerical data stored machine dependent raw binary format, without header. Matrices loaded one column, cubes loaded one slice one column. .reshape() function can used alter size loaded matrix/cube without losing data. raw_ascii: Numerical data stored raw ASCII format, without header. numbers separated whitespace. number columns must row. Cubes loaded one slice. Data saved Matlab/Octave using -ascii option can read Armadillo, except complex numbers. Complex numbers stored standard C++ notation, tuple surrounded brackets: eg. (1.23,4.56) indicates 1.24 + 4.56i. csv_ascii: Numerical data stored comma separated value (CSV) text format, without header. save/load header, use csv_name(filename, header) specification instead. Handles complex numbers stored compound form 1.24+4.56i. Applicable Mat SpMat. coord_ascii: Numerical data stored text file coordinate list format, without header. non-zero values stored. real matrices, line contains information following format: row column value. complex matrices, line contains information following format: row column real_value imag_value. rows columns start zero. Applicable Mat SpMat. pgm_binary: Image data stored Portable Gray Map (PGM) format. Applicable Mat . Saving int, float double matrices lossy operation, element copied converted 8 bit representation. matrix values [0,255] interval, otherwise resulting image may display correctly. ppm_binary: Image data stored Portable Pixel Map (PPM) format. Applicable Cube . Saving int, float double matrices lossy operation, element copied converted 8 bit representation. cube/field values [0,255] interval, otherwise resulting image may display correctly. hdf5_binary: Numerical data stored portable HDF5 binary format. saving, default dataset name within HDF5 file \"dataset\". loading, order operations : (1) try loading dataset named \"dataset\", (2) try loading dataset named \"value\", (3) try loading first available dataset. explicitly control dataset name, specify via hdf5_name(filename, dataset) argument. HDF5 support can enabled defining ARMA_USE_HDF5 including Armadillo header. following file types supported fields: arma_binary: See . ppm_binary: See . Usage: providing either hdf5_name(filename, dataset) hdf5_name(filename, dataset, settings), file_type type assumed hdf5_binary. dataset argument specifies HDF5 dataset name (eg. \"my_dataset\") can include full path (eg. \"/group_name/my_dataset\"); blank dataset name specified (ie. \"\"), assumed \"dataset\". settings argument optional; one following, combination thereof hdf5_opts::trans: Save/load data columns transposed rows (vice versa). hdf5_opts::append: Instead overwriting file, append specified dataset file; specified dataset must already exist file. hdf5_opts::replace: Instead overwriting file, replace specified dataset file. settings can combined using + operator (e.g., hdf5_opts::trans + hdf5_opts::append) providing either csv_name(filename, header) csv_name(filename, header, settings), file assumed data comma separated value (CSV) text format. header argument specifies object stores separate elements header line; must type field<std::string>. optional settings argument one following, combination thereof csv_opts::trans: Save/load data columns transposed rows (vice versa). csv_opts::no_header: Assume header line; header argument referenced. csv_opts::semicolon: Use semicolon (;) instead comma (,) separator character. csv_opts::strict: Interpret missing values NaN (applicable sparse matrices). settings can combined using + operator (e.g., csv_opts::trans + csv_opts::no_header)","code":".save(filename) .load(filename)  .save(filename, file_type) .load(filename, file_type)  .save(stream) .load(stream)  .save(stream, file_type) .load(stream, file_type)  .save(hdf5_name(filename, dataset)) .load(hdf5_name(filename, dataset))  .save(hdf5_name(filename, dataset, settings)) .load(hdf5_name(filename, dataset, settings))  .save(csv_name(filename, header)) .load(csv_name(filename, header))  .save(csv_name(filename, header, settings)) .load(csv_name(filename, header, settings))"},{"path":"https://pacha.dev/cpp11armadillo/articles/save-load.html","id":"caveats","dir":"Articles","previous_headings":"Saving and loading matrices and cubes","what":"Caveats","title":"Saving and loading Armadillo objects on C++ side","text":"saving/loading HDF5 files, support HDF5 must enabled within Armadillo’s configuration. hdf5.h header file must available system need link HDF5 library (eg. -lhdf5). HDF5 support can enabled defining ARMA_USE_HDF5 including Armadillo header. Enabling HD5 requires vendor cpp11armadillo orderto adhere CRAN compliance. Armadillo save load methods accessible C++ side. object exported R, efficient load/save using saveRDS() readRDS().","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/save-load.html","id":"examples","dir":"Articles","previous_headings":"Saving and loading matrices and cubes","what":"Examples","title":"Saving and loading Armadillo objects on C++ side","text":"Save load matrices: Save load fields:","code":"[[cpp11::register]] int saveload1_(const int& n) {   arma::mat A(n, n, fill::randu);    // default save format is arma_binary   A.save(\"A.bin\");    // save in raw_ascii format   A.save(\"A.txt\", arma::raw_ascii);    // save in CSV format without a header   A.save(\"A.csv\", arma::csv_ascii);    // save in CSV format with a header   arma::field<std::string> header(A.n_cols);   header(0) = \"foo\";   header(1) = \"bar\";  // etc   A.save(arma::csv_name(\"A.csv\", header));    // save in HDF5 format with internal dataset named as \"my_data\"   // see the caveats   // A.save(arma::hdf5_name(\"A.h5\", \"my_data\"));    // automatically detect format type while loading   arma::mat B;   B.load(\"A.bin\");    // force loading in arma_ascii format   arma::mat C;   C.load(\"A.txt\", arma::arma_ascii);    // example of testing for success   arma::mat D;   bool ok = D.load(\"A.bin\");    if(ok == true) {     message(\"Matrix loaded successfully\");   } else {     stop(\"Problem with loading\");   }    return 0; } [[cpp11::register]] int saveload2_(const int& n) {   arma::field<arma::mat> F(n);    for (int i = 0; i < n; i++) {     F(i) = arma::mat(n, n, fill::randu);   }    // default save format is arma_binary   F.save(\"F.bin\");    // save in PPM format   F.save(\"F.ppm\", arma::ppm_binary);    // automatically detect format type while loading   arma::field<arma::mat> G;   G.load(\"F.bin\");    return 0; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/signal-and-image-processing.html","id":"conv","dir":"Articles","previous_headings":"","what":"One-dimensional convolution","title":"Signal and image processing","text":"conv() function performs one-dimensional convolution two vectors. orientation result vector orientation first input vector. Usage: shape argument optional can one following: \"full\": return full convolution (default setting), size equal x.n_elem + y.n_elem - 1. \"\": return central part convolution, size vector x. convolution operation also equivalent finite impulse response (FIR) filtering.","code":"vec conv(x, y, shape);"},{"path":"https://pacha.dev/cpp11armadillo/articles/signal-and-image-processing.html","id":"examples","dir":"Articles","previous_headings":"One-dimensional convolution","what":"Examples","title":"Signal and image processing","text":"","code":"[[cpp11::register]] list conv1_(const doubles& x, const doubles& y) {   vec a = as_col(x);   vec b = as_col(y);    vec c = conv(a, b);   vec d = conv(a, b, \"same\");    writable::list out(2);   out[0] = as_doubles(c);   out[1] = as_doubles(d);    return out; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/signal-and-image-processing.html","id":"conv2","dir":"Articles","previous_headings":"","what":"Two-dimensional convolution","title":"Signal and image processing","text":"conv2() function performs two-dimensional convolution two matrices. orientation result matrix orientation first input matrix. Usage: shape argument optional can one following: \"full\": return full convolution (default setting), size equal size() + size(B) - 1. \"\": return central part convolution, size matrix .","code":"mat conv2(A, B, shape);"},{"path":"https://pacha.dev/cpp11armadillo/articles/signal-and-image-processing.html","id":"caveats","dir":"Articles","previous_headings":"Two-dimensional convolution","what":"Caveats","title":"Signal and image processing","text":"implementation 2D convolution version preliminary.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/signal-and-image-processing.html","id":"examples-1","dir":"Articles","previous_headings":"Two-dimensional convolution","what":"Examples","title":"Signal and image processing","text":"","code":"[[cpp11::register]] list conv2_(const doubles_matrix<>& x,   const doubles_matrix<>& y) {   mat a = as_mat(x);   mat b = as_mat(y);    mat c = conv2(a, b);   mat d = conv2(a, b, \"same\");    writable::list out(2);   out[0] = as_doubles_matrix(c);   out[1] = as_doubles_matrix(d);    return out; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/signal-and-image-processing.html","id":"fft-ifft","dir":"Articles","previous_headings":"","what":"One-dimensional Fast Fourier Transform","title":"Signal and image processing","text":"fft() function computes fast Fourier transform (FFT) vector matrix. function returns complex matrix. Similarly, ifft() computes inverse fast Fourier transform (IFFT) complex matrix. transform done column vector input matrix. Usage: optional n argument specifies transform length: n larger length input vector, zero-padded version vector used. n smaller length input vector, first n elements vector used.","code":"// real or complex cx_vec Y = fft(X); cx_vec Y = fft(X, n);  // complex only cx_mat Z = ifft(cx_mat Y); cx_mat Z = ifft(cx_mat Y, n);"},{"path":"https://pacha.dev/cpp11armadillo/articles/signal-and-image-processing.html","id":"caveats-1","dir":"Articles","previous_headings":"One-dimensional Fast Fourier Transform","what":"Caveats","title":"Signal and image processing","text":"transform fastest transform length power 2 (2k,k=1,2,3,…2^k,\\: k = 1, 2, 3, \\ldots). default, function uses internal FFT algorithm based KISS FFT. vendoring, possible use FFTW3 library faster execution modifying cpp11armadillo header :","code":"... #include <Rmath.h>  #define ARMA_USE_FFTW3 // add this line #include <armadillo.hpp> ..."},{"path":"https://pacha.dev/cpp11armadillo/articles/signal-and-image-processing.html","id":"examples-2","dir":"Articles","previous_headings":"One-dimensional Fast Fourier Transform","what":"Examples","title":"Signal and image processing","text":"","code":"[[cpp11::register]] list fft1_(const doubles& x) {   vec a = as_Col(x);    cx_vec b = fft(a);   cx_vec c = ifft(b);    writable::list out(2);   writable::list out2(2);   writable::list out3(2);    out2[0] = as_doubles(real(b));   out2[1] = as_doubles(imag(b));    out3[0] = as_doubles(real(c));   out3[1] = as_doubles(imag(c));    out[0] = out2;   out[1] = out3;    return out; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/signal-and-image-processing.html","id":"fft-ifft-1","dir":"Articles","previous_headings":"","what":"Two-dimensional Fast Fourier Transform","title":"Signal and image processing","text":"fft2() function computes two-dimensional fast Fourier transform (FFT) matrix. function returns complex matrix. Similarly, ifft2() computes inverse fast Fourier transform (IFFT) complex matrix. Usage: optional n_rows n_cols arguments specify transform size: n_rows n_cols larger size input matrix, zero-padded version matrix used. n_rows n_cols smaller size input matrix, first n_rows n_cols elements matrix used.","code":"// real or complex cx_mat Y = fft2(mat X); cx_mat Y = fft2(mat X, int n_rows, int n_cols);  // complex only cx_mat Z = ifft2(cx_mat Y); cx_mat Z = ifft2(cx_mat Y, int n_rows, int n_cols);"},{"path":"https://pacha.dev/cpp11armadillo/articles/signal-and-image-processing.html","id":"caveats-2","dir":"Articles","previous_headings":"Two-dimensional Fast Fourier Transform","what":"Caveats","title":"Signal and image processing","text":"implementation 2D transform version preliminary. transform fastest n_rows n_cols power 2 (2k,k=1,2,3,…2^k,\\: k = 1, 2, 3, \\ldots). default, function uses internal FFT algorithm based KISS FFT. vendoring, possible use FFTW3 library faster execution modifying cpp11armadillo header :","code":"... #include <Rmath.h>  #define ARMA_USE_FFTW3 // add this line #include <armadillo.hpp> ..."},{"path":"https://pacha.dev/cpp11armadillo/articles/signal-and-image-processing.html","id":"examples-3","dir":"Articles","previous_headings":"Two-dimensional Fast Fourier Transform","what":"Examples","title":"Signal and image processing","text":"","code":"[[cpp11::register]] list fft2_(const doubles_matrix<>& x) {   mat a = as_mat(x);    cx_mat b = fft2(a);   cx_mat c = ifft2(b);    writable::list out(2);   writable::list out2(2);   writable::list out3(2);    out2[0] = as_doubles(real(b));   out2[1] = as_doubles(imag(b));    out3[0] = as_doubles(real(c));   out3[1] = as_doubles(imag(c));    out[0] = out2;   out[1] = out3;    return out; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/signal-and-image-processing.html","id":"interp1","dir":"Articles","previous_headings":"","what":"One-dimensional interpolation","title":"Signal and image processing","text":"interp1() function performs one-dimensional interpolation function specified vectors X Y. function generates vector YI contains interpolated values locations XI. Usage: method argument optional can one following: \"nearest\": interpolate using single nearest neighbour. \"linear\": linear interpolation two nearest neighbours (default setting). \"*nearest\": per \"nearest\", faster assuming X XI monotonically increasing. \"*linear\": per \"linear\", faster assuming X XI monotonically increasing. location XI outside domain X, corresponding value YI set extrapolation_value. extrapolation_value argument optional; default, datum::nan (--number).","code":"vec interp1(X, Y, XI, YI); vec interp1(X, Y, XI, YI, method); vec interp1(X, Y, XI, YI, method, extrapolation_value);"},{"path":"https://pacha.dev/cpp11armadillo/articles/signal-and-image-processing.html","id":"examples-4","dir":"Articles","previous_headings":"One-dimensional interpolation","what":"Examples","title":"Signal and image processing","text":"","code":"[[cpp11::register]] doubles interp1_(const int& n) {   vec x = linspace<vec>(0, 3, n);   vec y = square(x);    vec xx = linspace<vec>(0, 3, 2 * n);   vec yy;    interp1(x, y, xx, yy);             // use linear interpolation by default   interp1(x, y, xx, yy, \"*linear\");  // faster than \"linear\"   interp1(x, y, xx, yy, \"nearest\");    return as_doubles(yy); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/signal-and-image-processing.html","id":"interp2","dir":"Articles","previous_headings":"","what":"Two-dimensional interpolation","title":"Signal and image processing","text":"interp2() function performs two-dimensional interpolation function specified matrix Z coordinates given vectors X Y. function generates matrix ZI contains interpolated values coordinates given vectors XI YI. Usage: method argument optional can one following: \"nearest\": interpolate using nearest neighbours. \"linear\": linear interpolation nearest neighbours (default setting). coordinate 2D grid specified (XI, YI) outside domain 2D grid specified (X, Y), corresponding value ZI set extrapolation_value. extrapolation_value argument optional; default, datum::nan (--number).","code":"mat interp2(X, Y, Z, XI, YI, ZI); mat interp2(X, Y, Z, XI, YI, ZI, method); mat interp2(X, Y, Z, XI, YI, ZI, method, extrapolation_value);"},{"path":"https://pacha.dev/cpp11armadillo/articles/signal-and-image-processing.html","id":"examples-5","dir":"Articles","previous_headings":"Two-dimensional interpolation","what":"Examples","title":"Signal and image processing","text":"","code":"[[cpp11::register]] doubles_matrix<> interp2_(const int& n) {   mat Z(n, n, fill::randu);    vec X = regspace(1, Z.n_cols);  // X = horizontal spacing   vec Y = regspace(1, Z.n_rows);  // Y = vertical spacing    vec XI = regspace(X.min(), 1.0/2.0, X.max()); // magnify by approx 2   vec YI = regspace(Y.min(), 1.0/3.0, Y.max()); // magnify by approx 3    mat ZI;    interp2(X, Y, Z, XI, YI, ZI); // use linear interpolation by default    return as_doubles_matrix(ZI); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/signal-and-image-processing.html","id":"polyfit","dir":"Articles","previous_headings":"","what":"Find polynomial coefficients for data fitting","title":"Signal and image processing","text":"polyfit() function finds polynomial coefficients data fitting. function models 1D function specified vectors X Y polynomial order N stores polynomial coefficients column vector P. given function modelled : y=p0xN+p1xN−1+p2xN−2+…+pN−1x1+pN y = p_0 x^N + p_1 x^{N-1} + p_2 x^{N-2} + \\ldots + p_{N-1} x^1 + p_N pip_i ii-th polynomial coefficient. coefficients selected minimise overall error fit (least squares). column vector P N+1N+1 coefficients. N must smaller number elements X. Usage: polynomial coefficients found: P = polyfit(X, Y, N) resets P returns error. polyfit(P, X, Y, N) resets P returns bool set false without error.","code":"P = polyfit(X, Y, N); polyfit(P, X, Y, N);"},{"path":"https://pacha.dev/cpp11armadillo/articles/signal-and-image-processing.html","id":"examples-6","dir":"Articles","previous_headings":"Find polynomial coefficients for data fitting","what":"Examples","title":"Signal and image processing","text":"","code":"[[cpp11::register]] doubles polyfit1_(const int& n, const int& m) {   vec x = linspace<vec>(0, 1, n);   vec y = 2*pow(x,2) + 2*x + ones<vec>(n);    vec p = polyfit(x, y, m);    return as_doubles(p); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/signal-and-image-processing.html","id":"polyval","dir":"Articles","previous_headings":"","what":"Evaluate polynomial","title":"Signal and image processing","text":"polyval() function evaluates polynomial. Given vector P polynomial coefficients vector X containing independent values 1D function, function generates vector Y contains corresponding dependent values. x value vector X, corresponding y value vector Y generated using: y=p0xN+p1xN−1+p2xN−2+…+pN−1x1+pN y = p_0 x^N + p_1 x^{N-1} + p_2 x^{N-2} + \\ldots + p_{N-1} x^1 + p_N pip_i ii-th polynomial coefficient vector P. P must contain polynomial coefficients descending powers (e.g., generated polyfit() function). Usage:","code":"Y = polyval(P, X);"},{"path":"https://pacha.dev/cpp11armadillo/articles/signal-and-image-processing.html","id":"examples-7","dir":"Articles","previous_headings":"Evaluate polynomial","what":"Examples","title":"Signal and image processing","text":"","code":"[[cpp11::register]] doubles polyval1_(const int& n, const int& m) {   vec x = linspace<vec>(0, 1, n);   vec y = 2*pow(x,2) + 2*x + ones<vec>(n);    vec p = polyfit(x, y, m);   vec q = polyval(p, x);    return as_doubles(q); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/statistics-and-clustering.html","id":"mean","dir":"Articles","previous_headings":"","what":"Mean","title":"Statistics and clustering","text":"mean function computes mean vector, matrix, cube. vector argument, mean calculated using elements vector. matrix argument, mean calculated column default (dim = 0), row (dim = 1). cube argument, mean calculated along specified dimension (matrices plus dim = 2 slices). Usage:","code":"mean(V)  mean(M) mean(M, dim)  mean(Q) mean(Q, dim)"},{"path":"https://pacha.dev/cpp11armadillo/articles/statistics-and-clustering.html","id":"examples","dir":"Articles","previous_headings":"Mean","what":"Examples","title":"Statistics and clustering","text":"","code":"[[cpp11::register]] list mean1_(const doubles_matrix<>& X,   const doubles_matrix<>& Y) {   mat A = as_Mat(X);   mat B = as_Mat(Y);      // create a cube with 3 copies of B + random noise   cube C(B.n_rows, B.n_cols, 3);   C.slice(0) = B + 0.1 * randn<mat>(B.n_rows, B.n_cols);   C.slice(1) = B + 0.2 * randn<mat>(B.n_rows, B.n_cols);   C.slice(2) = B + 0.3 * randn<mat>(B.n_rows, B.n_cols);    vec D = mean(A).t();   vec E = mean(A, 1);   vec F = mean(mean(B, 1), 1);    writable::list res(3);   res[0] = as_doubles(D);   res[1] = as_doubles(E);   res[2] = as_doubles(F);    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/statistics-and-clustering.html","id":"median","dir":"Articles","previous_headings":"","what":"Median","title":"Statistics and clustering","text":"median function computes median vector matrix. vector argument, median calculated using elements vector. matrix argument, median calculated column default (dim = 0), row (dim = 1). Usage:","code":"median(V)  median(M) median(M, dim)"},{"path":"https://pacha.dev/cpp11armadillo/articles/statistics-and-clustering.html","id":"examples-1","dir":"Articles","previous_headings":"Median","what":"Examples","title":"Statistics and clustering","text":"","code":"[[cpp11::register]] list median1_(const doubles_matrix<>& X,   const doubles_matrix<>& Y) {   mat A = as_Mat(X);   mat B = as_Mat(Y);    vec C = median(A).t();   vec D = median(A, 1);   vec E = median(median(B, 1), 1);    writable::list res(3);   res[0] = as_doubles(C);   res[1] = as_doubles(D);   res[2] = as_doubles(E);    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/statistics-and-clustering.html","id":"stddev","dir":"Articles","previous_headings":"","what":"Standard deviation","title":"Statistics and clustering","text":"stddev function computes standard deviation vector matrix. vector argument, standard deviation calculated using elements vector. matrix argument, standard deviation calculated column default (dim = 0), row (dim = 1). norm_type argument optional; default norm_type = 0 used. norm_type argument controls type normalization used, N denoting number observations: norm_type = 0, normalization done using N-1, providing best unbiased estimation standard deviation (observations normal distribution). norm_type = 1, normalization done using N, provides second moment observations mean. Usage:","code":"stddev(V) stddev(V, norm_type)  stddev(M) stddev(M, norm_type) stddev(M, norm_type, dim)"},{"path":"https://pacha.dev/cpp11armadillo/articles/statistics-and-clustering.html","id":"examples-2","dir":"Articles","previous_headings":"Standard deviation","what":"Examples","title":"Statistics and clustering","text":"","code":"[[cpp11::register]] list stddev1_(const doubles_matrix<>& X,   const doubles_matrix<>& Y) {   mat A = as_Mat(X);   mat B = as_Mat(Y);    vec C = stddev(A).t();   vec D = stddev(A, 1).t();   vec E = stddev(A, 1, 1);    writable::list res(3);   res[0] = as_doubles(C);   res[1] = as_doubles(D);   res[2] = as_doubles(E);    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/statistics-and-clustering.html","id":"var","dir":"Articles","previous_headings":"","what":"Variance","title":"Statistics and clustering","text":"var function computes variance vector matrix. vector argument, variance calculated using elements vector. matrix argument, variance calculated column default (dim = 0), row (dim = 1). norm_type argument optional; default norm_type = 0 used. norm_type argument controls type normalization used, N denoting number observations: norm_type = 0, normalization done using N-1, providing best unbiased estimation standard deviation (observations normal distribution). norm_type = 1, normalization done using N, provides second moment observations mean. Usage:","code":"var(V) var(V, norm_type)  var(M) var(M, norm_type) var(M, norm_type, dim)"},{"path":"https://pacha.dev/cpp11armadillo/articles/statistics-and-clustering.html","id":"examples-3","dir":"Articles","previous_headings":"Variance","what":"Examples","title":"Statistics and clustering","text":"","code":"[[cpp11::register]] list var1_(const doubles_matrix<>& X,   const doubles_matrix<>& Y) {   mat A = as_Mat(X);   mat B = as_Mat(Y);    vec C = var(A).t();   vec D = var(A, 1).t();   vec E = var(A, 1, 1);    writable::list res(3);   res[0] = as_doubles(C);   res[1] = as_doubles(D);   res[2] = as_doubles(E);    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/statistics-and-clustering.html","id":"range","dir":"Articles","previous_headings":"","what":"Range","title":"Statistics and clustering","text":"range function computes range vector matrix. vector argument, range calculated using elements vector. matrix argument, range calculated column default (dim = 0), row (dim = 1). Usage:","code":"range(V)  range(M) range(M, dim)"},{"path":"https://pacha.dev/cpp11armadillo/articles/statistics-and-clustering.html","id":"examples-4","dir":"Articles","previous_headings":"Range","what":"Examples","title":"Statistics and clustering","text":"","code":"[[cpp11::register]] list range1_(const doubles_matrix<>& X,   const doubles_matrix<>& Y) {   mat A = as_Mat(X);   mat B = as_Mat(Y);    vec C = range(A).t();   vec D = range(A, 1);    writable::list res(2);   res[0] = as_doubles(C);   res[1] = as_doubles(D);    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/statistics-and-clustering.html","id":"cov","dir":"Articles","previous_headings":"","what":"Covariance","title":"Statistics and clustering","text":"cov function computes covariance two matrices vectors. row X Y observation column variable, (,j)-th entry cov(X,Y) covariance -th variable X j-th variable Y. two matrix arguments X Y, cov(X,Y) function computes covariance two matrices. vector arguments, type vector ignored element vector treated observation. cov(X) function equivalent cov(X, X). norm_type argument optional; default norm_type = 0 used. norm_type argument controls type normalization used, N denoting number observations: norm_type = 0, normalization done using N-1, providing best unbiased estimation covariance matrix (observations normal distribution). norm_type = 1, normalization done using N, provides second moment matrix observations mean. Usage:","code":"cov(X, Y, norm_type)  cov(X) cov(X, norm_type)"},{"path":"https://pacha.dev/cpp11armadillo/articles/statistics-and-clustering.html","id":"examples-5","dir":"Articles","previous_headings":"Covariance","what":"Examples","title":"Statistics and clustering","text":"","code":"[[cpp11::register]] list cov1_(const doubles_matrix<>& X,   const doubles_matrix<>& Y) {   mat A = as_Mat(X);   mat B = as_Mat(Y);    mat C = cov(A, B);   mat D = cov(A, B, 1);    writable::list res(2);   res[0] = as_doubles_matrix(C);   res[1] = as_doubles_matrix(D);    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/statistics-and-clustering.html","id":"cor","dir":"Articles","previous_headings":"","what":"Correlation","title":"Statistics and clustering","text":"cor function computes correlation coefficient two matrices vectors. row X Y observation column variable, (,j)-th entry cor(X,Y) correlation coefficient -th variable X j-th variable Y. two matrix arguments X Y, cor(X,Y) function computes correlation coefficient two matrices. vector arguments, type vector ignored element vector treated observation. norm_type argument optional; default norm_type = 0 used. norm_type argument controls type normalization used, N denoting number observations: norm_type = 0, normalization done using N-1. norm_type = 1, normalization done using N. Usage:","code":"cor(X, Y) cor(X, Y, norm_type)  cor(X) cor(X, norm_type)"},{"path":"https://pacha.dev/cpp11armadillo/articles/statistics-and-clustering.html","id":"examples-6","dir":"Articles","previous_headings":"Correlation","what":"Examples","title":"Statistics and clustering","text":"","code":"[[cpp11::register]] list cor1_(const doubles_matrix<>& X,   const doubles_matrix<>& Y) {   mat A = as_Mat(X);   mat B = as_Mat(Y);    mat C = cor(A, B);   mat D = cor(A, B, 1);    writable::list res(2);   res[0] = as_doubles_matrix(C);   res[1] = as_doubles_matrix(D);    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/statistics-and-clustering.html","id":"hist","dir":"Articles","previous_headings":"","what":"Histogram","title":"Statistics and clustering","text":"hist function computes histogram counts vector matrix. vector argument, histogram calculated using elements vector. matrix argument, histogram calculated column default (dim = 0), row (dim = 1). bin centers can automatically determined data, number bins specified via n_bins (default 10). range bins determined range data. bin centers can explicitly specified centers vector, must contain monotonically increasing values. Usage:","code":"hist(V) hist(V, n_bins) hist(V, centers)  hist(M, centers) hist(M, centers, dim)"},{"path":"https://pacha.dev/cpp11armadillo/articles/statistics-and-clustering.html","id":"examples-7","dir":"Articles","previous_headings":"Histogram","what":"Examples","title":"Statistics and clustering","text":"","code":"[[cpp11::register]] list hist1_(const int& n) {   vec A = randu<vec>(n);    uvec h1 = hist(A, 11);   uvec h2 = hist(A, linspace<vec>(-2, 2, 11));    writable::list res(2);   res[0] = as_integers(h1);   res[1] = as_integers(h2);    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/statistics-and-clustering.html","id":"histc","dir":"Articles","previous_headings":"","what":"Histogram of counts with user specified edges","title":"Statistics and clustering","text":"histc function computes histogram counts vector matrix. vector argument, histogram calculated using elements vector. matrix argument, histogram calculated column default (dim = 0), row (dim = 1). bin edges specified contain monotonically increasing values. Usage:","code":"histc(V) histc(V, edges)  hist(M, edges) hist(M, edges, dim)"},{"path":"https://pacha.dev/cpp11armadillo/articles/statistics-and-clustering.html","id":"examples-8","dir":"Articles","previous_headings":"Histogram of counts with user specified edges","what":"Examples","title":"Statistics and clustering","text":"","code":"[[cpp11::register]] integers histc1_(const int& n) {   vec A = randu<vec>(n);    uvec h = histc(A, linspace<vec>(-2,2,11));    return as_integers(h); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/statistics-and-clustering.html","id":"quantile","dir":"Articles","previous_headings":"","what":"Quantiles of a dataset","title":"Statistics and clustering","text":"quantile function computes quantiles corresponding cumulative probability values vector matrix. vector argument, quantiles calculated using elements vector. matrix argument, quantiles calculated column default (dim = 0), row (dim = 1). probabilities specified second argument P. algorithm calculating quantiles based Definition 5 : Rob J. Hyndman Yanan Fan. Sample Quantiles Statistical Packages. American Statistician, 50(4), 361-365, 1996. DOI: 10.2307/2684934 Usage:","code":"quantile(V, P)  quantile(M, P) quantile(M, P, dim)"},{"path":"https://pacha.dev/cpp11armadillo/articles/statistics-and-clustering.html","id":"examples-9","dir":"Articles","previous_headings":"Quantiles of a dataset","what":"Examples","title":"Statistics and clustering","text":"","code":"[[cpp11::register]] doubles quantile1_(const int& n) {   vec A = randu<vec>(n);    vec P = {0.0, 0.25, 0.50, 0.75, 1.0};   vec Q = quantile(A, P);    return as_doubles(Q); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/statistics-and-clustering.html","id":"princomp","dir":"Articles","previous_headings":"","what":"Principal component analysis (PCA)","title":"Statistics and clustering","text":"TODO: needs custom method.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/statistics-and-clustering.html","id":"normpdf","dir":"Articles","previous_headings":"","what":"Probability density function of normal distribution","title":"Statistics and clustering","text":"normpdf function computes probability density function normal distribution scalar, vector, matrix. scalar x X, probability density function computed according Gaussian (normal) distribution using corresponding mean value m M corresponding standard deviation value s S. y=1s2πexp[−(x−m)22s2] y = \\frac{1}{s \\sqrt{2\\pi}} \\exp\\left[-\\frac{(x - m)^2}{2s^2}\\right] X can scalar, vector, matrix. M S can jointly either scalars, vectors, matrices. M S omitted, values assumed 0 1, respectively.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/statistics-and-clustering.html","id":"caveat","dir":"Articles","previous_headings":"Probability density function of normal distribution","what":"Caveat","title":"Statistics and clustering","text":"reduce incidence numerical underflows, consider using log_normpdf().","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/statistics-and-clustering.html","id":"examples-10","dir":"Articles","previous_headings":"Probability density function of normal distribution","what":"Examples","title":"Statistics and clustering","text":"","code":"[[cpp11::register]] list normpdf1_(const int& n) {   vec X = randu<vec>(n);   vec M = randu<vec>(n);   vec S = randu<vec>(n);    vec P1 = normpdf(X);   vec P2 = normpdf(X, M, S);   vec P3 = normpdf(1.23, M, S);   vec P4 = normpdf(X, 4.56, 7.89);   double P5 = normpdf(1.23, 4.56, 7.89);    writable::list res(5);    res[0] = as_doubles(P1);   res[1] = as_doubles(P2);   res[2] = as_doubles(P3);   res[3] = as_doubles(P4);   res[4] = as_doubles({P5});    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/statistics-and-clustering.html","id":"log_normpdf","dir":"Articles","previous_headings":"","what":"Probability density function of log-normal distribution","title":"Statistics and clustering","text":"log_normpdf function computes probability density function log-normal distribution scalar, vector, matrix. scalar x X, probability density function computed according log-normal distribution using corresponding mean value m M corresponding standard deviation value s S. y=log[1xs2πexp[−(log(x)−m)22s2]] y = \\log\\left[\\frac{1}{x s \\sqrt{2\\pi}} \\exp\\left[-\\frac{(\\log(x) - m)^2}{2s^2}\\right]\\right] X can scalar, vector, matrix. M S can jointly either scalars, vectors, matrices. M S omitted, values assumed 0 1, respectively.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/statistics-and-clustering.html","id":"examples-11","dir":"Articles","previous_headings":"Probability density function of log-normal distribution","what":"Examples","title":"Statistics and clustering","text":"","code":"[[cpp11::register]] list lognormpdf1_(const int& n) {   vec X = randu<vec>(n);   vec M = randu<vec>(n);   vec S = randu<vec>(n);    vec P1 = log_normpdf(X);   vec P2 = log_normpdf(X, M, S);   vec P3 = log_normpdf(1.23, M, S);   vec P4 = log_normpdf(X, 4.56, 7.89);   double P5 = log_normpdf(1.23, 4.56, 7.89);    writable::list res(5);    res[0] = as_doubles(P1);   res[1] = as_doubles(P2);   res[2] = as_doubles(P3);   res[3] = as_doubles(P4);   res[4] = as_doubles({P5});    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/statistics-and-clustering.html","id":"normcdf","dir":"Articles","previous_headings":"","what":"Cumulative distribution function of normal distribution","title":"Statistics and clustering","text":"scalar x X, compute cumulative distribution function according Gaussian (normal) distribution using corresponding mean value m M corresponding standard deviation value s S. X can scalar, vector, matrix. M S can jointly either scalars, vectors, matrices. M S omitted, values assumed 0 1, respectively.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/statistics-and-clustering.html","id":"examples-12","dir":"Articles","previous_headings":"Cumulative distribution function of normal distribution","what":"Examples","title":"Statistics and clustering","text":"","code":"[[cpp11::register]] list normcdf1_(const int& n) {   vec X = randu<vec>(n);   vec M = randu<vec>(n);   vec S = randu<vec>(n);    vec P1 = normcdf(X);   vec P2 = normcdf(X, M, S);   vec P3 = normcdf(1.23, M, S);   vec P4 = normcdf(X, 4.56, 7.89);   double P5 = normcdf(1.23, 4.56, 7.89);    writable::list res(5);    res[0] = as_doubles(P1);   res[1] = as_doubles(P2);   res[2] = as_doubles(P3);   res[3] = as_doubles(P4);   res[4] = as_doubles({P5});    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/statistics-and-clustering.html","id":"mvnrnd","dir":"Articles","previous_headings":"","what":"Random vectors from multivariate normal distribution","title":"Statistics and clustering","text":"Generate matrix random column vectors multivariate Gaussian (normal) distribution parameters M C. M mean must column vector. C covariance matrix must symmetric positive semi-definite (ideally positive definite). N number column vectors generate. N omitted, assumed 1. Usage: first form returns error generation fails. second third form reset X return boolean set false without error generation fails.","code":"X = mvnrnd(M, C) mvnrnd(X, M, C) mvnrnd(X. M. C. N)"},{"path":"https://pacha.dev/cpp11armadillo/articles/statistics-and-clustering.html","id":"examples-13","dir":"Articles","previous_headings":"Random vectors from multivariate normal distribution","what":"Examples","title":"Statistics and clustering","text":"","code":"[[cpp11::register]] doubles_matrix<> mvnrnd1_(const int& n, const int&m) {   vec M = randu<vec>(n);    mat B = randu<mat>(n, n);   mat C = B.t() * B;    mat X = mvnrnd(M, C, m);    return as_doubles_matrix(X); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/statistics-and-clustering.html","id":"chi2rnd","dir":"Articles","previous_headings":"","what":"Random numbers from chi-squared distribution","title":"Statistics and clustering","text":"Generate random scalar, vector, matrix elements sampled chi-squared distribution degrees freedom specified parameter DF DF_scalar. DF vector matrix, DF_scalar scalar. chi2rnd(DF) form, output vector matrix size type DF. value DF DF_scalar must greater zero. element DF specifies separate degree freedom. Usage:","code":"v = chi2rnd(DF) X = chi2rnd(DF)  double s = chi2rnd<double>(DF_scalar) // float also works vec v = chi2rnd<vec>(DF_scalar, n_elem) mat X = chi2rnd<mat>(DF_scalar, n_rows, n_cols) mat Y = chi2rnd<mat>(DF_scalar, size(X))"},{"path":"https://pacha.dev/cpp11armadillo/articles/statistics-and-clustering.html","id":"examples-14","dir":"Articles","previous_headings":"Random numbers from chi-squared distribution","what":"Examples","title":"Statistics and clustering","text":"","code":"[[cpp11::register]] list chi2rnd1_(const int& n, const int& m) {   mat X = chi2rnd(2, n, m);   mat Y = randi<mat>(n, m, distr_param(1, 10));   mat Z = chi2rnd(Y);    writable::list res(2);   res[0] = as_doubles_matrix(X);   res[1] = as_doubles_matrix(Z);    return res;  }"},{"path":"https://pacha.dev/cpp11armadillo/articles/statistics-and-clustering.html","id":"wishrnd","dir":"Articles","previous_headings":"","what":"Random matrix from Wishart distribution","title":"Statistics and clustering","text":"Generate random matrix sampled Wishart distribution parameters S df. S symmetric positive definite matrix (e.g., covariance matrix). df scalar specifying degrees freedom; can non-integer value. D optional argument specify Cholesky decomposition S. Usage: first form returns error generation fails. second form resets W returns boolean set false without error generation fails.","code":"W = wishrnd(S, df) wishrnd(W, S, df)"},{"path":"https://pacha.dev/cpp11armadillo/articles/statistics-and-clustering.html","id":"examples-15","dir":"Articles","previous_headings":"Random matrix from Wishart distribution","what":"Examples","title":"Statistics and clustering","text":"","code":"[[cpp11::register]] doubles_matrix<> wishrnd1_(const int& n) {   mat X = randu<mat>(n, n);   mat S = X.t() * X;    mat W = wishrnd(S, 6.7);    return as_doubles_matrix(W); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/statistics-and-clustering.html","id":"iwishrnd","dir":"Articles","previous_headings":"","what":"Random matrix from inverse Wishart distribution","title":"Statistics and clustering","text":"Generate random matrix sampled inverse Wishart distribution parameters T df. T symmetric positive definite matrix. df scalar specifying degrees freedom; can non-integer value. Dinv optional argument; specifies Cholesky decomposition inverse T. Dinv provided, T ignored. Using Dinv efficient iwishrnd() needs used many times T matrix. Usage: first form returns error generation fails. second form resets W returns boolean set false without error generation fails.","code":"W = iwishrnd(T, df) iwishrnd(W, T, df)"},{"path":"https://pacha.dev/cpp11armadillo/articles/statistics-and-clustering.html","id":"examples-16","dir":"Articles","previous_headings":"Random matrix from inverse Wishart distribution","what":"Examples","title":"Statistics and clustering","text":"","code":"[[cpp11::register]] doubles_matrix<> iwishrnd1_(const int& n, const double& d) {   mat X = randu<mat>(n, n);   mat T = X.t() * X;    mat W = iwishrnd(T, d);    return as_doubles_matrix(W); }"},{"path":"https://pacha.dev/cpp11armadillo/articles/statistics-and-clustering.html","id":"kmeans","dir":"Articles","previous_headings":"","what":"Cluster data into disjoint sets","title":"Statistics and clustering","text":"Cluster given data k disjoint sets. Usage: means parameter output matrix storing resulting centroids sets, centroid stored column vector. clustering fails, means matrix reset set false. data parameter input data matrix, sample stored column vector. k parameter indicates number centroids. keep_existing: use centroids specified means matrix starting point. static_subset: use subset data vectors (repeatable). random_subset: use subset data vectors (random). static_spread: use maximally spread subset data vectors (repeatable). random_spread: use maximally spread subset data vectors (random start). n_iter parameter specifies number clustering iterations. data dependent, 10 typically sufficient. print_mode parameter either true false, indicating whether progress printed clustering.","code":"kmeans(means, data, k, seed_mode, n_iter, print_mode)"},{"path":"https://pacha.dev/cpp11armadillo/articles/statistics-and-clustering.html","id":"caveats","dir":"Articles","previous_headings":"Cluster data into disjoint sets","what":"Caveats","title":"Statistics and clustering","text":"number samples data matrix larger k. Works much faster OpenMP enabled compiler (e.g., -fopenmp GCC clang). Cpp11armadillo finds OpenMP uses default. probabilistic clustering, use gmm_diag gmm_full classes instead.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/statistics-and-clustering.html","id":"examples-17","dir":"Articles","previous_headings":"Cluster data into disjoint sets","what":"Examples","title":"Statistics and clustering","text":"","code":"[[cpp11::register]] list kmeans1_(const int& n, const int& d) {   mat data(d, n, fill::randu);    mat means;    bool status = kmeans(means, data, 2, random_subset, 10, true);    if (status == false) {     stop(\"clustering failed\");   }    writable::list res(2);    res[0] = writable::logicals({status});   res[1] = as_doubles_matrix(means);    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/statistics-and-clustering.html","id":"gmm_diag-gmm_full","dir":"Articles","previous_headings":"","what":"Probabilistic clustering and likelihood calculation via mixture of Gaussians","title":"Statistics and clustering","text":"gmm_diag gmm_full classes multi-variate probabilistic clustering likelihood calculation via Gaussian Mixture Models (GMMs). distribution data modelled : p(x)=∑g=0ngaus−1hgN(x∣mg,Cg) p(x) = \\sum_{g=0}^{n_{\\text{gaus}}-1} h_g N(x \\mid m_g, C_g) : xx column vector. ngausn_{\\text{gaus}} number Gaussians; ngaus≥1n_{\\text{gaus}} \\geq 1. N(x∣mg,Cg)N(x \\mid m_g, C_g) represents Gaussian (normal) distribution. hgh_g heft (weight), constraints hg≥0h_g \\geq 0 ∑hg=1\\sum h_g = 1. mgm_g mean vector (centroid) dimensionality ndimsn_{\\text{dims}}. CgC_g covariance matrix (either diagonal full). gmm_diag gmm_full include tailored k-means Expectation Maximisation algorithms learning model parameters training data. instance gmm_diag gmm_full named M, member functions variables : M.log_p(V): return scalar representing log-likelihood vector V (type vec). M.log_p(V, g): return scalar representing log-likelihood vector V (type vec), according Gaussian index g. M.log_p(X): return row vector (type rowvec) containing log-likelihoods column vector matrix X (type mat). M.log_p(X, g): return row vector (type rowvec) containing log-likelihoods column vector matrix X (type mat), according Gaussian index g. M.sum_log_p(X): return scalar representing sum log-likelihoods column vectors matrix X (type mat). M.sum_log_p(X, g): return scalar representing sum log-likelihoods column vectors matrix X (type mat), according Gaussian index g. M.avg_log_p(X): return scalar representing average log-likelihood column vectors matrix X (type mat). M.avg_log_p(X, g): return scalar representing average log-likelihood column vectors matrix X (type mat), according Gaussian index g. eucl_dist: Euclidean distance (takes means account). prob_dist: probabilistic “distance”, defined inverse likelihood (takes account means, covariances, hefts). M.assign(X, dist_mode): return row vector (type urowvec) containing indices closest means (Gaussians) column vector matrix X (type mat); parameter dist_mode either eucl_dist prob_dist (per .assign() function ). M.raw_hist(X, dist_mode): return row vector (type urowvec) representing raw histogram counts; entry number counts corresponding Gaussian; count number times corresponding Gaussian closest column vector matrix X; parameter dist_mode either eucl_dist prob_dist (per .assign() function ). M.norm_hist(X, dist_mode): similar .raw_hist() function ; return row vector (type rowvec) containing normalised counts; vector sums one; parameter dist_mode either eucl_dist prob_dist (per .assign() function ). M.generate(): return column vector (type vec) representing random sample generated according model’s parameters. M.generate(N): return matrix (type mat) containing N column vectors, vector representing random sample generated according model’s parameters. M.save(filename): save model file return bool indicating either success (true) failure (false). M.load(filename): load model file return bool indicating either success (true) failure (false). M.n_gaus(): return number means/Gaussians model. M.n_dims(): return dimensionality means/Gaussians model. M.reset(n_dims, n_gaus): set model dimensionality n_dims, n_gaus number Gaussians; means set zero, covariance matrix representations equivalent identity matrix, hefts (weights) set uniform. M.hefts: read-row vector (type rowvec) containing hefts (weights). M.means: read-matrix (type mat) containing means (centroids), stored column vectors. M.dcovs: read-matrix (type mat) containing representation diagonal covariance matrices, set diagonal covariances Gaussian stored column vector; applicable gmm_diag class. M.fcovs: read-cube containing full covariance matrices, covariance matrix stored slice within cube; applicable gmm_full class. M.set_hefts(V): set hefts (weights) model specified row vector V (type rowvec); number hefts must match existing model. M.set_means(X): set means specified matrix X (type mat); number means dimensionality must match existing model. M.set_dcovs(X): set diagonal covariances matrices specified matrix X (type mat), set diagonal covariances Gaussian stored column vector; number covariance matrices dimensionality must match existing model; applicable gmm_diag class. M.set_fcovs(X): set full covariances matrices specified cube X, covariance matrix stored slice within cube; number covariance matrices dimensionality must match existing model; applicable gmm_full class. M.set_params(means, covs, hefts): set parameters time; type layout parameters per .set_hefts(), .set_means(), .set_dcovs(), .set_fcovs() functions ; number Gaussians dimensionality can different existing model. data: matrix (type mat) containing training samples; sample stored column vector. n_gaus: set number Gaussians n_gaus; help convergence, recommended given data matrix () contains least 10 samples Gaussian. eucl_dist: Euclidean distance. maha_dist: Mahalanobis distance, uses global diagonal covariance matrix estimated training samples; recommended probabilistic applications. keep_existing: keep existing model (modify means, covariances, hefts). static_subset: subset training samples (repeatable). random_subset: subset training samples (random). static_spread: maximally spread subset training samples (repeatable). random_spread: maximally spread subset training samples (random start). Caveat: seeding initial means static_spread random_spread can much time consuming static_subset random_subset. km_iter: number iterations k-means algorithm; data dependent, typically 10 iterations sufficient. em_iter: number iterations EM algorithm; data dependent, typically 5 10 iterations sufficient. var_floor: variance floor (smallest allowed value) diagonal covariances; setting small non-zero value can help convergence /better quality parameter estimates. print_mode: either true false; enable disable printing progress k-means EM algorithms.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/statistics-and-clustering.html","id":"caveats-1","dir":"Articles","previous_headings":"Probabilistic clustering and likelihood calculation via mixture of Gaussians","what":"Caveats","title":"Statistics and clustering","text":"gmm_diag tailored diagonal covariance matrices. gmm_full tailored full covariance matrices. gmm_diag considerably faster gmm_full, cost reduction modelling accuracy. faster execution multi-core machines, enable OpenMP compiler (e.g., -fopenmp GCC clang). Cpp11armadillo finds OpenMP uses default.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/statistics-and-clustering.html","id":"examples-18","dir":"Articles","previous_headings":"Probabilistic clustering and likelihood calculation via mixture of Gaussians","what":"Examples","title":"Statistics and clustering","text":"","code":"[[cpp11::register]] list gmm1_(const int& n, const int& d) {   // create synthetic data with 2 Gaussians    mat data(d, n, fill::zeros);    vec mean0 = linspace<vec>(1, d, d);   vec mean1 = mean0 + 2;    int i = 0;    while (i < n) {     if (i < n) {       data.col(i) = mean0 + randn<vec>(d);       ++i;     }     if (i < n) {       data.col(i) = mean0 + randn<vec>(d);       ++i;     }     if (i < n) {       data.col(i) = mean1 + randn<vec>(d);       ++i;     }   }    // model the data as a diagonal GMM with 2 Gaussians    gmm_diag model;    bool status = model.learn(data, 2, maha_dist, random_subset, 10, 5, 1e-5,     true);    if (status == false) {     stop(\"learning failed\");   }    model.means.print(\"means:\");    double scalar_likelihood = model.log_p(data.col(0));   rowvec set_likelihood = model.log_p(data.cols(0, 9));    double overall_likelihood = model.avg_log_p(data);    uword gaus_id = model.assign(data.col(0), eucl_dist);   urowvec gaus_ids = model.assign(data.cols(0, 9), prob_dist);    rowvec hist1 = model.norm_hist(data, eucl_dist);   urowvec hist2 = model.raw_hist(data, prob_dist);    writable::list res(9);    res[0] = writable::logicals({status});   res[1] = as_doubles_matrix(model.means);   res[2] = as_doubles({scalar_likelihood});   res[3] = as_doubles(set_likelihood.t());   res[4] = as_doubles({overall_likelihood});   res[5] = as_integers(gaus_id);   res[6] = as_integers(gaus_ids.t());   res[7] = as_doubles(hist1.t());   res[8] = as_integers(hist2.t());    return res; }"},{"path":"https://pacha.dev/cpp11armadillo/articles/statistics-and-clustering.html","id":"implementation-details","dir":"Articles","previous_headings":"Probabilistic clustering and likelihood calculation via mixture of Gaussians","what":"Implementation details","title":"Statistics and clustering","text":"implementation details available following paper: Sanderson, Conrad, Ryan Curtin. “open source C++ implementation multi-threaded Gaussian mixture models, k-means expectation maximisation.” 2017 11th international conference signal processing communication systems (ICSPCS), pp. 1-8. IEEE, 2017.","code":""},{"path":"https://pacha.dev/cpp11armadillo/articles/syntax-comparison-for-matlab-users.html","id":"matlaboctave-syntax-and-corresponding-armadillo-syntax","dir":"Articles","previous_headings":"","what":"Matlab/Octave syntax and corresponding Armadillo syntax","title":"Syntax comparison for MATLAB/Octave users","text":"following table uses V vectors, M matrices, Q cubes F fields. operations, , B C denote matrices. MATLAB indexes 1 (R ), k-th column MATLAB index k C++ index k-1.","code":""},{"path":"https://pacha.dev/cpp11armadillo/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mauricio Vargas Sepulveda. Author, maintainer. Jonathan Schneider Malamud. Contributor. Conrad Sanderson. Author.           Armadillo library (C++)","code":""},{"path":"https://pacha.dev/cpp11armadillo/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Vargas Sepulveda M, Sanderson C (2025). cpp11armadillo: 'Armadillo' Interface. R package version 0.4.4, https://github.com/pachadotdev/cpp11armadillo, https://pacha.dev/cpp11armadillo/.","code":"@Manual{,   title = {cpp11armadillo: An 'Armadillo' Interface},   author = {Mauricio {Vargas Sepulveda} and Conrad Sanderson},   year = {2025},   note = {R package version 0.4.4,     https://github.com/pachadotdev/cpp11armadillo},   url = {https://pacha.dev/cpp11armadillo/}, }"},{"path":[]},{"path":"https://pacha.dev/cpp11armadillo/index.html","id":"about","dir":"","previous_headings":"","what":"About","title":"An Armadillo Interface","text":"goal cpp11armadillo provide novel approach use Armadillo C++ library using header-cpp11 R package simplify things end-user. ⚠️Important⚠️: cpp11armadillo created ease writing functions packages offer --fly compilation code snippets. idea pass matrices/vectors R C++, write pure C++/Armadillo code computation, export result back R proper data structures. RcppArmadillo popular R package used 1200 CRAN packages 2024-12-13. RcppArmadillo uses GPL-3 license. cpp11armadillo different internals, even goal , aims : Enforcing copy--write semantics. Improving safety using R API C++ code. Using UTF-8 strings everywhere. Applying newer C++11 features. straightforward, simpler implementation. Faster compilation time lower memory requirements. Growing vectors efficiently. design differences result marginally higher speed cpp11armadillo, real difference end user cpp11armadillo: smaller memory footprint. Uses Apache license (.e., Apache license permissive allows commercial use attribution, unlike GPL-3, requires open-source redistribution.) Can vendored used restricted environments (.e., servers internet access restricts installation packages). expanded current preprint. software useful , please consider donating Buy Coffee. donations used continue improving cpp11armadillo.","code":""},{"path":"https://pacha.dev/cpp11armadillo/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting Started","title":"An Armadillo Interface","text":"Install released version cpp11armadillo CRAN: , alternatively, install development version cpp11armadillo GitHub:","code":"install.packages(\"cpp11armadillo\") remotes::install_github(\"pachadotdev/cpp11armadillo\")"},{"path":"https://pacha.dev/cpp11armadillo/index.html","id":"who-uses-cpp11armadillo","dir":"","previous_headings":"","what":"Who uses cpp11armadillo?","title":"An Armadillo Interface","text":"cpp11armadillo used following packages: lotri, created Dr. Matt Fidler. economiccomplexity, created .","code":""},{"path":"https://pacha.dev/cpp11armadillo/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"An Armadillo Interface","text":"provided package template RStudio also works VS Code. idea package simple possible, least amount setup get started. RStudio/VSCode, go empty directory choice run: follow instructions README.md path new package . template contains simple Ordinary Least Squares (OLS) example can run test package. vignette expands OLS estimator, hansen package expands use cpp11armadillo Econometric models. cpp11armadillotest directory contains package use test cpp11armadillo. includes tests OLS, eigenvalues, matrix decompositions (Cholesky QR), Capital Asset Pricing Model (CAPM), data consistency R C++. Please note cpp11armadillotest dummy package test C++ build GitHub Actions, need install . can check code get extra examples.","code":"# subdir + package name # subdir can be \".\" to create the package in the current directory cpp11armadillo::pkg_template(\"pkgtemplate\", \"myownpackage\")"},{"path":"https://pacha.dev/cpp11armadillo/index.html","id":"linear-algebra-libraries","dir":"","previous_headings":"","what":"Linear Algebra Libraries","title":"An Armadillo Interface","text":"Armadillo supports OpenBLAS, Intel MKL, Accelerate framework (Mac). Install OpenBLAS Debian-based systems : Restart R run following command verify: R display something like:","code":"sudo apt-get install libopenblas-dev sessionInfo() Matrix products: default BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so; LAPACK version 3.10.0"},{"path":"https://pacha.dev/cpp11armadillo/reference/armadillo_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Armadillo version — armadillo_version","title":"Get Armadillo version — armadillo_version","text":"Provides Armadillo C++ library version name number included package.","code":""},{"path":"https://pacha.dev/cpp11armadillo/reference/armadillo_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Armadillo version — armadillo_version","text":"","code":"armadillo_version()"},{"path":"https://pacha.dev/cpp11armadillo/reference/armadillo_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Armadillo version — armadillo_version","text":"string Armadillo version name number","code":""},{"path":"https://pacha.dev/cpp11armadillo/reference/armadillo_version.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Armadillo version — armadillo_version","text":"","code":"armadillo_version() #> [1] \"Stochastic Parrot 14.2.2\""},{"path":"https://pacha.dev/cpp11armadillo/reference/check_cpp11.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that cpp11 can be used — check_cpp11","title":"Check that cpp11 can be used — check_cpp11","text":"Check cpp11 can used","code":""},{"path":"https://pacha.dev/cpp11armadillo/reference/check_cpp11.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that cpp11 can be used — check_cpp11","text":"","code":"check_cpp11()"},{"path":"https://pacha.dev/cpp11armadillo/reference/check_cpp11.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that cpp11 can be used — check_cpp11","text":"integer value","code":""},{"path":"https://pacha.dev/cpp11armadillo/reference/cpp11armadillo-package.html","id":null,"dir":"Reference","previous_headings":"","what":"cpp11armadillo: An 'Armadillo' Interface — cpp11armadillo-package","title":"cpp11armadillo: An 'Armadillo' Interface — cpp11armadillo-package","text":"Provides function declarations inline function definitions facilitate communication R 'Armadillo' 'C++' library linear algebra scientific computing. implementation detailed Vargas Sepulveda Schneider Malamud (2024) doi:10.48550/arXiv.2408.11074 .","code":""},{"path":[]},{"path":"https://pacha.dev/cpp11armadillo/reference/cpp11armadillo-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"cpp11armadillo: An 'Armadillo' Interface — cpp11armadillo-package","text":"Maintainer: Mauricio Vargas Sepulveda m.sepulveda@mail.utoronto.ca (ORCID) Authors: Conrad Sanderson (Armadillo library (C++)) contributors: Jonathan Schneider Malamud [contributor]","code":""},{"path":"https://pacha.dev/cpp11armadillo/reference/cpp_vendor.html","id":null,"dir":"Reference","previous_headings":"","what":"Vendor the cpp11 and cpp11armadillo dependency — cpp_vendor","title":"Vendor the cpp11 and cpp11armadillo dependency — cpp_vendor","text":"Vendoring act making copy 3rd party packages project using. often used go language community.","code":""},{"path":"https://pacha.dev/cpp11armadillo/reference/cpp_vendor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vendor the cpp11 and cpp11armadillo dependency — cpp_vendor","text":"","code":"cpp_vendor(dir = NULL, subdir = \"/inst/include\")"},{"path":"https://pacha.dev/cpp11armadillo/reference/cpp_vendor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vendor the cpp11 and cpp11armadillo dependency — cpp_vendor","text":"dir directory vendor code . subdir subdirectory vendor code .","code":""},{"path":"https://pacha.dev/cpp11armadillo/reference/cpp_vendor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vendor the cpp11 and cpp11armadillo dependency — cpp_vendor","text":"file path vendored code (invisibly).","code":""},{"path":"https://pacha.dev/cpp11armadillo/reference/cpp_vendor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Vendor the cpp11 and cpp11armadillo dependency — cpp_vendor","text":"function vendors cpp11 cpp11armadillo package copying cpp11 cpp11armadillo headers `inst/include` folder adding 'cpp11 version: XYZ' 'cpp11armadillo version: XYZ' top files, XYZ version cpp11 cpp11armadillo currently installed machine. Vendoring places responsibility updating code . Bugfixes new features cpp11 cpp11armadillo available code run `cpp_vendor()` .","code":""},{"path":"https://pacha.dev/cpp11armadillo/reference/cpp_vendor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vendor the cpp11 and cpp11armadillo dependency — cpp_vendor","text":"","code":"# create a new directory dir <- tempdir() dir.create(dir) #> Warning: '/tmp/RtmpvVmgNp' already exists  # vendor the cpp11 headers into the directory cpp_vendor(dir) #> Makevars and/or Makevars.win should have a line such as 'PKG_CPPFLAGS = -I../inst/include' #> DESCRIPTION should not have lines such as 'LinkingTo: cpp11'"},{"path":"https://pacha.dev/cpp11armadillo/reference/pkg_template.html","id":null,"dir":"Reference","previous_headings":"","what":"Start a new project with the cpp11armadillo package template — pkg_template","title":"Start a new project with the cpp11armadillo package template — pkg_template","text":"Start new project cpp11armadillo package template","code":""},{"path":"https://pacha.dev/cpp11armadillo/reference/pkg_template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Start a new project with the cpp11armadillo package template — pkg_template","text":"","code":"pkg_template(path = NULL, pkgname = NULL)"},{"path":"https://pacha.dev/cpp11armadillo/reference/pkg_template.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Start a new project with the cpp11armadillo package template — pkg_template","text":"path Path new project pkgname Name new package","code":""},{"path":"https://pacha.dev/cpp11armadillo/reference/pkg_template.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Start a new project with the cpp11armadillo package template — pkg_template","text":"file path copied template (invisibly).","code":""},{"path":"https://pacha.dev/cpp11armadillo/reference/pkg_template.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Start a new project with the cpp11armadillo package template — pkg_template","text":"","code":"# create a new directory dir <- tempdir() dir.create(dir) #> Warning: '/tmp/RtmpvVmgNp' already exists  # copy the package template into the directory pkg_template(dir, \"mynewpkg\")"},{"path":"https://pacha.dev/cpp11armadillo/news/index.html","id":"cpp11armadillo-044","dir":"Changelog","previous_headings":"","what":"cpp11armadillo 0.4.4","title":"cpp11armadillo 0.4.4","text":"Provides wrappers avoid CRAN notes Armadillo functions use std::cout (#05a342b). Allows convert uword integers.","code":""},{"path":"https://pacha.dev/cpp11armadillo/news/index.html","id":"cpp11armadillo-043","dir":"Changelog","previous_headings":"","what":"cpp11armadillo 0.4.3","title":"cpp11armadillo 0.4.3","text":"Expanded documentation. Functions vectors, matrices, cubes. Statistics clustering. Syntax comparison MATLAB/Octave users. New package template. Provides as_mat() as_col() wrappers as_Mat() as_Col().","code":""},{"path":"https://pacha.dev/cpp11armadillo/news/index.html","id":"cpp11armadillo-042","dir":"Changelog","previous_headings":"","what":"cpp11armadillo 0.4.2","title":"cpp11armadillo 0.4.2","text":"Expands package internals convert umat integers_matrix<>. Expands package internals convert ivec integers.","code":""},{"path":"https://pacha.dev/cpp11armadillo/news/index.html","id":"cpp11armadillo-041","dir":"Changelog","previous_headings":"","what":"cpp11armadillo 0.4.1","title":"cpp11armadillo 0.4.1","text":"CRAN release: 2024-12-19 Modified configure file fix Fedora errors. Includes parts official Armadillo documentation vignettes adapted working R. Thanks lot @barracuda156 @bastistician reporting issue.","code":""},{"path":"https://pacha.dev/cpp11armadillo/news/index.html","id":"cpp11armadillo-040","dir":"Changelog","previous_headings":"","what":"cpp11armadillo 0.4.0","title":"cpp11armadillo 0.4.0","text":"CRAN release: 2024-12-13 Uses Armadillo 14.2.2 C++15 compatibility. Adds configure file check compatibility C++ compiler Armadillo.","code":""},{"path":"https://pacha.dev/cpp11armadillo/news/index.html","id":"cpp11armadillo-035","dir":"Changelog","previous_headings":"","what":"cpp11armadillo 0.3.5","title":"cpp11armadillo 0.3.5","text":"example package now includes configure file set number cores compiling package. package template includes instructions alter default number cores (50% available cores).","code":""},{"path":"https://pacha.dev/cpp11armadillo/news/index.html","id":"cpp11armadillo-034","dir":"Changelog","previous_headings":"","what":"cpp11armadillo 0.3.4","title":"cpp11armadillo 0.3.4","text":"Uses std::copy std::memcpy convert R C++.","code":""},{"path":"https://pacha.dev/cpp11armadillo/news/index.html","id":"cpp11armadillo-033","dir":"Changelog","previous_headings":"","what":"cpp11armadillo 0.3.3","title":"cpp11armadillo 0.3.3","text":"CRAN release: 2024-09-02 Rewritten vignettes.","code":""},{"path":"https://pacha.dev/cpp11armadillo/news/index.html","id":"cpp11armadillo-032","dir":"Changelog","previous_headings":"","what":"cpp11armadillo 0.3.2","title":"cpp11armadillo 0.3.2","text":"Includes armadillo.hpp headers. Improved package template.","code":""},{"path":"https://pacha.dev/cpp11armadillo/news/index.html","id":"cpp11armadillo-031","dir":"Changelog","previous_headings":"","what":"cpp11armadillo 0.3.1","title":"cpp11armadillo 0.3.1","text":"CRAN release: 2024-08-25 Adds Jonathan contributor. Includes working paper arXiv. Avoids duplicating mtcars_mat tests.","code":""},{"path":"https://pacha.dev/cpp11armadillo/news/index.html","id":"cpp11armadillo-030","dir":"Changelog","previous_headings":"","what":"cpp11armadillo 0.3.0","title":"cpp11armadillo 0.3.0","text":"Uses Armadillo version “Stochastic Parrot 14.0.2”.","code":""},{"path":"https://pacha.dev/cpp11armadillo/news/index.html","id":"cpp11armadillo-029","dir":"Changelog","previous_headings":"","what":"cpp11armadillo 0.2.9","title":"cpp11armadillo 0.2.9","text":"Uses Armadillo version Cortisol Retox 12.6.7. Removes leontief dependency test functions. Adds minimal documentation use OpenBLAS R Armadillo. New examples, clearer informative. New Makevars template commented debbuging flags allows set number cores. Adds armadillo_version() get version Armadillo R.","code":""},{"path":"https://pacha.dev/cpp11armadillo/news/index.html","id":"cpp11armadillo-028","dir":"Changelog","previous_headings":"","what":"cpp11armadillo 0.2.8","title":"cpp11armadillo 0.2.8","text":"CRAN release: 2024-07-04 Provides templates convert sparse matrices. Removes using namespace std; headers (see https://www.reddit.com/r/cpp_questions/comments/160eivk/is_using_namespace_std_really_considered_bad/).","code":""},{"path":"https://pacha.dev/cpp11armadillo/news/index.html","id":"cpp11armadillo-027","dir":"Changelog","previous_headings":"","what":"cpp11armadillo 0.2.7","title":"cpp11armadillo 0.2.7","text":"Provides wrappers arma::uvec used subset vectors. Minimal optimizations R /C++ templates.","code":""},{"path":"https://pacha.dev/cpp11armadillo/news/index.html","id":"cpp11armadillo-026","dir":"Changelog","previous_headings":"","what":"cpp11armadillo 0.2.6","title":"cpp11armadillo 0.2.6","text":"Fewer implicit conversions. Using balanced parallelization OpenMP.","code":""},{"path":"https://pacha.dev/cpp11armadillo/news/index.html","id":"cpp11armadillo-025","dir":"Changelog","previous_headings":"","what":"cpp11armadillo 0.2.5","title":"cpp11armadillo 0.2.5","text":"CRAN release: 2024-05-14 Uses messages generate warnings R API (#379d8d6). Skips OpenMP Mac hardware (#13e805b). Provides template convert vectors column matrices (#6138a35), First version CRAN.","code":""},{"path":"https://pacha.dev/cpp11armadillo/news/index.html","id":"cpp11armadillo-020","dir":"Changelog","previous_headings":"","what":"cpp11armadillo 0.2.0","title":"cpp11armadillo 0.2.0","text":"Uses OpenMP. Sticks Clang format.","code":""},{"path":"https://pacha.dev/cpp11armadillo/news/index.html","id":"cpp11armadillo-012","dir":"Changelog","previous_headings":"","what":"cpp11armadillo 0.1.2","title":"cpp11armadillo 0.1.2","text":"Improves vendoring (.e., cpp11)","code":""},{"path":"https://pacha.dev/cpp11armadillo/news/index.html","id":"cpp11armadillo-011","dir":"Changelog","previous_headings":"","what":"cpp11armadillo 0.1.1","title":"cpp11armadillo 0.1.1","text":"Includes formal tests cpp11armadillotest directory. Provides conversion complex vector/matrix list double vectors/matrices.","code":""},{"path":"https://pacha.dev/cpp11armadillo/news/index.html","id":"cpp11armadillo-01","dir":"Changelog","previous_headings":"","what":"cpp11armadillo 0.1","title":"cpp11armadillo 0.1","text":"First public version. Elemental vector/matrix conversion /R C++.","code":""}]
