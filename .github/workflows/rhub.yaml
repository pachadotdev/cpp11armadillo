# R-hub's sanitizer checks with custom test integration
# Skips vignette building to avoid pandoc-citeproc issues

name: R-hub Sanitizer Checks
run-name: "${{ github.event.inputs.id || 'Sanitizer checks' }}: ${{ github.event.inputs.name || github.event.head_commit.message || github.event.pull_request.title || format('triggered by {0}', github.triggering_actor) }}"

on:
  workflow_dispatch:
    inputs:
      config:
        description: 'Sanitizer configurations'
        type: string
        default: 'clang-asan,clang-ubsan,valgrind'
      name:
        description: 'Custom run name'
        type: string
      id:
        description: 'Custom run ID'
        type: string
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions: read-all

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      containers: ${{ steps.rhub-setup.outputs.containers }}

    steps:
    - uses: r-hub/actions/setup@v1
      with:
        config: ${{ github.event.inputs.config || 'clang-asan,clang-ubsan,valgrind' }}
      id: rhub-setup

  sanitizer-checks:
    needs: setup
    if: ${{ needs.setup.outputs.containers != '[]' }}
    runs-on: ubuntu-latest
    name: "${{ matrix.config.label }}"
    
    strategy:
      fail-fast: false
      matrix:
        config: ${{ fromJson(needs.setup.outputs.containers) }}
        
    container:
      image: ${{ matrix.config.container }}
      
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      R_KEEP_PKG_SOURCE: yes
      _R_CHECK_FORCE_SUGGESTS_: false
      _R_CHECK_CRAN_INCOMING_: false
      # Skip vignettes
      R_BUILD_ARGS: "--no-manual --no-build-vignettes"
      R_CHECK_ARGS: "--no-manual --no-vignettes --no-build-vignettes"

    steps:
      - uses: r-hub/actions/checkout@v1
      
      - uses: r-hub/actions/platform-info@v1
        with:
          token: ${{ secrets.RHUB_TOKEN }}
          job-config: ${{ matrix.config.job-config }}
      
      # Setup dependencies but skip vignette-related packages    
      - uses: r-hub/actions/setup-deps@v1
        with:
          token: ${{ secrets.RHUB_TOKEN }}
          job-config: ${{ matrix.config.job-config }}
          extra-packages: |
            any::testthat
            any::pak
          needs: |
            testthat
      
      - name: Remove vignettes to prevent build issues
        run: |
          # Remove vignettes directory to ensure they're not built
          if [ -d "vignettes" ]; then
            echo "Removing vignettes directory"
            rm -rf vignettes
          fi
          if [ -d "cpp11armadillotest/vignettes" ]; then
            echo "Removing cpp11armadillotest/vignettes directory"
            rm -rf cpp11armadillotest/vignettes
          fi
        shell: bash
          
      - name: Install cpp11armadillotest with tests
        run: |
          if (dir.exists("cpp11armadillotest")) {
            cat("Installing cpp11armadillotest dependencies\n")
            # Use pak which should be available from setup-deps
            if (requireNamespace("pak", quietly = TRUE)) {
              pak::local_install_deps("cpp11armadillotest", upgrade = FALSE)
            }
            
            cat("Building and installing cpp11armadillotest with tests\n")
            # Build without vignettes
            system("R CMD build --no-build-vignettes --no-manual cpp11armadillotest")
            
            # Find the built package
            tarball <- list.files(pattern = "^cpp11armadillotest.*\\.tar\\.gz$", full.names = TRUE)[1]
            if (!is.na(tarball) && file.exists(tarball)) {
              install.packages(tarball, repos = NULL, type = "source", INSTALL_opts = "--install-tests")
              cat("cpp11armadillotest installed successfully\n")
            } else {
              cat("Could not find cpp11armadillotest tarball\n")
            }
          }
        shell: Rscript {0}
      
      # Run check without vignettes  
      - uses: r-hub/actions/run-check@v1
        with:
          token: ${{ secrets.RHUB_TOKEN }}
          job-config: ${{ matrix.config.job-config }}
          args: 'c("--no-manual", "--no-vignettes", "--no-build-vignettes")'
          build_args: 'c("--no-manual", "--no-build-vignettes")'
          
      - name: Run cpp11armadillotest tests with sanitizers
        if: always()
        run: |
          cat("\n=== Running cpp11armadillotest tests ===\n")
          
          # Check if package and tests exist
          if (!requireNamespace("cpp11armadillotest", quietly = TRUE)) {
            cat("cpp11armadillotest package not installed\n")
            quit(status = 0)
          }
          
          if (!dir.exists("cpp11armadillotest/tests")) {
            cat("cpp11armadillotest/tests directory not found\n") 
            quit(status = 0)
          }
          
          # Load required packages
          library(testthat)
          library(cpp11armadillotest)
          
          # Run tests
          old_wd <- getwd()
          setwd("cpp11armadillotest/tests")
          
          test_results <- tryCatch({
            test_check("cpp11armadillotest", reporter = "progress")
          }, error = function(e) {
            cat("Error running tests: ", conditionMessage(e), "\n")
            NULL
          })
          
          setwd(old_wd)
          
          # Check results
          if (!is.null(test_results)) {
            print(test_results)
            failures <- sum(as.data.frame(test_results)$failed)
            if (failures > 0) {
              cat(sprintf("\n%d test(s) failed under %s\n", failures, "${{ matrix.config.label }}"))
              quit(status = 1)
            }
          }
        shell: Rscript {0}
        
      - name: Show sanitizer results
        if: always()
        run: |
          echo "=== Searching for sanitizer output ==="
          
          # Function to check files for sanitizer output
          check_sanitizer_output() {
            local file="$1"
            if [ -f "$file" ]; then
              if grep -E "(AddressSanitizer|UndefinedBehaviorSanitizer|ERROR: LeakSanitizer|==ERROR==|runtime error:|attempting free on address|memcheck)" "$file" >/dev/null 2>&1; then
                echo "=== Sanitizer output found in $file ==="
                grep -E "(AddressSanitizer|UndefinedBehaviorSanitizer|ERROR: LeakSanitizer|==ERROR==|runtime error:|attempting free on address|memcheck)" "$file" -A 5 -B 5
              fi
            fi
          }
          
          # Check R CMD check output
          find . -name "*.Rcheck" -type d | while read checkdir; do
            echo "Checking $checkdir"
            find "$checkdir" -name "*.Rout" -o -name "*.Rout.fail" -o -name "*.log" | while read f; do
              check_sanitizer_output "$f"
            done
          done
          
          # Check test output specifically
          for f in cpp11armadillo.Rcheck/tests/testthat.Rout cpp11armadillotest.Rcheck/tests/testthat.Rout; do
            if [ -f "$f" ]; then
              echo "=== Test output from $f ==="
              cat "$f"
            fi
          done
          