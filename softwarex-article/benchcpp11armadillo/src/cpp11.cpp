// Generated by cpp11: do not edit by hand
// clang-format off


#include "cpp11/declarations.hpp"
#include <R_ext/Visibility.h>

// 01_bench.cpp
doubles bench_eig_cpp11armadillo_(const doubles_matrix<>& m);
extern "C" SEXP _benchcpp11armadillo_bench_eig_cpp11armadillo_(SEXP m) {
  BEGIN_CPP11
    return cpp11::as_sexp(bench_eig_cpp11armadillo_(cpp11::as_cpp<cpp11::decay_t<const doubles_matrix<>&>>(m)));
  END_CPP11
}
// 01_bench.cpp
double bench_multi_cpp11armadillo_(const doubles& p, const doubles& q, const doubles& r);
extern "C" SEXP _benchcpp11armadillo_bench_multi_cpp11armadillo_(SEXP p, SEXP q, SEXP r) {
  BEGIN_CPP11
    return cpp11::as_sexp(bench_multi_cpp11armadillo_(cpp11::as_cpp<cpp11::decay_t<const doubles&>>(p), cpp11::as_cpp<cpp11::decay_t<const doubles&>>(q), cpp11::as_cpp<cpp11::decay_t<const doubles&>>(r)));
  END_CPP11
}

extern "C" {
static const R_CallMethodDef CallEntries[] = {
    {"_benchcpp11armadillo_bench_eig_cpp11armadillo_",   (DL_FUNC) &_benchcpp11armadillo_bench_eig_cpp11armadillo_,   1},
    {"_benchcpp11armadillo_bench_multi_cpp11armadillo_", (DL_FUNC) &_benchcpp11armadillo_bench_multi_cpp11armadillo_, 3},
    {NULL, NULL, 0}
};
}

extern "C" attribute_visible void R_init_benchcpp11armadillo(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
